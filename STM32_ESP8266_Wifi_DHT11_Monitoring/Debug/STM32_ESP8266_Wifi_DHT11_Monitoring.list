
STM32_ESP8266_Wifi_DHT11_Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08002cc4  08002cc4  00003cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003390  08003390  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003390  08003390  00004390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003398  08003398  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003398  08003398  00004398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800339c  0800339c  0000439c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080033a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000064  08003404  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08003404  00005420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aa5  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a17  00000000  00000000  0000cb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000700  00000000  00000000  0000e550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000054a  00000000  00000000  0000ec50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172fd  00000000  00000000  0000f19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009322  00000000  00000000  00026497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082445  00000000  00000000  0002f7b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1bfe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002088  00000000  00000000  000b1c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000b3ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002cac 	.word	0x08002cac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002cac 	.word	0x08002cac

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <DHT11_Data>:
 *
 */
#include "DHT11.h"

void DHT11_Data(uint8_t* data)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t resp_status 		= 0;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_num, bit, byte = 0;
 800017c:	2300      	movs	r3, #0
 800017e:	733b      	strb	r3, [r7, #12]

	//START SIGNAL
	setPinToOutput(GPIOA, GPIO_PIN_1);
 8000180:	2102      	movs	r1, #2
 8000182:	4841      	ldr	r0, [pc, #260]	@ (8000288 <DHT11_Data+0x118>)
 8000184:	f000 f8ca 	bl	800031c <setPinToOutput>
	delayUS_ASM(20000);
 8000188:	4b40      	ldr	r3, [pc, #256]	@ (800028c <DHT11_Data+0x11c>)
 800018a:	4618      	mov	r0, r3
 800018c:	f1a0 0001 	sub.w	r0, r0, #1
 8000190:	2800      	cmp	r0, #0
 8000192:	d1fb      	bne.n	800018c <DHT11_Data+0x1c>
	setPinToInput(GPIOA, GPIO_PIN_1);
 8000194:	2102      	movs	r1, #2
 8000196:	483c      	ldr	r0, [pc, #240]	@ (8000288 <DHT11_Data+0x118>)
 8000198:	f000 f87a 	bl	8000290 <setPinToInput>

	//CHECKING RESPONSE
	// DHT11 - 30us high average + 40us low average
	delayUS_ASM(40);
 800019c:	23f0      	movs	r3, #240	@ 0xf0
 800019e:	4618      	mov	r0, r3
 80001a0:	f1a0 0001 	sub.w	r0, r0, #1
 80001a4:	2800      	cmp	r0, #0
 80001a6:	d1fb      	bne.n	80001a0 <DHT11_Data+0x30>

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET)
 80001a8:	2102      	movs	r1, #2
 80001aa:	4837      	ldr	r0, [pc, #220]	@ (8000288 <DHT11_Data+0x118>)
 80001ac:	f001 f9da 	bl	8001564 <HAL_GPIO_ReadPin>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d11b      	bne.n	80001ee <DHT11_Data+0x7e>
    {
    	delayUS_ASM(80);
 80001b6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f1a0 0001 	sub.w	r0, r0, #1
 80001c0:	2800      	cmp	r0, #0
 80001c2:	d1fb      	bne.n	80001bc <DHT11_Data+0x4c>

		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 80001c4:	2102      	movs	r1, #2
 80001c6:	4830      	ldr	r0, [pc, #192]	@ (8000288 <DHT11_Data+0x118>)
 80001c8:	f001 f9cc 	bl	8001564 <HAL_GPIO_ReadPin>
 80001cc:	4603      	mov	r3, r0
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d10a      	bne.n	80001e8 <DHT11_Data+0x78>
		{
			resp_status = 1;
 80001d2:	2301      	movs	r3, #1
 80001d4:	73fb      	strb	r3, [r7, #15]

			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET);
 80001d6:	bf00      	nop
 80001d8:	2102      	movs	r1, #2
 80001da:	482b      	ldr	r0, [pc, #172]	@ (8000288 <DHT11_Data+0x118>)
 80001dc:	f001 f9c2 	bl	8001564 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	d0f8      	beq.n	80001d8 <DHT11_Data+0x68>
 80001e6:	e004      	b.n	80001f2 <DHT11_Data+0x82>
		}
		else
		{
			resp_status = 0;
 80001e8:	2300      	movs	r3, #0
 80001ea:	73fb      	strb	r3, [r7, #15]
 80001ec:	e001      	b.n	80001f2 <DHT11_Data+0x82>
		}
    }
    else
    {
    	resp_status = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	73fb      	strb	r3, [r7, #15]
    }

    if (resp_status)
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d03e      	beq.n	8000276 <DHT11_Data+0x106>
    {
    	for (; byte_num < 5; byte_num++, byte = 0)
 80001f8:	e039      	b.n	800026e <DHT11_Data+0xfe>
    	{
    		for (bit = 0; bit < 8; bit++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	737b      	strb	r3, [r7, #13]
 80001fe:	e029      	b.n	8000254 <DHT11_Data+0xe4>
    		{
    			while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 8000200:	bf00      	nop
 8000202:	2102      	movs	r1, #2
 8000204:	4820      	ldr	r0, [pc, #128]	@ (8000288 <DHT11_Data+0x118>)
 8000206:	f001 f9ad 	bl	8001564 <HAL_GPIO_ReadPin>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d0f8      	beq.n	8000202 <DHT11_Data+0x92>

				delayUS_ASM(35);
 8000210:	23d2      	movs	r3, #210	@ 0xd2
 8000212:	4618      	mov	r0, r3
 8000214:	f1a0 0001 	sub.w	r0, r0, #1
 8000218:	2800      	cmp	r0, #0
 800021a:	d1fb      	bne.n	8000214 <DHT11_Data+0xa4>

				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
 800021c:	2102      	movs	r1, #2
 800021e:	481a      	ldr	r0, [pc, #104]	@ (8000288 <DHT11_Data+0x118>)
 8000220:	f001 f9a0 	bl	8001564 <HAL_GPIO_ReadPin>
 8000224:	4603      	mov	r3, r0
 8000226:	2b01      	cmp	r3, #1
 8000228:	d109      	bne.n	800023e <DHT11_Data+0xce>
				{
					byte |= 0x80 >> bit;
 800022a:	7b7b      	ldrb	r3, [r7, #13]
 800022c:	2280      	movs	r2, #128	@ 0x80
 800022e:	fa42 f303 	asr.w	r3, r2, r3
 8000232:	b25a      	sxtb	r2, r3
 8000234:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000238:	4313      	orrs	r3, r2
 800023a:	b25b      	sxtb	r3, r3
 800023c:	733b      	strb	r3, [r7, #12]
				}

				while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET);
 800023e:	bf00      	nop
 8000240:	2102      	movs	r1, #2
 8000242:	4811      	ldr	r0, [pc, #68]	@ (8000288 <DHT11_Data+0x118>)
 8000244:	f001 f98e 	bl	8001564 <HAL_GPIO_ReadPin>
 8000248:	4603      	mov	r3, r0
 800024a:	2b01      	cmp	r3, #1
 800024c:	d0f8      	beq.n	8000240 <DHT11_Data+0xd0>
    		for (bit = 0; bit < 8; bit++)
 800024e:	7b7b      	ldrb	r3, [r7, #13]
 8000250:	3301      	adds	r3, #1
 8000252:	737b      	strb	r3, [r7, #13]
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	2b07      	cmp	r3, #7
 8000258:	d9d2      	bls.n	8000200 <DHT11_Data+0x90>
    		}

    		data[byte_num] = byte;
 800025a:	7bbb      	ldrb	r3, [r7, #14]
 800025c:	687a      	ldr	r2, [r7, #4]
 800025e:	4413      	add	r3, r2
 8000260:	7b3a      	ldrb	r2, [r7, #12]
 8000262:	701a      	strb	r2, [r3, #0]
    	for (; byte_num < 5; byte_num++, byte = 0)
 8000264:	7bbb      	ldrb	r3, [r7, #14]
 8000266:	3301      	adds	r3, #1
 8000268:	73bb      	strb	r3, [r7, #14]
 800026a:	2300      	movs	r3, #0
 800026c:	733b      	strb	r3, [r7, #12]
 800026e:	7bbb      	ldrb	r3, [r7, #14]
 8000270:	2b04      	cmp	r3, #4
 8000272:	d9c2      	bls.n	80001fa <DHT11_Data+0x8a>
    }
    else
    {
    	data[4] = 0;
    }
}
 8000274:	e003      	b.n	800027e <DHT11_Data+0x10e>
    	data[4] = 0;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3304      	adds	r3, #4
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	3710      	adds	r7, #16
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40010800 	.word	0x40010800
 800028c:	0001d4c0 	.word	0x0001d4c0

08000290 <setPinToInput>:

void setPinToInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000290:	b480      	push	{r7}
 8000292:	b087      	sub	sp, #28
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	807b      	strh	r3, [r7, #2]
    uint32_t 		  position = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	617b      	str	r3, [r7, #20]
    uint32_t 		  register_offset;
    volatile uint32_t *config_register;
    uint32_t 		  temp;

    while (GPIO_Pin)
 80002a0:	e033      	b.n	800030a <setPinToInput+0x7a>
    {
        if (GPIO_Pin & 0x01)
 80002a2:	887b      	ldrh	r3, [r7, #2]
 80002a4:	f003 0301 	and.w	r3, r3, #1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d028      	beq.n	80002fe <setPinToInput+0x6e>
        {
            register_offset = (position < 8) ? 0 : 1;
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	2b07      	cmp	r3, #7
 80002b0:	bf8c      	ite	hi
 80002b2:	2301      	movhi	r3, #1
 80002b4:	2300      	movls	r3, #0
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	613b      	str	r3, [r7, #16]
            config_register = &GPIOx->CRL + register_offset;
 80002ba:	687a      	ldr	r2, [r7, #4]
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	4413      	add	r3, r2
 80002c2:	60fb      	str	r3, [r7, #12]

            temp =  *config_register;
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	60bb      	str	r3, [r7, #8]
            temp &= ~(0x0F << ((position & 0x07) * 4));
 80002ca:	697b      	ldr	r3, [r7, #20]
 80002cc:	f003 0307 	and.w	r3, r3, #7
 80002d0:	009b      	lsls	r3, r3, #2
 80002d2:	220f      	movs	r2, #15
 80002d4:	fa02 f303 	lsl.w	r3, r2, r3
 80002d8:	43db      	mvns	r3, r3
 80002da:	461a      	mov	r2, r3
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	4013      	ands	r3, r2
 80002e0:	60bb      	str	r3, [r7, #8]
            temp |= (0x04 << ((position & 0x07) * 4));  // Input floating
 80002e2:	697b      	ldr	r3, [r7, #20]
 80002e4:	f003 0307 	and.w	r3, r3, #7
 80002e8:	009b      	lsls	r3, r3, #2
 80002ea:	2204      	movs	r2, #4
 80002ec:	fa02 f303 	lsl.w	r3, r2, r3
 80002f0:	461a      	mov	r2, r3
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	4313      	orrs	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]

            *config_register = temp;
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	68ba      	ldr	r2, [r7, #8]
 80002fc:	601a      	str	r2, [r3, #0]
        }

        position++;
 80002fe:	697b      	ldr	r3, [r7, #20]
 8000300:	3301      	adds	r3, #1
 8000302:	617b      	str	r3, [r7, #20]
        GPIO_Pin >>= 1;
 8000304:	887b      	ldrh	r3, [r7, #2]
 8000306:	085b      	lsrs	r3, r3, #1
 8000308:	807b      	strh	r3, [r7, #2]
    while (GPIO_Pin)
 800030a:	887b      	ldrh	r3, [r7, #2]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d1c8      	bne.n	80002a2 <setPinToInput+0x12>
    }
}
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	371c      	adds	r7, #28
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr

0800031c <setPinToOutput>:

void setPinToOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800031c:	b480      	push	{r7}
 800031e:	b087      	sub	sp, #28
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
 8000324:	460b      	mov	r3, r1
 8000326:	807b      	strh	r3, [r7, #2]
    uint32_t 		  position = 0;
 8000328:	2300      	movs	r3, #0
 800032a:	617b      	str	r3, [r7, #20]
    uint32_t 		  register_offset;
    volatile uint32_t *config_register;
    uint32_t 		  temp;

    while (GPIO_Pin)
 800032c:	e033      	b.n	8000396 <setPinToOutput+0x7a>
    {
        if (GPIO_Pin & 0x01)
 800032e:	887b      	ldrh	r3, [r7, #2]
 8000330:	f003 0301 	and.w	r3, r3, #1
 8000334:	2b00      	cmp	r3, #0
 8000336:	d028      	beq.n	800038a <setPinToOutput+0x6e>
        {
            register_offset = (position < 8) ? 0 : 1;
 8000338:	697b      	ldr	r3, [r7, #20]
 800033a:	2b07      	cmp	r3, #7
 800033c:	bf8c      	ite	hi
 800033e:	2301      	movhi	r3, #1
 8000340:	2300      	movls	r3, #0
 8000342:	b2db      	uxtb	r3, r3
 8000344:	613b      	str	r3, [r7, #16]
            config_register = &GPIOx->CRL + register_offset;
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]

            temp =  *config_register;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	60bb      	str	r3, [r7, #8]
            temp &= ~(0x0F << ((position & 0x07) * 4));
 8000356:	697b      	ldr	r3, [r7, #20]
 8000358:	f003 0307 	and.w	r3, r3, #7
 800035c:	009b      	lsls	r3, r3, #2
 800035e:	220f      	movs	r2, #15
 8000360:	fa02 f303 	lsl.w	r3, r2, r3
 8000364:	43db      	mvns	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	68bb      	ldr	r3, [r7, #8]
 800036a:	4013      	ands	r3, r2
 800036c:	60bb      	str	r3, [r7, #8]
            temp |= (0x01 << ((position & 0x07) * 4));  // Output push-pull
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	f003 0307 	and.w	r3, r3, #7
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	2201      	movs	r2, #1
 8000378:	fa02 f303 	lsl.w	r3, r2, r3
 800037c:	461a      	mov	r2, r3
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	4313      	orrs	r3, r2
 8000382:	60bb      	str	r3, [r7, #8]

            *config_register = temp;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	68ba      	ldr	r2, [r7, #8]
 8000388:	601a      	str	r2, [r3, #0]
        }

        position++;
 800038a:	697b      	ldr	r3, [r7, #20]
 800038c:	3301      	adds	r3, #1
 800038e:	617b      	str	r3, [r7, #20]
        GPIO_Pin >>= 1;
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	085b      	lsrs	r3, r3, #1
 8000394:	807b      	strh	r3, [r7, #2]
    while (GPIO_Pin)
 8000396:	887b      	ldrh	r3, [r7, #2]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d1c8      	bne.n	800032e <setPinToOutput+0x12>
    }
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	371c      	adds	r7, #28
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr

080003a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003b0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d013      	beq.n	80003e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80003c0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80003c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d00b      	beq.n	80003e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80003d0:	e000      	b.n	80003d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80003d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80003d4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f9      	beq.n	80003d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80003de:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	b2d2      	uxtb	r2, r2
 80003e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80003e8:	687b      	ldr	r3, [r7, #4]
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <ESP_Init>:
uint8_t serverSend(char *html, uint32_t size, uint8_t link_id);

/*****************************************************************************************************************************************/

uint8_t ESP_Init(UART_HandleTypeDef* esp_uart, char* ssid, char* pass)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
	uint8_t init_stat;

	huart = esp_uart;
 8000400:	4a50      	ldr	r2, [pc, #320]	@ (8000544 <ESP_Init+0x150>)
 8000402:	68fb      	ldr	r3, [r7, #12]
 8000404:	6013      	str	r3, [r2, #0]

	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000406:	4b4f      	ldr	r3, [pc, #316]	@ (8000544 <ESP_Init+0x150>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68da      	ldr	r2, [r3, #12]
 800040e:	4b4d      	ldr	r3, [pc, #308]	@ (8000544 <ESP_Init+0x150>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f042 0220 	orr.w	r2, r2, #32
 8000418:	60da      	str	r2, [r3, #12]

	sendCommand("AT+RST\r\n");
 800041a:	484b      	ldr	r0, [pc, #300]	@ (8000548 <ESP_Init+0x154>)
 800041c:	f000 f8a2 	bl	8000564 <sendCommand>
//
	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000420:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000424:	4849      	ldr	r0, [pc, #292]	@ (800054c <ESP_Init+0x158>)
 8000426:	f000 f8b5 	bl	8000594 <waitForInput>
 800042a:	4603      	mov	r3, r0
 800042c:	f083 0301 	eor.w	r3, r3, #1
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b00      	cmp	r3, #0
 8000434:	d005      	beq.n	8000442 <ESP_Init+0x4e>
	{
		ITM_SendChar('1');
 8000436:	2031      	movs	r0, #49	@ 0x31
 8000438:	f7ff ffb6 	bl	80003a8 <ITM_SendChar>
		init_stat = ESP_STAT_NOINIT;
 800043c:	2301      	movs	r3, #1
 800043e:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 8000440:	e07b      	b.n	800053a <ESP_Init+0x146>
	}

	HAL_Delay(2000);
 8000442:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000446:	f000 fdd7 	bl	8000ff8 <HAL_Delay>

	sendCommand("AT\r\n");
 800044a:	4841      	ldr	r0, [pc, #260]	@ (8000550 <ESP_Init+0x15c>)
 800044c:	f000 f88a 	bl	8000564 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000450:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000454:	483d      	ldr	r0, [pc, #244]	@ (800054c <ESP_Init+0x158>)
 8000456:	f000 f89d 	bl	8000594 <waitForInput>
 800045a:	4603      	mov	r3, r0
 800045c:	f083 0301 	eor.w	r3, r3, #1
 8000460:	b2db      	uxtb	r3, r3
 8000462:	2b00      	cmp	r3, #0
 8000464:	d005      	beq.n	8000472 <ESP_Init+0x7e>
	{
		ITM_SendChar('2');
 8000466:	2032      	movs	r0, #50	@ 0x32
 8000468:	f7ff ff9e 	bl	80003a8 <ITM_SendChar>
		init_stat = ESP_STAT_NOINIT;
 800046c:	2301      	movs	r3, #1
 800046e:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 8000470:	e063      	b.n	800053a <ESP_Init+0x146>
	}

	sendCommand("AT+CWMODE_CUR=1\r\n");
 8000472:	4838      	ldr	r0, [pc, #224]	@ (8000554 <ESP_Init+0x160>)
 8000474:	f000 f876 	bl	8000564 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000478:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800047c:	4833      	ldr	r0, [pc, #204]	@ (800054c <ESP_Init+0x158>)
 800047e:	f000 f889 	bl	8000594 <waitForInput>
 8000482:	4603      	mov	r3, r0
 8000484:	f083 0301 	eor.w	r3, r3, #1
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b00      	cmp	r3, #0
 800048c:	d005      	beq.n	800049a <ESP_Init+0xa6>
	{
		ITM_SendChar('3');
 800048e:	2033      	movs	r0, #51	@ 0x33
 8000490:	f7ff ff8a 	bl	80003a8 <ITM_SendChar>
		init_stat = ESP_STAT_NOINIT;
 8000494:	2301      	movs	r3, #1
 8000496:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 8000498:	e04f      	b.n	800053a <ESP_Init+0x146>
	}

	char* cmd = (char*)malloc(strlen("AT+CWJAP_CUR=\"\",\"\"\r\n") + strlen(ssid) + strlen(pass) + 1);
 800049a:	68b8      	ldr	r0, [r7, #8]
 800049c:	f7ff fe60 	bl	8000160 <strlen>
 80004a0:	4604      	mov	r4, r0
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff fe5c 	bl	8000160 <strlen>
 80004a8:	4603      	mov	r3, r0
 80004aa:	4423      	add	r3, r4
 80004ac:	3315      	adds	r3, #21
 80004ae:	4618      	mov	r0, r3
 80004b0:	f001 fec0 	bl	8002234 <malloc>
 80004b4:	4603      	mov	r3, r0
 80004b6:	613b      	str	r3, [r7, #16]

	sprintf(cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, pass);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	68ba      	ldr	r2, [r7, #8]
 80004bc:	4926      	ldr	r1, [pc, #152]	@ (8000558 <ESP_Init+0x164>)
 80004be:	6938      	ldr	r0, [r7, #16]
 80004c0:	f001 fff2 	bl	80024a8 <siprintf>

	sendCommand(cmd);
 80004c4:	6938      	ldr	r0, [r7, #16]
 80004c6:	f000 f84d 	bl	8000564 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 80004ca:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80004ce:	481f      	ldr	r0, [pc, #124]	@ (800054c <ESP_Init+0x158>)
 80004d0:	f000 f860 	bl	8000594 <waitForInput>
 80004d4:	4603      	mov	r3, r0
 80004d6:	f083 0301 	eor.w	r3, r3, #1
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d005      	beq.n	80004ec <ESP_Init+0xf8>
	{
		ITM_SendChar('4');
 80004e0:	2034      	movs	r0, #52	@ 0x34
 80004e2:	f7ff ff61 	bl	80003a8 <ITM_SendChar>
		init_stat = ESP_STAT_NOINIT;
 80004e6:	2301      	movs	r3, #1
 80004e8:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 80004ea:	e026      	b.n	800053a <ESP_Init+0x146>
	}

	sendCommand("AT+CIPMUX=1\r\n");
 80004ec:	481b      	ldr	r0, [pc, #108]	@ (800055c <ESP_Init+0x168>)
 80004ee:	f000 f839 	bl	8000564 <sendCommand>
	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 80004f2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80004f6:	4815      	ldr	r0, [pc, #84]	@ (800054c <ESP_Init+0x158>)
 80004f8:	f000 f84c 	bl	8000594 <waitForInput>
 80004fc:	4603      	mov	r3, r0
 80004fe:	f083 0301 	eor.w	r3, r3, #1
 8000502:	b2db      	uxtb	r3, r3
 8000504:	2b00      	cmp	r3, #0
 8000506:	d005      	beq.n	8000514 <ESP_Init+0x120>
	{
		ITM_SendChar('5');
 8000508:	2035      	movs	r0, #53	@ 0x35
 800050a:	f7ff ff4d 	bl	80003a8 <ITM_SendChar>
		init_stat = ESP_STAT_NOINIT;
 800050e:	2301      	movs	r3, #1
 8000510:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 8000512:	e012      	b.n	800053a <ESP_Init+0x146>
	}

	sendCommand("AT+CIPSERVER=1,80\r\n");
 8000514:	4812      	ldr	r0, [pc, #72]	@ (8000560 <ESP_Init+0x16c>)
 8000516:	f000 f825 	bl	8000564 <sendCommand>
	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 800051a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800051e:	480b      	ldr	r0, [pc, #44]	@ (800054c <ESP_Init+0x158>)
 8000520:	f000 f838 	bl	8000594 <waitForInput>
 8000524:	4603      	mov	r3, r0
 8000526:	f083 0301 	eor.w	r3, r3, #1
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d002      	beq.n	8000536 <ESP_Init+0x142>
	{
		init_stat = ESP_STAT_NOINIT;
 8000530:	2301      	movs	r3, #1
 8000532:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 8000534:	e001      	b.n	800053a <ESP_Init+0x146>
	}

	init_stat = ESP_STAT_OK;
 8000536:	2300      	movs	r3, #0
 8000538:	75fb      	strb	r3, [r7, #23]

END_INIT:
	return init_stat;
 800053a:	7dfb      	ldrb	r3, [r7, #23]
}
 800053c:	4618      	mov	r0, r3
 800053e:	371c      	adds	r7, #28
 8000540:	46bd      	mov	sp, r7
 8000542:	bd90      	pop	{r4, r7, pc}
 8000544:	20000080 	.word	0x20000080
 8000548:	0800315c 	.word	0x0800315c
 800054c:	08003168 	.word	0x08003168
 8000550:	08003170 	.word	0x08003170
 8000554:	08003178 	.word	0x08003178
 8000558:	0800318c 	.word	0x0800318c
 800055c:	080031a8 	.word	0x080031a8
 8000560:	080031b8 	.word	0x080031b8

08000564 <sendCommand>:

void sendCommand(const char* msg)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <sendCommand+0x2c>)
 800056e:	681c      	ldr	r4, [r3, #0]
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f7ff fdf5 	bl	8000160 <strlen>
 8000576:	4603      	mov	r3, r0
 8000578:	b29a      	uxth	r2, r3
 800057a:	f04f 33ff 	mov.w	r3, #4294967295
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	4620      	mov	r0, r4
 8000582:	f001 fc7f 	bl	8001e84 <HAL_UART_Transmit>
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	bf00      	nop
 8000590:	20000080 	.word	0x20000080

08000594 <waitForInput>:

bool waitForInput(const char* input, uint32_t timeout)
{
 8000594:	b590      	push	{r4, r7, lr}
 8000596:	b087      	sub	sp, #28
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
	char 	input_ch = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]
	uint8_t i 		 = 0;
 80005a2:	2300      	movs	r3, #0
 80005a4:	75fb      	strb	r3, [r7, #23]
	bool 	ret 	 = false;
 80005a6:	2300      	movs	r3, #0
 80005a8:	75bb      	strb	r3, [r7, #22]

	uint32_t start_tick = HAL_GetTick();
 80005aa:	f000 fd1b 	bl	8000fe4 <HAL_GetTick>
 80005ae:	6138      	str	r0, [r7, #16]

	while ((HAL_GetTick() - start_tick) < timeout)
 80005b0:	e022      	b.n	80005f8 <waitForInput+0x64>
	{
		if (RingBuffer_Read(&ring_buf, (uint8_t*)&input_ch, 1))
 80005b2:	f107 030f 	add.w	r3, r7, #15
 80005b6:	2201      	movs	r2, #1
 80005b8:	4619      	mov	r1, r3
 80005ba:	4816      	ldr	r0, [pc, #88]	@ (8000614 <waitForInput+0x80>)
 80005bc:	f000 fb1f 	bl	8000bfe <RingBuffer_Read>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d018      	beq.n	80005f8 <waitForInput+0x64>
		{
			if (input[i++] != input_ch)
 80005c6:	7dfb      	ldrb	r3, [r7, #23]
 80005c8:	1c5a      	adds	r2, r3, #1
 80005ca:	75fa      	strb	r2, [r7, #23]
 80005cc:	461a      	mov	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	781a      	ldrb	r2, [r3, #0]
 80005d4:	7bfb      	ldrb	r3, [r7, #15]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d001      	beq.n	80005de <waitForInput+0x4a>
			{
				i = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	75fb      	strb	r3, [r7, #23]
			}

			if (i == strlen(input))
 80005de:	7dfc      	ldrb	r4, [r7, #23]
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff fdbd 	bl	8000160 <strlen>
 80005e6:	4603      	mov	r3, r0
 80005e8:	429c      	cmp	r4, r3
 80005ea:	d102      	bne.n	80005f2 <waitForInput+0x5e>
			{
				ret = true;
 80005ec:	2301      	movs	r3, #1
 80005ee:	75bb      	strb	r3, [r7, #22]
				break;
 80005f0:	e00a      	b.n	8000608 <waitForInput+0x74>
			}

			start_tick = HAL_GetTick();
 80005f2:	f000 fcf7 	bl	8000fe4 <HAL_GetTick>
 80005f6:	6138      	str	r0, [r7, #16]
	while ((HAL_GetTick() - start_tick) < timeout)
 80005f8:	f000 fcf4 	bl	8000fe4 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	683a      	ldr	r2, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8d4      	bhi.n	80005b2 <waitForInput+0x1e>
		}
	}

	return ret;
 8000608:	7dbb      	ldrb	r3, [r7, #22]
}
 800060a:	4618      	mov	r0, r3
 800060c:	371c      	adds	r7, #28
 800060e:	46bd      	mov	sp, r7
 8000610:	bd90      	pop	{r4, r7, pc}
 8000612:	bf00      	nop
 8000614:	20000084 	.word	0x20000084

08000618 <serverSend>:

uint8_t serverSend(char *html, uint32_t size, uint8_t link_id)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	@ 0x30
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	4613      	mov	r3, r2
 8000624:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	char 	cmd[25];

	sprintf(cmd, "AT+CIPSEND=%d,%d\r\n", link_id, size);
 8000626:	79fa      	ldrb	r2, [r7, #7]
 8000628:	f107 0014 	add.w	r0, r7, #20
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4926      	ldr	r1, [pc, #152]	@ (80006c8 <serverSend+0xb0>)
 8000630:	f001 ff3a 	bl	80024a8 <siprintf>
	sendCommand(cmd);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff93 	bl	8000564 <sendCommand>

	if (!waitForInput(">", ESP_RESPONSE_TIMEOUT))
 800063e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000642:	4822      	ldr	r0, [pc, #136]	@ (80006cc <serverSend+0xb4>)
 8000644:	f7ff ffa6 	bl	8000594 <waitForInput>
 8000648:	4603      	mov	r3, r0
 800064a:	f083 0301 	eor.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b00      	cmp	r3, #0
 8000652:	d006      	beq.n	8000662 <serverSend+0x4a>
	{
		ITM_SendChar('>');
 8000654:	203e      	movs	r0, #62	@ 0x3e
 8000656:	f7ff fea7 	bl	80003a8 <ITM_SendChar>
		ret = COMMAND_ERR;
 800065a:	2301      	movs	r3, #1
 800065c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		goto END;
 8000660:	e02c      	b.n	80006bc <serverSend+0xa4>
	}

	sendCommand(html);
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f7ff ff7e 	bl	8000564 <sendCommand>

	if (!waitForInput("SEND OK", ESP_RESPONSE_TIMEOUT))
 8000668:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800066c:	4818      	ldr	r0, [pc, #96]	@ (80006d0 <serverSend+0xb8>)
 800066e:	f7ff ff91 	bl	8000594 <waitForInput>
 8000672:	4603      	mov	r3, r0
 8000674:	f083 0301 	eor.w	r3, r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <serverSend+0x74>
	{
		ITM_SendChar('S');
 800067e:	2053      	movs	r0, #83	@ 0x53
 8000680:	f7ff fe92 	bl	80003a8 <ITM_SendChar>
		ret = COMMAND_ERR;
 8000684:	2301      	movs	r3, #1
 8000686:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		goto END;
 800068a:	e017      	b.n	80006bc <serverSend+0xa4>
	}

	sendCommand("AT+CIPCLOSE=5\r\n");
 800068c:	4811      	ldr	r0, [pc, #68]	@ (80006d4 <serverSend+0xbc>)
 800068e:	f7ff ff69 	bl	8000564 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000692:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000696:	4810      	ldr	r0, [pc, #64]	@ (80006d8 <serverSend+0xc0>)
 8000698:	f7ff ff7c 	bl	8000594 <waitForInput>
 800069c:	4603      	mov	r3, r0
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d006      	beq.n	80006b6 <serverSend+0x9e>
	{
		ITM_SendChar('O');
 80006a8:	204f      	movs	r0, #79	@ 0x4f
 80006aa:	f7ff fe7d 	bl	80003a8 <ITM_SendChar>
		ret = COMMAND_ERR;
 80006ae:	2301      	movs	r3, #1
 80006b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		goto END;
 80006b4:	e002      	b.n	80006bc <serverSend+0xa4>
	}

	ret = COMMAND_OK;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
END:
	return ret;
 80006bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	3730      	adds	r7, #48	@ 0x30
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	080031cc 	.word	0x080031cc
 80006cc:	080031e0 	.word	0x080031e0
 80006d0:	080031e4 	.word	0x080031e4
 80006d4:	080031ec 	.word	0x080031ec
 80006d8:	08003168 	.word	0x08003168

080006dc <ESP_CheckPendingData>:

bool ESP_CheckPendingData(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	return RingBuffer_GetDataLength(&ring_buf) > 0;
 80006e0:	4805      	ldr	r0, [pc, #20]	@ (80006f8 <ESP_CheckPendingData+0x1c>)
 80006e2:	f000 fa6c 	bl	8000bbe <RingBuffer_GetDataLength>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	bf14      	ite	ne
 80006ec:	2301      	movne	r3, #1
 80006ee:	2300      	moveq	r3, #0
 80006f0:	b2db      	uxtb	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000084 	.word	0x20000084

080006fc <ESP_ProcessInput>:

void ESP_ProcessInput(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	if (waitForInput("+IPD,", ESP_IPD_TIMEOUT))
 8000700:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000704:	4804      	ldr	r0, [pc, #16]	@ (8000718 <ESP_ProcessInput+0x1c>)
 8000706:	f7ff ff45 	bl	8000594 <waitForInput>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <ESP_ProcessInput+0x18>
	{
		processIPD();
 8000710:	f000 f804 	bl	800071c <processIPD>
	}
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	080031fc 	.word	0x080031fc

0800071c <processIPD>:

void processIPD(void)
{
 800071c:	b590      	push	{r4, r7, lr}
 800071e:	b087      	sub	sp, #28
 8000720:	af00      	add	r7, sp, #0
	char input_buf[11];

	receiveDataUntil(input_buf, sizeof(input_buf), ',', ESP_IPD_TIMEOUT); //Fetching link ID
 8000722:	1d38      	adds	r0, r7, #4
 8000724:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000728:	222c      	movs	r2, #44	@ 0x2c
 800072a:	210b      	movs	r1, #11
 800072c:	f000 f8aa 	bl	8000884 <receiveDataUntil>

	uint8_t link_id = atoi(input_buf);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fd7a 	bl	800222c <atoi>
 8000738:	4603      	mov	r3, r0
 800073a:	75fb      	strb	r3, [r7, #23]

	receiveDataUntil(input_buf, sizeof(input_buf), ':', ESP_IPD_TIMEOUT); //Fetching data length
 800073c:	1d38      	adds	r0, r7, #4
 800073e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000742:	223a      	movs	r2, #58	@ 0x3a
 8000744:	210b      	movs	r1, #11
 8000746:	f000 f89d 	bl	8000884 <receiveDataUntil>

	uint32_t data_len = atoi(input_buf);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4618      	mov	r0, r3
 800074e:	f001 fd6d 	bl	800222c <atoi>
 8000752:	4603      	mov	r3, r0
 8000754:	613b      	str	r3, [r7, #16]

	//Skipping Request method
	receiveDataUntil(input_buf, sizeof(input_buf), ' ', ESP_IPD_TIMEOUT);
 8000756:	1d38      	adds	r0, r7, #4
 8000758:	f242 7310 	movw	r3, #10000	@ 0x2710
 800075c:	2220      	movs	r2, #32
 800075e:	210b      	movs	r1, #11
 8000760:	f000 f890 	bl	8000884 <receiveDataUntil>

	//Getting prefix URL
	receiveDataUntil(input_buf, sizeof(input_buf), ' ', ESP_IPD_TIMEOUT);
 8000764:	1d38      	adds	r0, r7, #4
 8000766:	f242 7310 	movw	r3, #10000	@ 0x2710
 800076a:	2220      	movs	r2, #32
 800076c:	210b      	movs	r1, #11
 800076e:	f000 f889 	bl	8000884 <receiveDataUntil>

	//Free the ring buffer
	RingBuffer_Init(&ring_buf);
 8000772:	4811      	ldr	r0, [pc, #68]	@ (80007b8 <processIPD+0x9c>)
 8000774:	f000 fa13 	bl	8000b9e <RingBuffer_Init>

	if (!strcmp(input_buf, "/check_dht"))
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4910      	ldr	r1, [pc, #64]	@ (80007bc <processIPD+0xa0>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fce5 	bl	800014c <strcmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d106      	bne.n	8000796 <processIPD+0x7a>
	{
		serviceDHT(input_buf, link_id);
 8000788:	7dfa      	ldrb	r2, [r7, #23]
 800078a:	1d3b      	adds	r3, r7, #4
 800078c:	4611      	mov	r1, r2
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f818 	bl	80007c4 <serviceDHT>
	}
	else
	{
		serverSend(unknown_html, strlen(unknown_html), link_id);
	}
}
 8000794:	e00c      	b.n	80007b0 <processIPD+0x94>
		serverSend(unknown_html, strlen(unknown_html), link_id);
 8000796:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <processIPD+0xa4>)
 8000798:	681c      	ldr	r4, [r3, #0]
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <processIPD+0xa4>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fcde 	bl	8000160 <strlen>
 80007a4:	4601      	mov	r1, r0
 80007a6:	7dfb      	ldrb	r3, [r7, #23]
 80007a8:	461a      	mov	r2, r3
 80007aa:	4620      	mov	r0, r4
 80007ac:	f7ff ff34 	bl	8000618 <serverSend>
}
 80007b0:	bf00      	nop
 80007b2:	371c      	adds	r7, #28
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd90      	pop	{r4, r7, pc}
 80007b8:	20000084 	.word	0x20000084
 80007bc:	08003204 	.word	0x08003204
 80007c0:	20000004 	.word	0x20000004

080007c4 <serviceDHT>:

void serviceDHT(char* prefix_url, uint8_t link_id)
{
 80007c4:	b590      	push	{r4, r7, lr}
 80007c6:	b08d      	sub	sp, #52	@ 0x34
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
	char*    html;
	uint32_t html_size;
	uint8_t  dht_data[5];
	char     temp_int[4], temp_dec[4], rh_int[4], rh_dec[4];

	DHT11_Data(dht_data);
 80007d0:	f107 0318 	add.w	r3, r7, #24
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff fccb 	bl	8000170 <DHT11_Data>

	html_size = (strlen(check_dht_template) - 8) + sprintf(temp_int, "%d" ,dht_data[2]) + sprintf(temp_dec, "%d", dht_data[3])
 80007da:	4b28      	ldr	r3, [pc, #160]	@ (800087c <serviceDHT+0xb8>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff fcbe 	bl	8000160 <strlen>
 80007e4:	4604      	mov	r4, r0
 80007e6:	7ebb      	ldrb	r3, [r7, #26]
 80007e8:	461a      	mov	r2, r3
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4924      	ldr	r1, [pc, #144]	@ (8000880 <serviceDHT+0xbc>)
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 fe59 	bl	80024a8 <siprintf>
 80007f6:	4603      	mov	r3, r0
 80007f8:	441c      	add	r4, r3
 80007fa:	7efb      	ldrb	r3, [r7, #27]
 80007fc:	461a      	mov	r2, r3
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	491f      	ldr	r1, [pc, #124]	@ (8000880 <serviceDHT+0xbc>)
 8000804:	4618      	mov	r0, r3
 8000806:	f001 fe4f 	bl	80024a8 <siprintf>
 800080a:	4603      	mov	r3, r0
 800080c:	441c      	add	r4, r3
				+ sprintf(rh_int, "%d" ,dht_data[0]) + sprintf(rh_dec, "%d", dht_data[1]) + 1;
 800080e:	7e3b      	ldrb	r3, [r7, #24]
 8000810:	461a      	mov	r2, r3
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	491a      	ldr	r1, [pc, #104]	@ (8000880 <serviceDHT+0xbc>)
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fe45 	bl	80024a8 <siprintf>
 800081e:	4603      	mov	r3, r0
 8000820:	441c      	add	r4, r3
 8000822:	7e7b      	ldrb	r3, [r7, #25]
 8000824:	461a      	mov	r2, r3
 8000826:	f107 0308 	add.w	r3, r7, #8
 800082a:	4915      	ldr	r1, [pc, #84]	@ (8000880 <serviceDHT+0xbc>)
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fe3b 	bl	80024a8 <siprintf>
 8000832:	4603      	mov	r3, r0
 8000834:	4423      	add	r3, r4
	html_size = (strlen(check_dht_template) - 8) + sprintf(temp_int, "%d" ,dht_data[2]) + sprintf(temp_dec, "%d", dht_data[3])
 8000836:	3b07      	subs	r3, #7
 8000838:	627b      	str	r3, [r7, #36]	@ 0x24

	html	  = (char*)malloc(html_size);
 800083a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800083c:	f001 fcfa 	bl	8002234 <malloc>
 8000840:	4603      	mov	r3, r0
 8000842:	623b      	str	r3, [r7, #32]

	sprintf(html, check_dht_template, temp_int, temp_dec, rh_int, rh_dec);
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <serviceDHT+0xb8>)
 8000846:	6819      	ldr	r1, [r3, #0]
 8000848:	f107 0010 	add.w	r0, r7, #16
 800084c:	f107 0214 	add.w	r2, r7, #20
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	9301      	str	r3, [sp, #4]
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	4603      	mov	r3, r0
 800085e:	6a38      	ldr	r0, [r7, #32]
 8000860:	f001 fe22 	bl	80024a8 <siprintf>

	serverSend(html, html_size - 1, link_id);
 8000864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000866:	3b01      	subs	r3, #1
 8000868:	78fa      	ldrb	r2, [r7, #3]
 800086a:	4619      	mov	r1, r3
 800086c:	6a38      	ldr	r0, [r7, #32]
 800086e:	f7ff fed3 	bl	8000618 <serverSend>
}
 8000872:	bf00      	nop
 8000874:	372c      	adds	r7, #44	@ 0x2c
 8000876:	46bd      	mov	sp, r7
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	bf00      	nop
 800087c:	20000000 	.word	0x20000000
 8000880:	08003210 	.word	0x08003210

08000884 <receiveDataUntil>:

uint32_t receiveDataUntil(char* input_buf, uint32_t buf_size, char end_ch, uint32_t timeout)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	4613      	mov	r3, r2
 8000892:	71fb      	strb	r3, [r7, #7]
	char      input_ch;
	uint32_t  i = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]

	uint32_t start_tick = HAL_GetTick();
 8000898:	f000 fba4 	bl	8000fe4 <HAL_GetTick>
 800089c:	61b8      	str	r0, [r7, #24]

	while ((HAL_GetTick() - start_tick) < timeout
 800089e:	e01e      	b.n	80008de <receiveDataUntil+0x5a>
		 && i < buf_size)
	{
		if (RingBuffer_Read(&ring_buf, (uint8_t*)&input_ch, 1))
 80008a0:	f107 0317 	add.w	r3, r7, #23
 80008a4:	2201      	movs	r2, #1
 80008a6:	4619      	mov	r1, r3
 80008a8:	4815      	ldr	r0, [pc, #84]	@ (8000900 <receiveDataUntil+0x7c>)
 80008aa:	f000 f9a8 	bl	8000bfe <RingBuffer_Read>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d014      	beq.n	80008de <receiveDataUntil+0x5a>
		{
			if (input_ch != end_ch)
 80008b4:	7dfb      	ldrb	r3, [r7, #23]
 80008b6:	79fa      	ldrb	r2, [r7, #7]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d007      	beq.n	80008cc <receiveDataUntil+0x48>
			{
				input_buf[i++] = input_ch;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	61fa      	str	r2, [r7, #28]
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	4413      	add	r3, r2
 80008c6:	7dfa      	ldrb	r2, [r7, #23]
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	e005      	b.n	80008d8 <receiveDataUntil+0x54>
			}
			else
			{
				input_buf[i] = '\0';
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	4413      	add	r3, r2
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
				break;
 80008d6:	e00e      	b.n	80008f6 <receiveDataUntil+0x72>
			}

			start_tick = HAL_GetTick();
 80008d8:	f000 fb84 	bl	8000fe4 <HAL_GetTick>
 80008dc:	61b8      	str	r0, [r7, #24]
	while ((HAL_GetTick() - start_tick) < timeout
 80008de:	f000 fb81 	bl	8000fe4 <HAL_GetTick>
 80008e2:	4602      	mov	r2, r0
 80008e4:	69bb      	ldr	r3, [r7, #24]
 80008e6:	1ad3      	subs	r3, r2, r3
		 && i < buf_size)
 80008e8:	683a      	ldr	r2, [r7, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d903      	bls.n	80008f6 <receiveDataUntil+0x72>
 80008ee:	69fa      	ldr	r2, [r7, #28]
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3d4      	bcc.n	80008a0 <receiveDataUntil+0x1c>
		}
	}

	return i;
 80008f6:	69fb      	ldr	r3, [r7, #28]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	20000084 	.word	0x20000084

08000904 <ESP_UART_IRQHandler>:


void ESP_UART_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
	uint32_t usart_sr_reg = huart->Instance->SR;
 800090a:	4b0d      	ldr	r3, [pc, #52]	@ (8000940 <ESP_UART_IRQHandler+0x3c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	607b      	str	r3, [r7, #4]
	uint8_t  data;

	if ((usart_sr_reg & USART_SR_RXNE) != RESET)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00b      	beq.n	8000936 <ESP_UART_IRQHandler+0x32>
	{
		data = (uint8_t)(huart->Instance->DR);
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <ESP_UART_IRQHandler+0x3c>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	70fb      	strb	r3, [r7, #3]

		RingBuffer_Write(&ring_buf, &data, 1);
 800092a:	1cfb      	adds	r3, r7, #3
 800092c:	2201      	movs	r2, #1
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <ESP_UART_IRQHandler+0x40>)
 8000932:	f000 f998 	bl	8000c66 <RingBuffer_Write>
	}
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000080 	.word	0x20000080
 8000944:	20000084 	.word	0x20000084

08000948 <ITM_SendChar>:
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000950:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000954:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d013      	beq.n	8000988 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000960:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000964:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000968:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800096c:	2b00      	cmp	r3, #0
 800096e:	d00b      	beq.n	8000988 <ITM_SendChar+0x40>
    while (ITM->PORT[0U].u32 == 0UL)
 8000970:	e000      	b.n	8000974 <ITM_SendChar+0x2c>
      __NOP();
 8000972:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000974:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f9      	beq.n	8000972 <ITM_SendChar+0x2a>
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800097e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	b2d2      	uxtb	r2, r2
 8000986:	701a      	strb	r2, [r3, #0]
  return (ch);
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800099a:	f000 facb 	bl	8000f34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800099e:	f000 f823 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009a2:	f000 f88b 	bl	8000abc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009a6:	f000 f85f 	bl	8000a68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t esp_stat = ESP_Init(&huart1, "POCO M4 Pro 5G","12332180");
 80009aa:	4a0c      	ldr	r2, [pc, #48]	@ (80009dc <main+0x48>)
 80009ac:	490c      	ldr	r1, [pc, #48]	@ (80009e0 <main+0x4c>)
 80009ae:	480d      	ldr	r0, [pc, #52]	@ (80009e4 <main+0x50>)
 80009b0:	f7ff fd20 	bl	80003f4 <ESP_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (esp_stat == ESP_STAT_OK)
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d109      	bne.n	80009d2 <main+0x3e>
  {
	  while (1)
	  {
		  if (ESP_CheckPendingData())
 80009be:	f7ff fe8d 	bl	80006dc <ESP_CheckPendingData>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <main+0x38>
		  {
			  ESP_ProcessInput();
 80009c8:	f7ff fe98 	bl	80006fc <ESP_ProcessInput>
		  }

		  anotherTask();
 80009cc:	f000 f8d6 	bl	8000b7c <anotherTask>
		  if (ESP_CheckPendingData())
 80009d0:	e7f5      	b.n	80009be <main+0x2a>
 80009d2:	2300      	movs	r3, #0
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	08003214 	.word	0x08003214
 80009e0:	08003220 	.word	0x08003220
 80009e4:	20000288 	.word	0x20000288

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b090      	sub	sp, #64	@ 0x40
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	2228      	movs	r2, #40	@ 0x28
 80009f4:	2100      	movs	r1, #0
 80009f6:	4618      	mov	r0, r3
 80009f8:	f001 fd76 	bl	80024e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a12:	2310      	movs	r3, #16
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a16:	2302      	movs	r3, #2
 8000a18:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8000a1e:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a24:	f107 0318 	add.w	r3, r7, #24
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f000 fdcb 	bl	80015c4 <HAL_RCC_OscConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a34:	f000 f8ad 	bl	8000b92 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a38:	230f      	movs	r3, #15
 8000a3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f001 f839 	bl	8001ac8 <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a5c:	f000 f899 	bl	8000b92 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3740      	adds	r7, #64	@ 0x40
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	@ (8000ab8 <MX_USART1_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_USART1_UART_Init+0x4c>)
 8000aa0:	f001 f9a0 	bl	8001de4 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f872 	bl	8000b92 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000288 	.word	0x20000288
 8000ab8:	40013800 	.word	0x40013800

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b088      	sub	sp, #32
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0310 	add.w	r3, r7, #16
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad0:	4b27      	ldr	r3, [pc, #156]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a26      	ldr	r2, [pc, #152]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b24      	ldr	r3, [pc, #144]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	4a20      	ldr	r2, [pc, #128]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6193      	str	r3, [r2, #24]
 8000af4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b00:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	4a1a      	ldr	r2, [pc, #104]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000b06:	f043 0308 	orr.w	r3, r3, #8
 8000b0a:	6193      	str	r3, [r2, #24]
 8000b0c:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <MX_GPIO_Init+0xb4>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	f003 0308 	and.w	r3, r3, #8
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b1e:	4815      	ldr	r0, [pc, #84]	@ (8000b74 <MX_GPIO_Init+0xb8>)
 8000b20:	f000 fd37 	bl	8001592 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2102      	movs	r1, #2
 8000b28:	4813      	ldr	r0, [pc, #76]	@ (8000b78 <MX_GPIO_Init+0xbc>)
 8000b2a:	f000 fd32 	bl	8001592 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4619      	mov	r1, r3
 8000b46:	480b      	ldr	r0, [pc, #44]	@ (8000b74 <MX_GPIO_Init+0xb8>)
 8000b48:	f000 fb88 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	4619      	mov	r1, r3
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_GPIO_Init+0xbc>)
 8000b64:	f000 fb7a 	bl	800125c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40011000 	.word	0x40011000
 8000b78:	40010800 	.word	0x40010800

08000b7c <anotherTask>:

/* USER CODE BEGIN 4 */

void anotherTask()
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	ITM_SendChar('C');
 8000b80:	2043      	movs	r0, #67	@ 0x43
 8000b82:	f7ff fee1 	bl	8000948 <ITM_SendChar>
	HAL_Delay(500);
 8000b86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b8a:	f000 fa35 	bl	8000ff8 <HAL_Delay>
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b96:	b672      	cpsid	i
}
 8000b98:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9a:	bf00      	nop
 8000b9c:	e7fd      	b.n	8000b9a <Error_Handler+0x8>

08000b9e <RingBuffer_Init>:
 */

#include "ringbuffer.h"

void RingBuffer_Init(RingBuffer* buf)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	buf->head = buf->tail = 0;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2200      	movs	r2, #0
 8000baa:	805a      	strh	r2, [r3, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	885a      	ldrh	r2, [r3, #2]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	801a      	strh	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr

08000bbe <RingBuffer_GetDataLength>:

uint16_t RingBuffer_GetDataLength(const RingBuffer* buf)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b085      	sub	sp, #20
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	uint16_t length;

	if (buf->head >= buf->tail)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	881a      	ldrh	r2, [r3, #0]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	885b      	ldrh	r3, [r3, #2]
 8000bce:	429a      	cmp	r2, r3
 8000bd0:	d306      	bcc.n	8000be0 <RingBuffer_GetDataLength+0x22>
	{
		length = buf->head - buf->tail;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	881a      	ldrh	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	885b      	ldrh	r3, [r3, #2]
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	81fb      	strh	r3, [r7, #14]
 8000bde:	e008      	b.n	8000bf2 <RingBuffer_GetDataLength+0x34>
	}
	else
	{
		length = RING_BUF_SIZE - 1 - (buf->tail - buf->head); // -1 by reason there's an additional element to check whether an array is empty
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	881a      	ldrh	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	885b      	ldrh	r3, [r3, #2]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8000bf0:	81fb      	strh	r3, [r7, #14]
	}

	return length;
 8000bf2:	89fb      	ldrh	r3, [r7, #14]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <RingBuffer_Read>:

uint16_t RingBuffer_Read(RingBuffer* buf, uint8_t* data, uint16_t size)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b087      	sub	sp, #28
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	60f8      	str	r0, [r7, #12]
 8000c06:	60b9      	str	r1, [r7, #8]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	80fb      	strh	r3, [r7, #6]
	uint16_t read_count = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	82fb      	strh	r3, [r7, #22]

	while ((read_count < size) && (buf->head != buf->tail)) //buf->head == buf->tail in case of the ring buffer is empty
 8000c10:	e019      	b.n	8000c46 <RingBuffer_Read+0x48>
	{
		data[read_count++] = buf->buffer[buf->tail];
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	885b      	ldrh	r3, [r3, #2]
 8000c16:	4619      	mov	r1, r3
 8000c18:	8afb      	ldrh	r3, [r7, #22]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	82fa      	strh	r2, [r7, #22]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	4413      	add	r3, r2
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	440a      	add	r2, r1
 8000c28:	7912      	ldrb	r2, [r2, #4]
 8000c2a:	701a      	strb	r2, [r3, #0]
		buf->tail 		   = (buf->tail + 1) % RING_BUF_SIZE;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	885b      	ldrh	r3, [r3, #2]
 8000c30:	3301      	adds	r3, #1
 8000c32:	425a      	negs	r2, r3
 8000c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c3c:	bf58      	it	pl
 8000c3e:	4253      	negpl	r3, r2
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	805a      	strh	r2, [r3, #2]
	while ((read_count < size) && (buf->head != buf->tail)) //buf->head == buf->tail in case of the ring buffer is empty
 8000c46:	8afa      	ldrh	r2, [r7, #22]
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d205      	bcs.n	8000c5a <RingBuffer_Read+0x5c>
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	881a      	ldrh	r2, [r3, #0]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	885b      	ldrh	r3, [r3, #2]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d1db      	bne.n	8000c12 <RingBuffer_Read+0x14>
	}

	return read_count;
 8000c5a:	8afb      	ldrh	r3, [r7, #22]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <RingBuffer_Write>:

uint8_t RingBuffer_Write(RingBuffer* buf, const uint8_t* data, uint16_t size)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	60f8      	str	r0, [r7, #12]
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	4613      	mov	r3, r2
 8000c72:	80fb      	strh	r3, [r7, #6]
	uint16_t write_count = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	82fb      	strh	r3, [r7, #22]
	uint8_t  ret;

	if (((buf->head + 1) % RING_BUF_SIZE) == buf->tail)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	425a      	negs	r2, r3
 8000c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c88:	bf58      	it	pl
 8000c8a:	4253      	negpl	r3, r2
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	8852      	ldrh	r2, [r2, #2]
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d102      	bne.n	8000c9a <RingBuffer_Write+0x34>
	{
		ret = RING_BUF_FULL;
 8000c94:	2301      	movs	r3, #1
 8000c96:	757b      	strb	r3, [r7, #21]
 8000c98:	e02c      	b.n	8000cf4 <RingBuffer_Write+0x8e>
	}
	else if ((RING_BUF_SIZE - 1 - RingBuffer_GetDataLength(buf)) < size) // -1 by reason there's an additional element to check whether an array is empty
 8000c9a:	68f8      	ldr	r0, [r7, #12]
 8000c9c:	f7ff ff8f 	bl	8000bbe <RingBuffer_GetDataLength>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f5c3 73ff 	rsb	r3, r3, #510	@ 0x1fe
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	88fa      	ldrh	r2, [r7, #6]
 8000caa:	4293      	cmp	r3, r2
 8000cac:	da1c      	bge.n	8000ce8 <RingBuffer_Write+0x82>
	{
		ret = RING_BUF_NO_SPACE;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	757b      	strb	r3, [r7, #21]
 8000cb2:	e01f      	b.n	8000cf4 <RingBuffer_Write+0x8e>
	}
	else
	{
		while (write_count < size)
		{
			buf->buffer[buf->head] = data[write_count++];
 8000cb4:	8afb      	ldrh	r3, [r7, #22]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	82fa      	strh	r2, [r7, #22]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	68fa      	ldr	r2, [r7, #12]
 8000cc2:	8812      	ldrh	r2, [r2, #0]
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	781a      	ldrb	r2, [r3, #0]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	440b      	add	r3, r1
 8000ccc:	711a      	strb	r2, [r3, #4]
			buf->head 	   		   = (buf->head + 1) % RING_BUF_SIZE;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	425a      	negs	r2, r3
 8000cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000cde:	bf58      	it	pl
 8000ce0:	4253      	negpl	r3, r2
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	801a      	strh	r2, [r3, #0]
		while (write_count < size)
 8000ce8:	8afa      	ldrh	r2, [r7, #22]
 8000cea:	88fb      	ldrh	r3, [r7, #6]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d3e1      	bcc.n	8000cb4 <RingBuffer_Write+0x4e>
		}

		ret = RING_BUF_OK;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	757b      	strb	r3, [r7, #21]
	}

	return ret;
 8000cf4:	7d7b      	ldrb	r3, [r7, #21]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <HAL_MspInit+0x5c>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a14      	ldr	r2, [pc, #80]	@ (8000d5c <HAL_MspInit+0x5c>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <HAL_MspInit+0x5c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_MspInit+0x5c>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a0e      	ldr	r2, [pc, #56]	@ (8000d5c <HAL_MspInit+0x5c>)
 8000d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <HAL_MspInit+0x5c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d36:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <HAL_MspInit+0x60>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_MspInit+0x60>)
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a20      	ldr	r2, [pc, #128]	@ (8000e00 <HAL_UART_MspInit+0x9c>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d139      	bne.n	8000df8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d84:	4b1f      	ldr	r3, [pc, #124]	@ (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d86:	699b      	ldr	r3, [r3, #24]
 8000d88:	4a1e      	ldr	r2, [pc, #120]	@ (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d8e:	6193      	str	r3, [r2, #24]
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_UART_MspInit+0xa0>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	4a18      	ldr	r2, [pc, #96]	@ (8000e04 <HAL_UART_MspInit+0xa0>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6193      	str	r3, [r2, #24]
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <HAL_UART_MspInit+0xa0>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	60bb      	str	r3, [r7, #8]
 8000db2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0310 	add.w	r3, r7, #16
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	480f      	ldr	r0, [pc, #60]	@ (8000e08 <HAL_UART_MspInit+0xa4>)
 8000dca:	f000 fa47 	bl	800125c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <HAL_UART_MspInit+0xa4>)
 8000de4:	f000 fa3a 	bl	800125c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2025      	movs	r0, #37	@ 0x25
 8000dee:	f000 f9fe 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000df2:	2025      	movs	r0, #37	@ 0x25
 8000df4:	f000 fa17 	bl	8001226 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr

08000e58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5c:	f000 f8b0 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	ESP_UART_IRQHandler();
 8000e68:	f7ff fd4c 	bl	8000904 <ESP_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	@ (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	@ (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f001 fb3a 	bl	8002518 <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	@ (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20005000 	.word	0x20005000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	200002d0 	.word	0x200002d0
 8000ed8:	20000420 	.word	0x20000420

08000edc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bc80      	pop	{r7}
 8000ee6:	4770      	bx	lr

08000ee8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee8:	f7ff fff8 	bl	8000edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480b      	ldr	r0, [pc, #44]	@ (8000f1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000eee:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8000f24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f04:	4c09      	ldr	r4, [pc, #36]	@ (8000f2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f001 fb07 	bl	8002524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f16:	f7ff fd3d 	bl	8000994 <main>
  bx lr
 8000f1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f20:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000f24:	080033a0 	.word	0x080033a0
  ldr r2, =_sbss
 8000f28:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000f2c:	20000420 	.word	0x20000420

08000f30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f30:	e7fe      	b.n	8000f30 <ADC1_2_IRQHandler>
	...

08000f34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x28>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x28>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f947 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fed6 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	@ (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f95f 	bl	8001242 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f927 	bl	80011ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000008 	.word	0x20000008
 8000fb8:	20000010 	.word	0x20000010
 8000fbc:	2000000c 	.word	0x2000000c

08000fc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b05      	ldr	r3, [pc, #20]	@ (8000fdc <HAL_IncTick+0x1c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a03      	ldr	r2, [pc, #12]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	20000010 	.word	0x20000010
 8000fe0:	200002d4 	.word	0x200002d4

08000fe4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b02      	ldr	r3, [pc, #8]	@ (8000ff4 <HAL_GetTick+0x10>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	200002d4 	.word	0x200002d4

08000ff8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001000:	f7ff fff0 	bl	8000fe4 <HAL_GetTick>
 8001004:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001010:	d005      	beq.n	800101e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001012:	4b0a      	ldr	r3, [pc, #40]	@ (800103c <HAL_Delay+0x44>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4413      	add	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800101e:	bf00      	nop
 8001020:	f7ff ffe0 	bl	8000fe4 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	429a      	cmp	r2, r3
 800102e:	d8f7      	bhi.n	8001020 <HAL_Delay+0x28>
  {
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000010 	.word	0x20000010

08001040 <__NVIC_SetPriorityGrouping>:
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4b0c      	ldr	r3, [pc, #48]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800105c:	4013      	ands	r3, r2
 800105e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001068:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001072:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <__NVIC_SetPriorityGrouping+0x44>)
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	60d3      	str	r3, [r2, #12]
}
 8001078:	bf00      	nop
 800107a:	3714      	adds	r7, #20
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_GetPriorityGrouping>:
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_GetPriorityGrouping+0x18>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	0a1b      	lsrs	r3, r3, #8
 8001092:	f003 0307 	and.w	r3, r3, #7
}
 8001096:	4618      	mov	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <__NVIC_EnableIRQ>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	db0b      	blt.n	80010ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f003 021f 	and.w	r2, r3, #31
 80010bc:	4906      	ldr	r1, [pc, #24]	@ (80010d8 <__NVIC_EnableIRQ+0x34>)
 80010be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c2:	095b      	lsrs	r3, r3, #5
 80010c4:	2001      	movs	r0, #1
 80010c6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100

080010dc <__NVIC_SetPriority>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	@ (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	@ (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	@ 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	@ 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <SysTick_Config>:
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff90 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff2d 	bl	8001040 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff42 	bl	8001088 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff90 	bl	8001130 <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5f 	bl	80010dc <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff35 	bl	80010a4 <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b08b      	sub	sp, #44	@ 0x2c
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126e:	e169      	b.n	8001544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001270:	2201      	movs	r2, #1
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	69fa      	ldr	r2, [r7, #28]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	429a      	cmp	r2, r3
 800128a:	f040 8158 	bne.w	800153e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	4a9a      	ldr	r2, [pc, #616]	@ (80014fc <HAL_GPIO_Init+0x2a0>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d05e      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 8001298:	4a98      	ldr	r2, [pc, #608]	@ (80014fc <HAL_GPIO_Init+0x2a0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d875      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 800129e:	4a98      	ldr	r2, [pc, #608]	@ (8001500 <HAL_GPIO_Init+0x2a4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d058      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012a4:	4a96      	ldr	r2, [pc, #600]	@ (8001500 <HAL_GPIO_Init+0x2a4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d86f      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012aa:	4a96      	ldr	r2, [pc, #600]	@ (8001504 <HAL_GPIO_Init+0x2a8>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d052      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012b0:	4a94      	ldr	r2, [pc, #592]	@ (8001504 <HAL_GPIO_Init+0x2a8>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d869      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012b6:	4a94      	ldr	r2, [pc, #592]	@ (8001508 <HAL_GPIO_Init+0x2ac>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d04c      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012bc:	4a92      	ldr	r2, [pc, #584]	@ (8001508 <HAL_GPIO_Init+0x2ac>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d863      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012c2:	4a92      	ldr	r2, [pc, #584]	@ (800150c <HAL_GPIO_Init+0x2b0>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d046      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
 80012c8:	4a90      	ldr	r2, [pc, #576]	@ (800150c <HAL_GPIO_Init+0x2b0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d85d      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012ce:	2b12      	cmp	r3, #18
 80012d0:	d82a      	bhi.n	8001328 <HAL_GPIO_Init+0xcc>
 80012d2:	2b12      	cmp	r3, #18
 80012d4:	d859      	bhi.n	800138a <HAL_GPIO_Init+0x12e>
 80012d6:	a201      	add	r2, pc, #4	@ (adr r2, 80012dc <HAL_GPIO_Init+0x80>)
 80012d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012dc:	08001357 	.word	0x08001357
 80012e0:	08001331 	.word	0x08001331
 80012e4:	08001343 	.word	0x08001343
 80012e8:	08001385 	.word	0x08001385
 80012ec:	0800138b 	.word	0x0800138b
 80012f0:	0800138b 	.word	0x0800138b
 80012f4:	0800138b 	.word	0x0800138b
 80012f8:	0800138b 	.word	0x0800138b
 80012fc:	0800138b 	.word	0x0800138b
 8001300:	0800138b 	.word	0x0800138b
 8001304:	0800138b 	.word	0x0800138b
 8001308:	0800138b 	.word	0x0800138b
 800130c:	0800138b 	.word	0x0800138b
 8001310:	0800138b 	.word	0x0800138b
 8001314:	0800138b 	.word	0x0800138b
 8001318:	0800138b 	.word	0x0800138b
 800131c:	0800138b 	.word	0x0800138b
 8001320:	08001339 	.word	0x08001339
 8001324:	0800134d 	.word	0x0800134d
 8001328:	4a79      	ldr	r2, [pc, #484]	@ (8001510 <HAL_GPIO_Init+0x2b4>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d013      	beq.n	8001356 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800132e:	e02c      	b.n	800138a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	623b      	str	r3, [r7, #32]
          break;
 8001336:	e029      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	3304      	adds	r3, #4
 800133e:	623b      	str	r3, [r7, #32]
          break;
 8001340:	e024      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	3308      	adds	r3, #8
 8001348:	623b      	str	r3, [r7, #32]
          break;
 800134a:	e01f      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	330c      	adds	r3, #12
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e01a      	b.n	800138c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d102      	bne.n	8001364 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800135e:	2304      	movs	r3, #4
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e013      	b.n	800138c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800136c:	2308      	movs	r3, #8
 800136e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	611a      	str	r2, [r3, #16]
          break;
 8001376:	e009      	b.n	800138c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001378:	2308      	movs	r3, #8
 800137a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	615a      	str	r2, [r3, #20]
          break;
 8001382:	e003      	b.n	800138c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
          break;
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x130>
          break;
 800138a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	2bff      	cmp	r3, #255	@ 0xff
 8001390:	d801      	bhi.n	8001396 <HAL_GPIO_Init+0x13a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	e001      	b.n	800139a <HAL_GPIO_Init+0x13e>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3304      	adds	r3, #4
 800139a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2bff      	cmp	r3, #255	@ 0xff
 80013a0:	d802      	bhi.n	80013a8 <HAL_GPIO_Init+0x14c>
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	e002      	b.n	80013ae <HAL_GPIO_Init+0x152>
 80013a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013aa:	3b08      	subs	r3, #8
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	210f      	movs	r1, #15
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	fa01 f303 	lsl.w	r3, r1, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	401a      	ands	r2, r3
 80013c0:	6a39      	ldr	r1, [r7, #32]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	fa01 f303 	lsl.w	r3, r1, r3
 80013c8:	431a      	orrs	r2, r3
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80b1 	beq.w	800153e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001514 <HAL_GPIO_Init+0x2b8>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001514 <HAL_GPIO_Init+0x2b8>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b4a      	ldr	r3, [pc, #296]	@ (8001514 <HAL_GPIO_Init+0x2b8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013f4:	4a48      	ldr	r2, [pc, #288]	@ (8001518 <HAL_GPIO_Init+0x2bc>)
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	089b      	lsrs	r3, r3, #2
 80013fa:	3302      	adds	r3, #2
 80013fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001400:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a40      	ldr	r2, [pc, #256]	@ (800151c <HAL_GPIO_Init+0x2c0>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d013      	beq.n	8001448 <HAL_GPIO_Init+0x1ec>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a3f      	ldr	r2, [pc, #252]	@ (8001520 <HAL_GPIO_Init+0x2c4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d00d      	beq.n	8001444 <HAL_GPIO_Init+0x1e8>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a3e      	ldr	r2, [pc, #248]	@ (8001524 <HAL_GPIO_Init+0x2c8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d007      	beq.n	8001440 <HAL_GPIO_Init+0x1e4>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a3d      	ldr	r2, [pc, #244]	@ (8001528 <HAL_GPIO_Init+0x2cc>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d101      	bne.n	800143c <HAL_GPIO_Init+0x1e0>
 8001438:	2303      	movs	r3, #3
 800143a:	e006      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 800143c:	2304      	movs	r3, #4
 800143e:	e004      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 8001440:	2302      	movs	r3, #2
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_GPIO_Init+0x1ee>
 8001448:	2300      	movs	r3, #0
 800144a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800145a:	492f      	ldr	r1, [pc, #188]	@ (8001518 <HAL_GPIO_Init+0x2bc>)
 800145c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001474:	4b2d      	ldr	r3, [pc, #180]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	492c      	ldr	r1, [pc, #176]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	608b      	str	r3, [r1, #8]
 8001480:	e006      	b.n	8001490 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001482:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	43db      	mvns	r3, r3
 800148a:	4928      	ldr	r1, [pc, #160]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 800148c:	4013      	ands	r3, r2
 800148e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d006      	beq.n	80014aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	4922      	ldr	r1, [pc, #136]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	e006      	b.n	80014b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014aa:	4b20      	ldr	r3, [pc, #128]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	491e      	ldr	r1, [pc, #120]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d006      	beq.n	80014d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014c4:	4b19      	ldr	r3, [pc, #100]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4918      	ldr	r1, [pc, #96]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]
 80014d0:	e006      	b.n	80014e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014d2:	4b16      	ldr	r3, [pc, #88]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	43db      	mvns	r3, r3
 80014da:	4914      	ldr	r1, [pc, #80]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014dc:	4013      	ands	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d021      	beq.n	8001530 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014ec:	4b0f      	ldr	r3, [pc, #60]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	490e      	ldr	r1, [pc, #56]	@ (800152c <HAL_GPIO_Init+0x2d0>)
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e021      	b.n	800153e <HAL_GPIO_Init+0x2e2>
 80014fa:	bf00      	nop
 80014fc:	10320000 	.word	0x10320000
 8001500:	10310000 	.word	0x10310000
 8001504:	10220000 	.word	0x10220000
 8001508:	10210000 	.word	0x10210000
 800150c:	10120000 	.word	0x10120000
 8001510:	10110000 	.word	0x10110000
 8001514:	40021000 	.word	0x40021000
 8001518:	40010000 	.word	0x40010000
 800151c:	40010800 	.word	0x40010800
 8001520:	40010c00 	.word	0x40010c00
 8001524:	40011000 	.word	0x40011000
 8001528:	40011400 	.word	0x40011400
 800152c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001530:	4b0b      	ldr	r3, [pc, #44]	@ (8001560 <HAL_GPIO_Init+0x304>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	43db      	mvns	r3, r3
 8001538:	4909      	ldr	r1, [pc, #36]	@ (8001560 <HAL_GPIO_Init+0x304>)
 800153a:	4013      	ands	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	3301      	adds	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	fa22 f303 	lsr.w	r3, r2, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	f47f ae8e 	bne.w	8001270 <HAL_GPIO_Init+0x14>
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	372c      	adds	r7, #44	@ 0x2c
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	887b      	ldrh	r3, [r7, #2]
 8001576:	4013      	ands	r3, r2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800157c:	2301      	movs	r3, #1
 800157e:	73fb      	strb	r3, [r7, #15]
 8001580:	e001      	b.n	8001586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001586:	7bfb      	ldrb	r3, [r7, #15]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3714      	adds	r7, #20
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr

08001592 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]
 800159e:	4613      	mov	r3, r2
 80015a0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a2:	787b      	ldrb	r3, [r7, #1]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a8:	887a      	ldrh	r2, [r7, #2]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ae:	e003      	b.n	80015b8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015b0:	887b      	ldrh	r3, [r7, #2]
 80015b2:	041a      	lsls	r2, r3, #16
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	611a      	str	r2, [r3, #16]
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr
	...

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e272      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 8087 	beq.w	80016f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e4:	4b92      	ldr	r3, [pc, #584]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 030c 	and.w	r3, r3, #12
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d00c      	beq.n	800160a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d112      	bne.n	8001622 <HAL_RCC_OscConfig+0x5e>
 80015fc:	4b8c      	ldr	r3, [pc, #560]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001608:	d10b      	bne.n	8001622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160a:	4b89      	ldr	r3, [pc, #548]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d06c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x12c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d168      	bne.n	80016f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e24c      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800162a:	d106      	bne.n	800163a <HAL_RCC_OscConfig+0x76>
 800162c:	4b80      	ldr	r3, [pc, #512]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a7f      	ldr	r2, [pc, #508]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e02e      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10c      	bne.n	800165c <HAL_RCC_OscConfig+0x98>
 8001642:	4b7b      	ldr	r3, [pc, #492]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a7a      	ldr	r2, [pc, #488]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	4b78      	ldr	r3, [pc, #480]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a77      	ldr	r2, [pc, #476]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001658:	6013      	str	r3, [r2, #0]
 800165a:	e01d      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001664:	d10c      	bne.n	8001680 <HAL_RCC_OscConfig+0xbc>
 8001666:	4b72      	ldr	r3, [pc, #456]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a71      	ldr	r2, [pc, #452]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800166c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b6f      	ldr	r3, [pc, #444]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6e      	ldr	r2, [pc, #440]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	e00b      	b.n	8001698 <HAL_RCC_OscConfig+0xd4>
 8001680:	4b6b      	ldr	r3, [pc, #428]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a6a      	ldr	r2, [pc, #424]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	4b68      	ldr	r3, [pc, #416]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a67      	ldr	r2, [pc, #412]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d013      	beq.n	80016c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fca0 	bl	8000fe4 <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016a8:	f7ff fc9c 	bl	8000fe4 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b64      	cmp	r3, #100	@ 0x64
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e200      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0xe4>
 80016c6:	e014      	b.n	80016f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fc8c 	bl	8000fe4 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d0:	f7ff fc88 	bl	8000fe4 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b64      	cmp	r3, #100	@ 0x64
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e1ec      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e2:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x10c>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d063      	beq.n	80017c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f003 030c 	and.w	r3, r3, #12
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800170a:	4b49      	ldr	r3, [pc, #292]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b08      	cmp	r3, #8
 8001714:	d11c      	bne.n	8001750 <HAL_RCC_OscConfig+0x18c>
 8001716:	4b46      	ldr	r3, [pc, #280]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d116      	bne.n	8001750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001722:	4b43      	ldr	r3, [pc, #268]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e1c0      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173a:	4b3d      	ldr	r3, [pc, #244]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4939      	ldr	r1, [pc, #228]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800174e:	e03a      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	691b      	ldr	r3, [r3, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d020      	beq.n	800179a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001758:	4b36      	ldr	r3, [pc, #216]	@ (8001834 <HAL_RCC_OscConfig+0x270>)
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175e:	f7ff fc41 	bl	8000fe4 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff fc3d 	bl	8000fe4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e1a1      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001778:	4b2d      	ldr	r3, [pc, #180]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001784:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	695b      	ldr	r3, [r3, #20]
 8001790:	00db      	lsls	r3, r3, #3
 8001792:	4927      	ldr	r1, [pc, #156]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]
 8001798:	e015      	b.n	80017c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179a:	4b26      	ldr	r3, [pc, #152]	@ (8001834 <HAL_RCC_OscConfig+0x270>)
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a0:	f7ff fc20 	bl	8000fe4 <HAL_GetTick>
 80017a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e008      	b.n	80017ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a8:	f7ff fc1c 	bl	8000fe4 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e180      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f0      	bne.n	80017a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0308 	and.w	r3, r3, #8
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d03a      	beq.n	8001848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d019      	beq.n	800180e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017da:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <HAL_RCC_OscConfig+0x274>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fc00 	bl	8000fe4 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fbfc 	bl	8000fe4 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e160      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <HAL_RCC_OscConfig+0x26c>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001806:	2001      	movs	r0, #1
 8001808:	f000 face 	bl	8001da8 <RCC_Delay>
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180e:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <HAL_RCC_OscConfig+0x274>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff fbe6 	bl	8000fe4 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181a:	e00f      	b.n	800183c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181c:	f7ff fbe2 	bl	8000fe4 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d908      	bls.n	800183c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e146      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	42420000 	.word	0x42420000
 8001838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800183c:	4b92      	ldr	r3, [pc, #584]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1e9      	bne.n	800181c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 80a6 	beq.w	80019a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10d      	bne.n	8001882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4b88      	ldr	r3, [pc, #544]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a87      	ldr	r2, [pc, #540]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001870:	61d3      	str	r3, [r2, #28]
 8001872:	4b85      	ldr	r3, [pc, #532]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b82      	ldr	r3, [pc, #520]	@ (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a7e      	ldr	r2, [pc, #504]	@ (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7ff fba3 	bl	8000fe4 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff fb9f 	bl	8000fe4 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b64      	cmp	r3, #100	@ 0x64
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e103      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b75      	ldr	r3, [pc, #468]	@ (8001a8c <HAL_RCC_OscConfig+0x4c8>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x312>
 80018c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	4a6e      	ldr	r2, [pc, #440]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6213      	str	r3, [r2, #32]
 80018d4:	e02d      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x334>
 80018de:	4b6a      	ldr	r3, [pc, #424]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	6a1b      	ldr	r3, [r3, #32]
 80018e2:	4a69      	ldr	r2, [pc, #420]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	6213      	str	r3, [r2, #32]
 80018ea:	4b67      	ldr	r3, [pc, #412]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	4a66      	ldr	r2, [pc, #408]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	f023 0304 	bic.w	r3, r3, #4
 80018f4:	6213      	str	r3, [r2, #32]
 80018f6:	e01c      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	2b05      	cmp	r3, #5
 80018fe:	d10c      	bne.n	800191a <HAL_RCC_OscConfig+0x356>
 8001900:	4b61      	ldr	r3, [pc, #388]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	4a60      	ldr	r2, [pc, #384]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001906:	f043 0304 	orr.w	r3, r3, #4
 800190a:	6213      	str	r3, [r2, #32]
 800190c:	4b5e      	ldr	r3, [pc, #376]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a5d      	ldr	r2, [pc, #372]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	e00b      	b.n	8001932 <HAL_RCC_OscConfig+0x36e>
 800191a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4a5a      	ldr	r2, [pc, #360]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	6213      	str	r3, [r2, #32]
 8001926:	4b58      	ldr	r3, [pc, #352]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	4a57      	ldr	r2, [pc, #348]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	f023 0304 	bic.w	r3, r3, #4
 8001930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d015      	beq.n	8001966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff fb53 	bl	8000fe4 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	e00a      	b.n	8001958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001942:	f7ff fb4f 	bl	8000fe4 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001950:	4293      	cmp	r3, r2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e0b1      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001958:	4b4b      	ldr	r3, [pc, #300]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ee      	beq.n	8001942 <HAL_RCC_OscConfig+0x37e>
 8001964:	e014      	b.n	8001990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001966:	f7ff fb3d 	bl	8000fe4 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff fb39 	bl	8000fe4 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e09b      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001984:	4b40      	ldr	r3, [pc, #256]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ee      	bne.n	800196e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d105      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001996:	4b3c      	ldr	r3, [pc, #240]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8087 	beq.w	8001aba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ac:	4b36      	ldr	r3, [pc, #216]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d061      	beq.n	8001a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d146      	bne.n	8001a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c0:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <HAL_RCC_OscConfig+0x4cc>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c6:	f7ff fb0d 	bl	8000fe4 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fb09 	bl	8000fe4 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e06d      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e0:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80019f6:	4b24      	ldr	r3, [pc, #144]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	4921      	ldr	r1, [pc, #132]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a08:	4b1f      	ldr	r3, [pc, #124]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a19      	ldr	r1, [r3, #32]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	491b      	ldr	r1, [pc, #108]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b1b      	ldr	r3, [pc, #108]	@ (8001a90 <HAL_RCC_OscConfig+0x4cc>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7ff fadd 	bl	8000fe4 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a2e:	f7ff fad9 	bl	8000fe4 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e03d      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a40:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x46a>
 8001a4c:	e035      	b.n	8001aba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a4e:	4b10      	ldr	r3, [pc, #64]	@ (8001a90 <HAL_RCC_OscConfig+0x4cc>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fac6 	bl	8000fe4 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a5c:	f7ff fac2 	bl	8000fe4 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e026      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x498>
 8001a7a:	e01e      	b.n	8001aba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d107      	bne.n	8001a94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e019      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_RCC_OscConfig+0x500>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d106      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0d0      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001adc:	4b6a      	ldr	r3, [pc, #424]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d910      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aea:	4b67      	ldr	r3, [pc, #412]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f023 0207 	bic.w	r2, r3, #7
 8001af2:	4965      	ldr	r1, [pc, #404]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afa:	4b63      	ldr	r3, [pc, #396]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d001      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b8      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b24:	4b59      	ldr	r3, [pc, #356]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a58      	ldr	r2, [pc, #352]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b3c:	4b53      	ldr	r3, [pc, #332]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b48:	4b50      	ldr	r3, [pc, #320]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	494d      	ldr	r1, [pc, #308]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d040      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b47      	ldr	r3, [pc, #284]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d115      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e07f      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b86:	4b41      	ldr	r3, [pc, #260]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d109      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e073      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b96:	4b3d      	ldr	r3, [pc, #244]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06b      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ba6:	4b39      	ldr	r3, [pc, #228]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f023 0203 	bic.w	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4936      	ldr	r1, [pc, #216]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bb8:	f7ff fa14 	bl	8000fe4 <HAL_GetTick>
 8001bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bbe:	e00a      	b.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc0:	f7ff fa10 	bl	8000fe4 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e053      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f003 020c 	and.w	r2, r3, #12
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d1eb      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001be8:	4b27      	ldr	r3, [pc, #156]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d210      	bcs.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f023 0207 	bic.w	r2, r3, #7
 8001bfe:	4922      	ldr	r1, [pc, #136]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c06:	4b20      	ldr	r3, [pc, #128]	@ (8001c88 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d001      	beq.n	8001c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e032      	b.n	8001c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	4916      	ldr	r1, [pc, #88]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d009      	beq.n	8001c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c42:	4b12      	ldr	r3, [pc, #72]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	490e      	ldr	r1, [pc, #56]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c56:	f000 f821 	bl	8001c9c <HAL_RCC_GetSysClockFreq>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c8c <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	091b      	lsrs	r3, r3, #4
 8001c62:	f003 030f 	and.w	r3, r3, #15
 8001c66:	490a      	ldr	r1, [pc, #40]	@ (8001c90 <HAL_RCC_ClockConfig+0x1c8>)
 8001c68:	5ccb      	ldrb	r3, [r1, r3]
 8001c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6e:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <HAL_RCC_ClockConfig+0x1cc>)
 8001c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c72:	4b09      	ldr	r3, [pc, #36]	@ (8001c98 <HAL_RCC_ClockConfig+0x1d0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff f972 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40022000 	.word	0x40022000
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08003230 	.word	0x08003230
 8001c94:	20000008 	.word	0x20000008
 8001c98:	2000000c 	.word	0x2000000c

08001c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b087      	sub	sp, #28
 8001ca0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_GetSysClockFreq+0x30>
 8001cc6:	2b08      	cmp	r3, #8
 8001cc8:	d003      	beq.n	8001cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cca:	e027      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ccc:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cce:	613b      	str	r3, [r7, #16]
      break;
 8001cd0:	e027      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	0c9b      	lsrs	r3, r3, #18
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	4a17      	ldr	r2, [pc, #92]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cdc:	5cd3      	ldrb	r3, [r2, r3]
 8001cde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d010      	beq.n	8001d0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cea:	4b11      	ldr	r3, [pc, #68]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0c5b      	lsrs	r3, r3, #17
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001cf6:	5cd3      	ldrb	r3, [r2, r3]
 8001cf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cfe:	fb03 f202 	mul.w	r2, r3, r2
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	e004      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	613b      	str	r3, [r7, #16]
      break;
 8001d1a:	e002      	b.n	8001d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d1c:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d1e:	613b      	str	r3, [r7, #16]
      break;
 8001d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d22:	693b      	ldr	r3, [r7, #16]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	007a1200 	.word	0x007a1200
 8001d38:	08003248 	.word	0x08003248
 8001d3c:	08003258 	.word	0x08003258
 8001d40:	003d0900 	.word	0x003d0900

08001d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d48:	4b02      	ldr	r3, [pc, #8]	@ (8001d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d5c:	f7ff fff2 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4903      	ldr	r1, [pc, #12]	@ (8001d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	08003240 	.word	0x08003240

08001d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d84:	f7ff ffde 	bl	8001d44 <HAL_RCC_GetHCLKFreq>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	4b05      	ldr	r3, [pc, #20]	@ (8001da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	0adb      	lsrs	r3, r3, #11
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	4903      	ldr	r1, [pc, #12]	@ (8001da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d96:	5ccb      	ldrb	r3, [r1, r3]
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	08003240 	.word	0x08003240

08001da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <RCC_Delay+0x34>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <RCC_Delay+0x38>)
 8001db6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dba:	0a5b      	lsrs	r3, r3, #9
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	fb02 f303 	mul.w	r3, r2, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dc4:	bf00      	nop
  }
  while (Delay --);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f9      	bne.n	8001dc4 <RCC_Delay+0x1c>
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	10624dd3 	.word	0x10624dd3

08001de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e042      	b.n	8001e7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d106      	bne.n	8001e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe ffaa 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2224      	movs	r2, #36	@ 0x24
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f971 	bl	8002110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691a      	ldr	r2, [r3, #16]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	695a      	ldr	r2, [r3, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2220      	movs	r2, #32
 8001e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	4613      	mov	r3, r2
 8001e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d175      	bne.n	8001f90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_UART_Transmit+0x2c>
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e06e      	b.n	8001f92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2221      	movs	r2, #33	@ 0x21
 8001ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ec2:	f7ff f88f 	bl	8000fe4 <HAL_GetTick>
 8001ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	88fa      	ldrh	r2, [r7, #6]
 8001ecc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	88fa      	ldrh	r2, [r7, #6]
 8001ed2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001edc:	d108      	bne.n	8001ef0 <HAL_UART_Transmit+0x6c>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d104      	bne.n	8001ef0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	e003      	b.n	8001ef8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ef8:	e02e      	b.n	8001f58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2200      	movs	r2, #0
 8001f02:	2180      	movs	r1, #128	@ 0x80
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 f848 	bl	8001f9a <UART_WaitOnFlagUntilTimeout>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2220      	movs	r2, #32
 8001f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e03a      	b.n	8001f92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10b      	bne.n	8001f3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	461a      	mov	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	3302      	adds	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	e007      	b.n	8001f4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	781a      	ldrb	r2, [r3, #0]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	3301      	adds	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1cb      	bne.n	8001efa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2140      	movs	r1, #64	@ 0x40
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f814 	bl	8001f9a <UART_WaitOnFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e006      	b.n	8001f92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	603b      	str	r3, [r7, #0]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001faa:	e03b      	b.n	8002024 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fac:	6a3b      	ldr	r3, [r7, #32]
 8001fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb2:	d037      	beq.n	8002024 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb4:	f7ff f816 	bl	8000fe4 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	6a3a      	ldr	r2, [r7, #32]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d302      	bcc.n	8001fca <UART_WaitOnFlagUntilTimeout+0x30>
 8001fc4:	6a3b      	ldr	r3, [r7, #32]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e03a      	b.n	8002044 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d023      	beq.n	8002024 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b80      	cmp	r3, #128	@ 0x80
 8001fe0:	d020      	beq.n	8002024 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b40      	cmp	r3, #64	@ 0x40
 8001fe6:	d01d      	beq.n	8002024 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d116      	bne.n	8002024 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f81d 	bl	800204c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2208      	movs	r2, #8
 8002016:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e00f      	b.n	8002044 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	4013      	ands	r3, r2
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	bf0c      	ite	eq
 8002034:	2301      	moveq	r3, #1
 8002036:	2300      	movne	r3, #0
 8002038:	b2db      	uxtb	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	79fb      	ldrb	r3, [r7, #7]
 800203e:	429a      	cmp	r2, r3
 8002040:	d0b4      	beq.n	8001fac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800204c:	b480      	push	{r7}
 800204e:	b095      	sub	sp, #84	@ 0x54
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	330c      	adds	r3, #12
 800205a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800205c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800205e:	e853 3f00 	ldrex	r3, [r3]
 8002062:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800206a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	330c      	adds	r3, #12
 8002072:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002074:	643a      	str	r2, [r7, #64]	@ 0x40
 8002076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002078:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800207a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800207c:	e841 2300 	strex	r3, r2, [r1]
 8002080:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1e5      	bne.n	8002054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3314      	adds	r3, #20
 800208e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	e853 3f00 	ldrex	r3, [r3]
 8002096:	61fb      	str	r3, [r7, #28]
   return(result);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	3314      	adds	r3, #20
 80020a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80020ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80020b0:	e841 2300 	strex	r3, r2, [r1]
 80020b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1e5      	bne.n	8002088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d119      	bne.n	80020f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	330c      	adds	r3, #12
 80020ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	e853 3f00 	ldrex	r3, [r3]
 80020d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f023 0310 	bic.w	r3, r3, #16
 80020da:	647b      	str	r3, [r7, #68]	@ 0x44
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	330c      	adds	r3, #12
 80020e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80020e4:	61ba      	str	r2, [r7, #24]
 80020e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020e8:	6979      	ldr	r1, [r7, #20]
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	e841 2300 	strex	r3, r2, [r1]
 80020f0:	613b      	str	r3, [r7, #16]
   return(result);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1e5      	bne.n	80020c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002106:	bf00      	nop
 8002108:	3754      	adds	r7, #84	@ 0x54
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	695b      	ldr	r3, [r3, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800214a:	f023 030c 	bic.w	r3, r3, #12
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	68b9      	ldr	r1, [r7, #8]
 8002154:	430b      	orrs	r3, r1
 8002156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a2c      	ldr	r2, [pc, #176]	@ (8002224 <UART_SetConfig+0x114>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d103      	bne.n	8002180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002178:	f7ff fe02 	bl	8001d80 <HAL_RCC_GetPCLK2Freq>
 800217c:	60f8      	str	r0, [r7, #12]
 800217e:	e002      	b.n	8002186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002180:	f7ff fdea 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 8002184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	4613      	mov	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	009a      	lsls	r2, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	fbb2 f3f3 	udiv	r3, r2, r3
 800219c:	4a22      	ldr	r2, [pc, #136]	@ (8002228 <UART_SetConfig+0x118>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	0119      	lsls	r1, r3, #4
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009a      	lsls	r2, r3, #2
 80021b0:	441a      	add	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002228 <UART_SetConfig+0x118>)
 80021be:	fba3 0302 	umull	r0, r3, r3, r2
 80021c2:	095b      	lsrs	r3, r3, #5
 80021c4:	2064      	movs	r0, #100	@ 0x64
 80021c6:	fb00 f303 	mul.w	r3, r0, r3
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	3332      	adds	r3, #50	@ 0x32
 80021d0:	4a15      	ldr	r2, [pc, #84]	@ (8002228 <UART_SetConfig+0x118>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	095b      	lsrs	r3, r3, #5
 80021d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021dc:	4419      	add	r1, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4613      	mov	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	009a      	lsls	r2, r3, #2
 80021e8:	441a      	add	r2, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <UART_SetConfig+0x118>)
 80021f6:	fba3 0302 	umull	r0, r3, r3, r2
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2064      	movs	r0, #100	@ 0x64
 80021fe:	fb00 f303 	mul.w	r3, r0, r3
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	3332      	adds	r3, #50	@ 0x32
 8002208:	4a07      	ldr	r2, [pc, #28]	@ (8002228 <UART_SetConfig+0x118>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	f003 020f 	and.w	r2, r3, #15
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	440a      	add	r2, r1
 800221a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40013800 	.word	0x40013800
 8002228:	51eb851f 	.word	0x51eb851f

0800222c <atoi>:
 800222c:	220a      	movs	r2, #10
 800222e:	2100      	movs	r1, #0
 8002230:	f000 b930 	b.w	8002494 <strtol>

08002234 <malloc>:
 8002234:	4b02      	ldr	r3, [pc, #8]	@ (8002240 <malloc+0xc>)
 8002236:	4601      	mov	r1, r0
 8002238:	6818      	ldr	r0, [r3, #0]
 800223a:	f000 b825 	b.w	8002288 <_malloc_r>
 800223e:	bf00      	nop
 8002240:	20000014 	.word	0x20000014

08002244 <sbrk_aligned>:
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	4e0f      	ldr	r6, [pc, #60]	@ (8002284 <sbrk_aligned+0x40>)
 8002248:	460c      	mov	r4, r1
 800224a:	6831      	ldr	r1, [r6, #0]
 800224c:	4605      	mov	r5, r0
 800224e:	b911      	cbnz	r1, 8002256 <sbrk_aligned+0x12>
 8002250:	f000 f952 	bl	80024f8 <_sbrk_r>
 8002254:	6030      	str	r0, [r6, #0]
 8002256:	4621      	mov	r1, r4
 8002258:	4628      	mov	r0, r5
 800225a:	f000 f94d 	bl	80024f8 <_sbrk_r>
 800225e:	1c43      	adds	r3, r0, #1
 8002260:	d103      	bne.n	800226a <sbrk_aligned+0x26>
 8002262:	f04f 34ff 	mov.w	r4, #4294967295
 8002266:	4620      	mov	r0, r4
 8002268:	bd70      	pop	{r4, r5, r6, pc}
 800226a:	1cc4      	adds	r4, r0, #3
 800226c:	f024 0403 	bic.w	r4, r4, #3
 8002270:	42a0      	cmp	r0, r4
 8002272:	d0f8      	beq.n	8002266 <sbrk_aligned+0x22>
 8002274:	1a21      	subs	r1, r4, r0
 8002276:	4628      	mov	r0, r5
 8002278:	f000 f93e 	bl	80024f8 <_sbrk_r>
 800227c:	3001      	adds	r0, #1
 800227e:	d1f2      	bne.n	8002266 <sbrk_aligned+0x22>
 8002280:	e7ef      	b.n	8002262 <sbrk_aligned+0x1e>
 8002282:	bf00      	nop
 8002284:	200002d8 	.word	0x200002d8

08002288 <_malloc_r>:
 8002288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800228c:	1ccd      	adds	r5, r1, #3
 800228e:	f025 0503 	bic.w	r5, r5, #3
 8002292:	3508      	adds	r5, #8
 8002294:	2d0c      	cmp	r5, #12
 8002296:	bf38      	it	cc
 8002298:	250c      	movcc	r5, #12
 800229a:	2d00      	cmp	r5, #0
 800229c:	4606      	mov	r6, r0
 800229e:	db01      	blt.n	80022a4 <_malloc_r+0x1c>
 80022a0:	42a9      	cmp	r1, r5
 80022a2:	d904      	bls.n	80022ae <_malloc_r+0x26>
 80022a4:	230c      	movs	r3, #12
 80022a6:	6033      	str	r3, [r6, #0]
 80022a8:	2000      	movs	r0, #0
 80022aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002384 <_malloc_r+0xfc>
 80022b2:	f000 f869 	bl	8002388 <__malloc_lock>
 80022b6:	f8d8 3000 	ldr.w	r3, [r8]
 80022ba:	461c      	mov	r4, r3
 80022bc:	bb44      	cbnz	r4, 8002310 <_malloc_r+0x88>
 80022be:	4629      	mov	r1, r5
 80022c0:	4630      	mov	r0, r6
 80022c2:	f7ff ffbf 	bl	8002244 <sbrk_aligned>
 80022c6:	1c43      	adds	r3, r0, #1
 80022c8:	4604      	mov	r4, r0
 80022ca:	d158      	bne.n	800237e <_malloc_r+0xf6>
 80022cc:	f8d8 4000 	ldr.w	r4, [r8]
 80022d0:	4627      	mov	r7, r4
 80022d2:	2f00      	cmp	r7, #0
 80022d4:	d143      	bne.n	800235e <_malloc_r+0xd6>
 80022d6:	2c00      	cmp	r4, #0
 80022d8:	d04b      	beq.n	8002372 <_malloc_r+0xea>
 80022da:	6823      	ldr	r3, [r4, #0]
 80022dc:	4639      	mov	r1, r7
 80022de:	4630      	mov	r0, r6
 80022e0:	eb04 0903 	add.w	r9, r4, r3
 80022e4:	f000 f908 	bl	80024f8 <_sbrk_r>
 80022e8:	4581      	cmp	r9, r0
 80022ea:	d142      	bne.n	8002372 <_malloc_r+0xea>
 80022ec:	6821      	ldr	r1, [r4, #0]
 80022ee:	4630      	mov	r0, r6
 80022f0:	1a6d      	subs	r5, r5, r1
 80022f2:	4629      	mov	r1, r5
 80022f4:	f7ff ffa6 	bl	8002244 <sbrk_aligned>
 80022f8:	3001      	adds	r0, #1
 80022fa:	d03a      	beq.n	8002372 <_malloc_r+0xea>
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	442b      	add	r3, r5
 8002300:	6023      	str	r3, [r4, #0]
 8002302:	f8d8 3000 	ldr.w	r3, [r8]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	bb62      	cbnz	r2, 8002364 <_malloc_r+0xdc>
 800230a:	f8c8 7000 	str.w	r7, [r8]
 800230e:	e00f      	b.n	8002330 <_malloc_r+0xa8>
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	1b52      	subs	r2, r2, r5
 8002314:	d420      	bmi.n	8002358 <_malloc_r+0xd0>
 8002316:	2a0b      	cmp	r2, #11
 8002318:	d917      	bls.n	800234a <_malloc_r+0xc2>
 800231a:	1961      	adds	r1, r4, r5
 800231c:	42a3      	cmp	r3, r4
 800231e:	6025      	str	r5, [r4, #0]
 8002320:	bf18      	it	ne
 8002322:	6059      	strne	r1, [r3, #4]
 8002324:	6863      	ldr	r3, [r4, #4]
 8002326:	bf08      	it	eq
 8002328:	f8c8 1000 	streq.w	r1, [r8]
 800232c:	5162      	str	r2, [r4, r5]
 800232e:	604b      	str	r3, [r1, #4]
 8002330:	4630      	mov	r0, r6
 8002332:	f000 f82f 	bl	8002394 <__malloc_unlock>
 8002336:	f104 000b 	add.w	r0, r4, #11
 800233a:	1d23      	adds	r3, r4, #4
 800233c:	f020 0007 	bic.w	r0, r0, #7
 8002340:	1ac2      	subs	r2, r0, r3
 8002342:	bf1c      	itt	ne
 8002344:	1a1b      	subne	r3, r3, r0
 8002346:	50a3      	strne	r3, [r4, r2]
 8002348:	e7af      	b.n	80022aa <_malloc_r+0x22>
 800234a:	6862      	ldr	r2, [r4, #4]
 800234c:	42a3      	cmp	r3, r4
 800234e:	bf0c      	ite	eq
 8002350:	f8c8 2000 	streq.w	r2, [r8]
 8002354:	605a      	strne	r2, [r3, #4]
 8002356:	e7eb      	b.n	8002330 <_malloc_r+0xa8>
 8002358:	4623      	mov	r3, r4
 800235a:	6864      	ldr	r4, [r4, #4]
 800235c:	e7ae      	b.n	80022bc <_malloc_r+0x34>
 800235e:	463c      	mov	r4, r7
 8002360:	687f      	ldr	r7, [r7, #4]
 8002362:	e7b6      	b.n	80022d2 <_malloc_r+0x4a>
 8002364:	461a      	mov	r2, r3
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	42a3      	cmp	r3, r4
 800236a:	d1fb      	bne.n	8002364 <_malloc_r+0xdc>
 800236c:	2300      	movs	r3, #0
 800236e:	6053      	str	r3, [r2, #4]
 8002370:	e7de      	b.n	8002330 <_malloc_r+0xa8>
 8002372:	230c      	movs	r3, #12
 8002374:	4630      	mov	r0, r6
 8002376:	6033      	str	r3, [r6, #0]
 8002378:	f000 f80c 	bl	8002394 <__malloc_unlock>
 800237c:	e794      	b.n	80022a8 <_malloc_r+0x20>
 800237e:	6005      	str	r5, [r0, #0]
 8002380:	e7d6      	b.n	8002330 <_malloc_r+0xa8>
 8002382:	bf00      	nop
 8002384:	200002dc 	.word	0x200002dc

08002388 <__malloc_lock>:
 8002388:	4801      	ldr	r0, [pc, #4]	@ (8002390 <__malloc_lock+0x8>)
 800238a:	f000 b8ef 	b.w	800256c <__retarget_lock_acquire_recursive>
 800238e:	bf00      	nop
 8002390:	2000041c 	.word	0x2000041c

08002394 <__malloc_unlock>:
 8002394:	4801      	ldr	r0, [pc, #4]	@ (800239c <__malloc_unlock+0x8>)
 8002396:	f000 b8ea 	b.w	800256e <__retarget_lock_release_recursive>
 800239a:	bf00      	nop
 800239c:	2000041c 	.word	0x2000041c

080023a0 <_strtol_l.constprop.0>:
 80023a0:	2b24      	cmp	r3, #36	@ 0x24
 80023a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023a6:	4686      	mov	lr, r0
 80023a8:	4690      	mov	r8, r2
 80023aa:	d801      	bhi.n	80023b0 <_strtol_l.constprop.0+0x10>
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <_strtol_l.constprop.0+0x1e>
 80023b0:	f000 f8b2 	bl	8002518 <__errno>
 80023b4:	2316      	movs	r3, #22
 80023b6:	6003      	str	r3, [r0, #0]
 80023b8:	2000      	movs	r0, #0
 80023ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023be:	460d      	mov	r5, r1
 80023c0:	4833      	ldr	r0, [pc, #204]	@ (8002490 <_strtol_l.constprop.0+0xf0>)
 80023c2:	462a      	mov	r2, r5
 80023c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80023c8:	5d06      	ldrb	r6, [r0, r4]
 80023ca:	f016 0608 	ands.w	r6, r6, #8
 80023ce:	d1f8      	bne.n	80023c2 <_strtol_l.constprop.0+0x22>
 80023d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80023d2:	d12d      	bne.n	8002430 <_strtol_l.constprop.0+0x90>
 80023d4:	2601      	movs	r6, #1
 80023d6:	782c      	ldrb	r4, [r5, #0]
 80023d8:	1c95      	adds	r5, r2, #2
 80023da:	f033 0210 	bics.w	r2, r3, #16
 80023de:	d109      	bne.n	80023f4 <_strtol_l.constprop.0+0x54>
 80023e0:	2c30      	cmp	r4, #48	@ 0x30
 80023e2:	d12a      	bne.n	800243a <_strtol_l.constprop.0+0x9a>
 80023e4:	782a      	ldrb	r2, [r5, #0]
 80023e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80023ea:	2a58      	cmp	r2, #88	@ 0x58
 80023ec:	d125      	bne.n	800243a <_strtol_l.constprop.0+0x9a>
 80023ee:	2310      	movs	r3, #16
 80023f0:	786c      	ldrb	r4, [r5, #1]
 80023f2:	3502      	adds	r5, #2
 80023f4:	2200      	movs	r2, #0
 80023f6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80023fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80023fe:	fbbc f9f3 	udiv	r9, ip, r3
 8002402:	4610      	mov	r0, r2
 8002404:	fb03 ca19 	mls	sl, r3, r9, ip
 8002408:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800240c:	2f09      	cmp	r7, #9
 800240e:	d81b      	bhi.n	8002448 <_strtol_l.constprop.0+0xa8>
 8002410:	463c      	mov	r4, r7
 8002412:	42a3      	cmp	r3, r4
 8002414:	dd27      	ble.n	8002466 <_strtol_l.constprop.0+0xc6>
 8002416:	1c57      	adds	r7, r2, #1
 8002418:	d007      	beq.n	800242a <_strtol_l.constprop.0+0x8a>
 800241a:	4581      	cmp	r9, r0
 800241c:	d320      	bcc.n	8002460 <_strtol_l.constprop.0+0xc0>
 800241e:	d101      	bne.n	8002424 <_strtol_l.constprop.0+0x84>
 8002420:	45a2      	cmp	sl, r4
 8002422:	db1d      	blt.n	8002460 <_strtol_l.constprop.0+0xc0>
 8002424:	2201      	movs	r2, #1
 8002426:	fb00 4003 	mla	r0, r0, r3, r4
 800242a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800242e:	e7eb      	b.n	8002408 <_strtol_l.constprop.0+0x68>
 8002430:	2c2b      	cmp	r4, #43	@ 0x2b
 8002432:	bf04      	itt	eq
 8002434:	782c      	ldrbeq	r4, [r5, #0]
 8002436:	1c95      	addeq	r5, r2, #2
 8002438:	e7cf      	b.n	80023da <_strtol_l.constprop.0+0x3a>
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1da      	bne.n	80023f4 <_strtol_l.constprop.0+0x54>
 800243e:	2c30      	cmp	r4, #48	@ 0x30
 8002440:	bf0c      	ite	eq
 8002442:	2308      	moveq	r3, #8
 8002444:	230a      	movne	r3, #10
 8002446:	e7d5      	b.n	80023f4 <_strtol_l.constprop.0+0x54>
 8002448:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800244c:	2f19      	cmp	r7, #25
 800244e:	d801      	bhi.n	8002454 <_strtol_l.constprop.0+0xb4>
 8002450:	3c37      	subs	r4, #55	@ 0x37
 8002452:	e7de      	b.n	8002412 <_strtol_l.constprop.0+0x72>
 8002454:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8002458:	2f19      	cmp	r7, #25
 800245a:	d804      	bhi.n	8002466 <_strtol_l.constprop.0+0xc6>
 800245c:	3c57      	subs	r4, #87	@ 0x57
 800245e:	e7d8      	b.n	8002412 <_strtol_l.constprop.0+0x72>
 8002460:	f04f 32ff 	mov.w	r2, #4294967295
 8002464:	e7e1      	b.n	800242a <_strtol_l.constprop.0+0x8a>
 8002466:	1c53      	adds	r3, r2, #1
 8002468:	d108      	bne.n	800247c <_strtol_l.constprop.0+0xdc>
 800246a:	2322      	movs	r3, #34	@ 0x22
 800246c:	4660      	mov	r0, ip
 800246e:	f8ce 3000 	str.w	r3, [lr]
 8002472:	f1b8 0f00 	cmp.w	r8, #0
 8002476:	d0a0      	beq.n	80023ba <_strtol_l.constprop.0+0x1a>
 8002478:	1e69      	subs	r1, r5, #1
 800247a:	e006      	b.n	800248a <_strtol_l.constprop.0+0xea>
 800247c:	b106      	cbz	r6, 8002480 <_strtol_l.constprop.0+0xe0>
 800247e:	4240      	negs	r0, r0
 8002480:	f1b8 0f00 	cmp.w	r8, #0
 8002484:	d099      	beq.n	80023ba <_strtol_l.constprop.0+0x1a>
 8002486:	2a00      	cmp	r2, #0
 8002488:	d1f6      	bne.n	8002478 <_strtol_l.constprop.0+0xd8>
 800248a:	f8c8 1000 	str.w	r1, [r8]
 800248e:	e794      	b.n	80023ba <_strtol_l.constprop.0+0x1a>
 8002490:	0800325b 	.word	0x0800325b

08002494 <strtol>:
 8002494:	4613      	mov	r3, r2
 8002496:	460a      	mov	r2, r1
 8002498:	4601      	mov	r1, r0
 800249a:	4802      	ldr	r0, [pc, #8]	@ (80024a4 <strtol+0x10>)
 800249c:	6800      	ldr	r0, [r0, #0]
 800249e:	f7ff bf7f 	b.w	80023a0 <_strtol_l.constprop.0>
 80024a2:	bf00      	nop
 80024a4:	20000014 	.word	0x20000014

080024a8 <siprintf>:
 80024a8:	b40e      	push	{r1, r2, r3}
 80024aa:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024ae:	b500      	push	{lr}
 80024b0:	b09c      	sub	sp, #112	@ 0x70
 80024b2:	ab1d      	add	r3, sp, #116	@ 0x74
 80024b4:	9002      	str	r0, [sp, #8]
 80024b6:	9006      	str	r0, [sp, #24]
 80024b8:	9107      	str	r1, [sp, #28]
 80024ba:	9104      	str	r1, [sp, #16]
 80024bc:	4808      	ldr	r0, [pc, #32]	@ (80024e0 <siprintf+0x38>)
 80024be:	4909      	ldr	r1, [pc, #36]	@ (80024e4 <siprintf+0x3c>)
 80024c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80024c4:	9105      	str	r1, [sp, #20]
 80024c6:	6800      	ldr	r0, [r0, #0]
 80024c8:	a902      	add	r1, sp, #8
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	f000 f8f4 	bl	80026b8 <_svfiprintf_r>
 80024d0:	2200      	movs	r2, #0
 80024d2:	9b02      	ldr	r3, [sp, #8]
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	b01c      	add	sp, #112	@ 0x70
 80024d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024dc:	b003      	add	sp, #12
 80024de:	4770      	bx	lr
 80024e0:	20000014 	.word	0x20000014
 80024e4:	ffff0208 	.word	0xffff0208

080024e8 <memset>:
 80024e8:	4603      	mov	r3, r0
 80024ea:	4402      	add	r2, r0
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d100      	bne.n	80024f2 <memset+0xa>
 80024f0:	4770      	bx	lr
 80024f2:	f803 1b01 	strb.w	r1, [r3], #1
 80024f6:	e7f9      	b.n	80024ec <memset+0x4>

080024f8 <_sbrk_r>:
 80024f8:	b538      	push	{r3, r4, r5, lr}
 80024fa:	2300      	movs	r3, #0
 80024fc:	4d05      	ldr	r5, [pc, #20]	@ (8002514 <_sbrk_r+0x1c>)
 80024fe:	4604      	mov	r4, r0
 8002500:	4608      	mov	r0, r1
 8002502:	602b      	str	r3, [r5, #0]
 8002504:	f7fe fcb4 	bl	8000e70 <_sbrk>
 8002508:	1c43      	adds	r3, r0, #1
 800250a:	d102      	bne.n	8002512 <_sbrk_r+0x1a>
 800250c:	682b      	ldr	r3, [r5, #0]
 800250e:	b103      	cbz	r3, 8002512 <_sbrk_r+0x1a>
 8002510:	6023      	str	r3, [r4, #0]
 8002512:	bd38      	pop	{r3, r4, r5, pc}
 8002514:	20000418 	.word	0x20000418

08002518 <__errno>:
 8002518:	4b01      	ldr	r3, [pc, #4]	@ (8002520 <__errno+0x8>)
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000014 	.word	0x20000014

08002524 <__libc_init_array>:
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	2600      	movs	r6, #0
 8002528:	4d0c      	ldr	r5, [pc, #48]	@ (800255c <__libc_init_array+0x38>)
 800252a:	4c0d      	ldr	r4, [pc, #52]	@ (8002560 <__libc_init_array+0x3c>)
 800252c:	1b64      	subs	r4, r4, r5
 800252e:	10a4      	asrs	r4, r4, #2
 8002530:	42a6      	cmp	r6, r4
 8002532:	d109      	bne.n	8002548 <__libc_init_array+0x24>
 8002534:	f000 fbba 	bl	8002cac <_init>
 8002538:	2600      	movs	r6, #0
 800253a:	4d0a      	ldr	r5, [pc, #40]	@ (8002564 <__libc_init_array+0x40>)
 800253c:	4c0a      	ldr	r4, [pc, #40]	@ (8002568 <__libc_init_array+0x44>)
 800253e:	1b64      	subs	r4, r4, r5
 8002540:	10a4      	asrs	r4, r4, #2
 8002542:	42a6      	cmp	r6, r4
 8002544:	d105      	bne.n	8002552 <__libc_init_array+0x2e>
 8002546:	bd70      	pop	{r4, r5, r6, pc}
 8002548:	f855 3b04 	ldr.w	r3, [r5], #4
 800254c:	4798      	blx	r3
 800254e:	3601      	adds	r6, #1
 8002550:	e7ee      	b.n	8002530 <__libc_init_array+0xc>
 8002552:	f855 3b04 	ldr.w	r3, [r5], #4
 8002556:	4798      	blx	r3
 8002558:	3601      	adds	r6, #1
 800255a:	e7f2      	b.n	8002542 <__libc_init_array+0x1e>
 800255c:	08003398 	.word	0x08003398
 8002560:	08003398 	.word	0x08003398
 8002564:	08003398 	.word	0x08003398
 8002568:	0800339c 	.word	0x0800339c

0800256c <__retarget_lock_acquire_recursive>:
 800256c:	4770      	bx	lr

0800256e <__retarget_lock_release_recursive>:
 800256e:	4770      	bx	lr

08002570 <_free_r>:
 8002570:	b538      	push	{r3, r4, r5, lr}
 8002572:	4605      	mov	r5, r0
 8002574:	2900      	cmp	r1, #0
 8002576:	d040      	beq.n	80025fa <_free_r+0x8a>
 8002578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800257c:	1f0c      	subs	r4, r1, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	bfb8      	it	lt
 8002582:	18e4      	addlt	r4, r4, r3
 8002584:	f7ff ff00 	bl	8002388 <__malloc_lock>
 8002588:	4a1c      	ldr	r2, [pc, #112]	@ (80025fc <_free_r+0x8c>)
 800258a:	6813      	ldr	r3, [r2, #0]
 800258c:	b933      	cbnz	r3, 800259c <_free_r+0x2c>
 800258e:	6063      	str	r3, [r4, #4]
 8002590:	6014      	str	r4, [r2, #0]
 8002592:	4628      	mov	r0, r5
 8002594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002598:	f7ff befc 	b.w	8002394 <__malloc_unlock>
 800259c:	42a3      	cmp	r3, r4
 800259e:	d908      	bls.n	80025b2 <_free_r+0x42>
 80025a0:	6820      	ldr	r0, [r4, #0]
 80025a2:	1821      	adds	r1, r4, r0
 80025a4:	428b      	cmp	r3, r1
 80025a6:	bf01      	itttt	eq
 80025a8:	6819      	ldreq	r1, [r3, #0]
 80025aa:	685b      	ldreq	r3, [r3, #4]
 80025ac:	1809      	addeq	r1, r1, r0
 80025ae:	6021      	streq	r1, [r4, #0]
 80025b0:	e7ed      	b.n	800258e <_free_r+0x1e>
 80025b2:	461a      	mov	r2, r3
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	b10b      	cbz	r3, 80025bc <_free_r+0x4c>
 80025b8:	42a3      	cmp	r3, r4
 80025ba:	d9fa      	bls.n	80025b2 <_free_r+0x42>
 80025bc:	6811      	ldr	r1, [r2, #0]
 80025be:	1850      	adds	r0, r2, r1
 80025c0:	42a0      	cmp	r0, r4
 80025c2:	d10b      	bne.n	80025dc <_free_r+0x6c>
 80025c4:	6820      	ldr	r0, [r4, #0]
 80025c6:	4401      	add	r1, r0
 80025c8:	1850      	adds	r0, r2, r1
 80025ca:	4283      	cmp	r3, r0
 80025cc:	6011      	str	r1, [r2, #0]
 80025ce:	d1e0      	bne.n	8002592 <_free_r+0x22>
 80025d0:	6818      	ldr	r0, [r3, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4408      	add	r0, r1
 80025d6:	6010      	str	r0, [r2, #0]
 80025d8:	6053      	str	r3, [r2, #4]
 80025da:	e7da      	b.n	8002592 <_free_r+0x22>
 80025dc:	d902      	bls.n	80025e4 <_free_r+0x74>
 80025de:	230c      	movs	r3, #12
 80025e0:	602b      	str	r3, [r5, #0]
 80025e2:	e7d6      	b.n	8002592 <_free_r+0x22>
 80025e4:	6820      	ldr	r0, [r4, #0]
 80025e6:	1821      	adds	r1, r4, r0
 80025e8:	428b      	cmp	r3, r1
 80025ea:	bf01      	itttt	eq
 80025ec:	6819      	ldreq	r1, [r3, #0]
 80025ee:	685b      	ldreq	r3, [r3, #4]
 80025f0:	1809      	addeq	r1, r1, r0
 80025f2:	6021      	streq	r1, [r4, #0]
 80025f4:	6063      	str	r3, [r4, #4]
 80025f6:	6054      	str	r4, [r2, #4]
 80025f8:	e7cb      	b.n	8002592 <_free_r+0x22>
 80025fa:	bd38      	pop	{r3, r4, r5, pc}
 80025fc:	200002dc 	.word	0x200002dc

08002600 <__ssputs_r>:
 8002600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002604:	461f      	mov	r7, r3
 8002606:	688e      	ldr	r6, [r1, #8]
 8002608:	4682      	mov	sl, r0
 800260a:	42be      	cmp	r6, r7
 800260c:	460c      	mov	r4, r1
 800260e:	4690      	mov	r8, r2
 8002610:	680b      	ldr	r3, [r1, #0]
 8002612:	d82d      	bhi.n	8002670 <__ssputs_r+0x70>
 8002614:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002618:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800261c:	d026      	beq.n	800266c <__ssputs_r+0x6c>
 800261e:	6965      	ldr	r5, [r4, #20]
 8002620:	6909      	ldr	r1, [r1, #16]
 8002622:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002626:	eba3 0901 	sub.w	r9, r3, r1
 800262a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800262e:	1c7b      	adds	r3, r7, #1
 8002630:	444b      	add	r3, r9
 8002632:	106d      	asrs	r5, r5, #1
 8002634:	429d      	cmp	r5, r3
 8002636:	bf38      	it	cc
 8002638:	461d      	movcc	r5, r3
 800263a:	0553      	lsls	r3, r2, #21
 800263c:	d527      	bpl.n	800268e <__ssputs_r+0x8e>
 800263e:	4629      	mov	r1, r5
 8002640:	f7ff fe22 	bl	8002288 <_malloc_r>
 8002644:	4606      	mov	r6, r0
 8002646:	b360      	cbz	r0, 80026a2 <__ssputs_r+0xa2>
 8002648:	464a      	mov	r2, r9
 800264a:	6921      	ldr	r1, [r4, #16]
 800264c:	f000 faea 	bl	8002c24 <memcpy>
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002656:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800265a:	81a3      	strh	r3, [r4, #12]
 800265c:	6126      	str	r6, [r4, #16]
 800265e:	444e      	add	r6, r9
 8002660:	6026      	str	r6, [r4, #0]
 8002662:	463e      	mov	r6, r7
 8002664:	6165      	str	r5, [r4, #20]
 8002666:	eba5 0509 	sub.w	r5, r5, r9
 800266a:	60a5      	str	r5, [r4, #8]
 800266c:	42be      	cmp	r6, r7
 800266e:	d900      	bls.n	8002672 <__ssputs_r+0x72>
 8002670:	463e      	mov	r6, r7
 8002672:	4632      	mov	r2, r6
 8002674:	4641      	mov	r1, r8
 8002676:	6820      	ldr	r0, [r4, #0]
 8002678:	f000 faac 	bl	8002bd4 <memmove>
 800267c:	2000      	movs	r0, #0
 800267e:	68a3      	ldr	r3, [r4, #8]
 8002680:	1b9b      	subs	r3, r3, r6
 8002682:	60a3      	str	r3, [r4, #8]
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	4433      	add	r3, r6
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800268e:	462a      	mov	r2, r5
 8002690:	f000 fad6 	bl	8002c40 <_realloc_r>
 8002694:	4606      	mov	r6, r0
 8002696:	2800      	cmp	r0, #0
 8002698:	d1e0      	bne.n	800265c <__ssputs_r+0x5c>
 800269a:	4650      	mov	r0, sl
 800269c:	6921      	ldr	r1, [r4, #16]
 800269e:	f7ff ff67 	bl	8002570 <_free_r>
 80026a2:	230c      	movs	r3, #12
 80026a4:	f8ca 3000 	str.w	r3, [sl]
 80026a8:	89a3      	ldrh	r3, [r4, #12]
 80026aa:	f04f 30ff 	mov.w	r0, #4294967295
 80026ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b2:	81a3      	strh	r3, [r4, #12]
 80026b4:	e7e9      	b.n	800268a <__ssputs_r+0x8a>
	...

080026b8 <_svfiprintf_r>:
 80026b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026bc:	4698      	mov	r8, r3
 80026be:	898b      	ldrh	r3, [r1, #12]
 80026c0:	4607      	mov	r7, r0
 80026c2:	061b      	lsls	r3, r3, #24
 80026c4:	460d      	mov	r5, r1
 80026c6:	4614      	mov	r4, r2
 80026c8:	b09d      	sub	sp, #116	@ 0x74
 80026ca:	d510      	bpl.n	80026ee <_svfiprintf_r+0x36>
 80026cc:	690b      	ldr	r3, [r1, #16]
 80026ce:	b973      	cbnz	r3, 80026ee <_svfiprintf_r+0x36>
 80026d0:	2140      	movs	r1, #64	@ 0x40
 80026d2:	f7ff fdd9 	bl	8002288 <_malloc_r>
 80026d6:	6028      	str	r0, [r5, #0]
 80026d8:	6128      	str	r0, [r5, #16]
 80026da:	b930      	cbnz	r0, 80026ea <_svfiprintf_r+0x32>
 80026dc:	230c      	movs	r3, #12
 80026de:	603b      	str	r3, [r7, #0]
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	b01d      	add	sp, #116	@ 0x74
 80026e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ea:	2340      	movs	r3, #64	@ 0x40
 80026ec:	616b      	str	r3, [r5, #20]
 80026ee:	2300      	movs	r3, #0
 80026f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80026f2:	2320      	movs	r3, #32
 80026f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80026f8:	2330      	movs	r3, #48	@ 0x30
 80026fa:	f04f 0901 	mov.w	r9, #1
 80026fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002702:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800289c <_svfiprintf_r+0x1e4>
 8002706:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800270a:	4623      	mov	r3, r4
 800270c:	469a      	mov	sl, r3
 800270e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002712:	b10a      	cbz	r2, 8002718 <_svfiprintf_r+0x60>
 8002714:	2a25      	cmp	r2, #37	@ 0x25
 8002716:	d1f9      	bne.n	800270c <_svfiprintf_r+0x54>
 8002718:	ebba 0b04 	subs.w	fp, sl, r4
 800271c:	d00b      	beq.n	8002736 <_svfiprintf_r+0x7e>
 800271e:	465b      	mov	r3, fp
 8002720:	4622      	mov	r2, r4
 8002722:	4629      	mov	r1, r5
 8002724:	4638      	mov	r0, r7
 8002726:	f7ff ff6b 	bl	8002600 <__ssputs_r>
 800272a:	3001      	adds	r0, #1
 800272c:	f000 80a7 	beq.w	800287e <_svfiprintf_r+0x1c6>
 8002730:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002732:	445a      	add	r2, fp
 8002734:	9209      	str	r2, [sp, #36]	@ 0x24
 8002736:	f89a 3000 	ldrb.w	r3, [sl]
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 809f 	beq.w	800287e <_svfiprintf_r+0x1c6>
 8002740:	2300      	movs	r3, #0
 8002742:	f04f 32ff 	mov.w	r2, #4294967295
 8002746:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800274a:	f10a 0a01 	add.w	sl, sl, #1
 800274e:	9304      	str	r3, [sp, #16]
 8002750:	9307      	str	r3, [sp, #28]
 8002752:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002756:	931a      	str	r3, [sp, #104]	@ 0x68
 8002758:	4654      	mov	r4, sl
 800275a:	2205      	movs	r2, #5
 800275c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002760:	484e      	ldr	r0, [pc, #312]	@ (800289c <_svfiprintf_r+0x1e4>)
 8002762:	f000 fa51 	bl	8002c08 <memchr>
 8002766:	9a04      	ldr	r2, [sp, #16]
 8002768:	b9d8      	cbnz	r0, 80027a2 <_svfiprintf_r+0xea>
 800276a:	06d0      	lsls	r0, r2, #27
 800276c:	bf44      	itt	mi
 800276e:	2320      	movmi	r3, #32
 8002770:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002774:	0711      	lsls	r1, r2, #28
 8002776:	bf44      	itt	mi
 8002778:	232b      	movmi	r3, #43	@ 0x2b
 800277a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800277e:	f89a 3000 	ldrb.w	r3, [sl]
 8002782:	2b2a      	cmp	r3, #42	@ 0x2a
 8002784:	d015      	beq.n	80027b2 <_svfiprintf_r+0xfa>
 8002786:	4654      	mov	r4, sl
 8002788:	2000      	movs	r0, #0
 800278a:	f04f 0c0a 	mov.w	ip, #10
 800278e:	9a07      	ldr	r2, [sp, #28]
 8002790:	4621      	mov	r1, r4
 8002792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002796:	3b30      	subs	r3, #48	@ 0x30
 8002798:	2b09      	cmp	r3, #9
 800279a:	d94b      	bls.n	8002834 <_svfiprintf_r+0x17c>
 800279c:	b1b0      	cbz	r0, 80027cc <_svfiprintf_r+0x114>
 800279e:	9207      	str	r2, [sp, #28]
 80027a0:	e014      	b.n	80027cc <_svfiprintf_r+0x114>
 80027a2:	eba0 0308 	sub.w	r3, r0, r8
 80027a6:	fa09 f303 	lsl.w	r3, r9, r3
 80027aa:	4313      	orrs	r3, r2
 80027ac:	46a2      	mov	sl, r4
 80027ae:	9304      	str	r3, [sp, #16]
 80027b0:	e7d2      	b.n	8002758 <_svfiprintf_r+0xa0>
 80027b2:	9b03      	ldr	r3, [sp, #12]
 80027b4:	1d19      	adds	r1, r3, #4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	9103      	str	r1, [sp, #12]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	bfbb      	ittet	lt
 80027be:	425b      	neglt	r3, r3
 80027c0:	f042 0202 	orrlt.w	r2, r2, #2
 80027c4:	9307      	strge	r3, [sp, #28]
 80027c6:	9307      	strlt	r3, [sp, #28]
 80027c8:	bfb8      	it	lt
 80027ca:	9204      	strlt	r2, [sp, #16]
 80027cc:	7823      	ldrb	r3, [r4, #0]
 80027ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80027d0:	d10a      	bne.n	80027e8 <_svfiprintf_r+0x130>
 80027d2:	7863      	ldrb	r3, [r4, #1]
 80027d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80027d6:	d132      	bne.n	800283e <_svfiprintf_r+0x186>
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	3402      	adds	r4, #2
 80027dc:	1d1a      	adds	r2, r3, #4
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	9203      	str	r2, [sp, #12]
 80027e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80027e6:	9305      	str	r3, [sp, #20]
 80027e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80028a0 <_svfiprintf_r+0x1e8>
 80027ec:	2203      	movs	r2, #3
 80027ee:	4650      	mov	r0, sl
 80027f0:	7821      	ldrb	r1, [r4, #0]
 80027f2:	f000 fa09 	bl	8002c08 <memchr>
 80027f6:	b138      	cbz	r0, 8002808 <_svfiprintf_r+0x150>
 80027f8:	2240      	movs	r2, #64	@ 0x40
 80027fa:	9b04      	ldr	r3, [sp, #16]
 80027fc:	eba0 000a 	sub.w	r0, r0, sl
 8002800:	4082      	lsls	r2, r0
 8002802:	4313      	orrs	r3, r2
 8002804:	3401      	adds	r4, #1
 8002806:	9304      	str	r3, [sp, #16]
 8002808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800280c:	2206      	movs	r2, #6
 800280e:	4825      	ldr	r0, [pc, #148]	@ (80028a4 <_svfiprintf_r+0x1ec>)
 8002810:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002814:	f000 f9f8 	bl	8002c08 <memchr>
 8002818:	2800      	cmp	r0, #0
 800281a:	d036      	beq.n	800288a <_svfiprintf_r+0x1d2>
 800281c:	4b22      	ldr	r3, [pc, #136]	@ (80028a8 <_svfiprintf_r+0x1f0>)
 800281e:	bb1b      	cbnz	r3, 8002868 <_svfiprintf_r+0x1b0>
 8002820:	9b03      	ldr	r3, [sp, #12]
 8002822:	3307      	adds	r3, #7
 8002824:	f023 0307 	bic.w	r3, r3, #7
 8002828:	3308      	adds	r3, #8
 800282a:	9303      	str	r3, [sp, #12]
 800282c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800282e:	4433      	add	r3, r6
 8002830:	9309      	str	r3, [sp, #36]	@ 0x24
 8002832:	e76a      	b.n	800270a <_svfiprintf_r+0x52>
 8002834:	460c      	mov	r4, r1
 8002836:	2001      	movs	r0, #1
 8002838:	fb0c 3202 	mla	r2, ip, r2, r3
 800283c:	e7a8      	b.n	8002790 <_svfiprintf_r+0xd8>
 800283e:	2300      	movs	r3, #0
 8002840:	f04f 0c0a 	mov.w	ip, #10
 8002844:	4619      	mov	r1, r3
 8002846:	3401      	adds	r4, #1
 8002848:	9305      	str	r3, [sp, #20]
 800284a:	4620      	mov	r0, r4
 800284c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002850:	3a30      	subs	r2, #48	@ 0x30
 8002852:	2a09      	cmp	r2, #9
 8002854:	d903      	bls.n	800285e <_svfiprintf_r+0x1a6>
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0c6      	beq.n	80027e8 <_svfiprintf_r+0x130>
 800285a:	9105      	str	r1, [sp, #20]
 800285c:	e7c4      	b.n	80027e8 <_svfiprintf_r+0x130>
 800285e:	4604      	mov	r4, r0
 8002860:	2301      	movs	r3, #1
 8002862:	fb0c 2101 	mla	r1, ip, r1, r2
 8002866:	e7f0      	b.n	800284a <_svfiprintf_r+0x192>
 8002868:	ab03      	add	r3, sp, #12
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	462a      	mov	r2, r5
 800286e:	4638      	mov	r0, r7
 8002870:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <_svfiprintf_r+0x1f4>)
 8002872:	a904      	add	r1, sp, #16
 8002874:	f3af 8000 	nop.w
 8002878:	1c42      	adds	r2, r0, #1
 800287a:	4606      	mov	r6, r0
 800287c:	d1d6      	bne.n	800282c <_svfiprintf_r+0x174>
 800287e:	89ab      	ldrh	r3, [r5, #12]
 8002880:	065b      	lsls	r3, r3, #25
 8002882:	f53f af2d 	bmi.w	80026e0 <_svfiprintf_r+0x28>
 8002886:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002888:	e72c      	b.n	80026e4 <_svfiprintf_r+0x2c>
 800288a:	ab03      	add	r3, sp, #12
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	462a      	mov	r2, r5
 8002890:	4638      	mov	r0, r7
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <_svfiprintf_r+0x1f4>)
 8002894:	a904      	add	r1, sp, #16
 8002896:	f000 f87d 	bl	8002994 <_printf_i>
 800289a:	e7ed      	b.n	8002878 <_svfiprintf_r+0x1c0>
 800289c:	0800335b 	.word	0x0800335b
 80028a0:	08003361 	.word	0x08003361
 80028a4:	08003365 	.word	0x08003365
 80028a8:	00000000 	.word	0x00000000
 80028ac:	08002601 	.word	0x08002601

080028b0 <_printf_common>:
 80028b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028b4:	4616      	mov	r6, r2
 80028b6:	4698      	mov	r8, r3
 80028b8:	688a      	ldr	r2, [r1, #8]
 80028ba:	690b      	ldr	r3, [r1, #16]
 80028bc:	4607      	mov	r7, r0
 80028be:	4293      	cmp	r3, r2
 80028c0:	bfb8      	it	lt
 80028c2:	4613      	movlt	r3, r2
 80028c4:	6033      	str	r3, [r6, #0]
 80028c6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80028ca:	460c      	mov	r4, r1
 80028cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80028d0:	b10a      	cbz	r2, 80028d6 <_printf_common+0x26>
 80028d2:	3301      	adds	r3, #1
 80028d4:	6033      	str	r3, [r6, #0]
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	0699      	lsls	r1, r3, #26
 80028da:	bf42      	ittt	mi
 80028dc:	6833      	ldrmi	r3, [r6, #0]
 80028de:	3302      	addmi	r3, #2
 80028e0:	6033      	strmi	r3, [r6, #0]
 80028e2:	6825      	ldr	r5, [r4, #0]
 80028e4:	f015 0506 	ands.w	r5, r5, #6
 80028e8:	d106      	bne.n	80028f8 <_printf_common+0x48>
 80028ea:	f104 0a19 	add.w	sl, r4, #25
 80028ee:	68e3      	ldr	r3, [r4, #12]
 80028f0:	6832      	ldr	r2, [r6, #0]
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	42ab      	cmp	r3, r5
 80028f6:	dc2b      	bgt.n	8002950 <_printf_common+0xa0>
 80028f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80028fc:	6822      	ldr	r2, [r4, #0]
 80028fe:	3b00      	subs	r3, #0
 8002900:	bf18      	it	ne
 8002902:	2301      	movne	r3, #1
 8002904:	0692      	lsls	r2, r2, #26
 8002906:	d430      	bmi.n	800296a <_printf_common+0xba>
 8002908:	4641      	mov	r1, r8
 800290a:	4638      	mov	r0, r7
 800290c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002910:	47c8      	blx	r9
 8002912:	3001      	adds	r0, #1
 8002914:	d023      	beq.n	800295e <_printf_common+0xae>
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	6922      	ldr	r2, [r4, #16]
 800291a:	f003 0306 	and.w	r3, r3, #6
 800291e:	2b04      	cmp	r3, #4
 8002920:	bf14      	ite	ne
 8002922:	2500      	movne	r5, #0
 8002924:	6833      	ldreq	r3, [r6, #0]
 8002926:	f04f 0600 	mov.w	r6, #0
 800292a:	bf08      	it	eq
 800292c:	68e5      	ldreq	r5, [r4, #12]
 800292e:	f104 041a 	add.w	r4, r4, #26
 8002932:	bf08      	it	eq
 8002934:	1aed      	subeq	r5, r5, r3
 8002936:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800293a:	bf08      	it	eq
 800293c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002940:	4293      	cmp	r3, r2
 8002942:	bfc4      	itt	gt
 8002944:	1a9b      	subgt	r3, r3, r2
 8002946:	18ed      	addgt	r5, r5, r3
 8002948:	42b5      	cmp	r5, r6
 800294a:	d11a      	bne.n	8002982 <_printf_common+0xd2>
 800294c:	2000      	movs	r0, #0
 800294e:	e008      	b.n	8002962 <_printf_common+0xb2>
 8002950:	2301      	movs	r3, #1
 8002952:	4652      	mov	r2, sl
 8002954:	4641      	mov	r1, r8
 8002956:	4638      	mov	r0, r7
 8002958:	47c8      	blx	r9
 800295a:	3001      	adds	r0, #1
 800295c:	d103      	bne.n	8002966 <_printf_common+0xb6>
 800295e:	f04f 30ff 	mov.w	r0, #4294967295
 8002962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002966:	3501      	adds	r5, #1
 8002968:	e7c1      	b.n	80028ee <_printf_common+0x3e>
 800296a:	2030      	movs	r0, #48	@ 0x30
 800296c:	18e1      	adds	r1, r4, r3
 800296e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002978:	4422      	add	r2, r4
 800297a:	3302      	adds	r3, #2
 800297c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002980:	e7c2      	b.n	8002908 <_printf_common+0x58>
 8002982:	2301      	movs	r3, #1
 8002984:	4622      	mov	r2, r4
 8002986:	4641      	mov	r1, r8
 8002988:	4638      	mov	r0, r7
 800298a:	47c8      	blx	r9
 800298c:	3001      	adds	r0, #1
 800298e:	d0e6      	beq.n	800295e <_printf_common+0xae>
 8002990:	3601      	adds	r6, #1
 8002992:	e7d9      	b.n	8002948 <_printf_common+0x98>

08002994 <_printf_i>:
 8002994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002998:	7e0f      	ldrb	r7, [r1, #24]
 800299a:	4691      	mov	r9, r2
 800299c:	2f78      	cmp	r7, #120	@ 0x78
 800299e:	4680      	mov	r8, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	469a      	mov	sl, r3
 80029a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80029a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80029aa:	d807      	bhi.n	80029bc <_printf_i+0x28>
 80029ac:	2f62      	cmp	r7, #98	@ 0x62
 80029ae:	d80a      	bhi.n	80029c6 <_printf_i+0x32>
 80029b0:	2f00      	cmp	r7, #0
 80029b2:	f000 80d3 	beq.w	8002b5c <_printf_i+0x1c8>
 80029b6:	2f58      	cmp	r7, #88	@ 0x58
 80029b8:	f000 80ba 	beq.w	8002b30 <_printf_i+0x19c>
 80029bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80029c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80029c4:	e03a      	b.n	8002a3c <_printf_i+0xa8>
 80029c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80029ca:	2b15      	cmp	r3, #21
 80029cc:	d8f6      	bhi.n	80029bc <_printf_i+0x28>
 80029ce:	a101      	add	r1, pc, #4	@ (adr r1, 80029d4 <_printf_i+0x40>)
 80029d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80029d4:	08002a2d 	.word	0x08002a2d
 80029d8:	08002a41 	.word	0x08002a41
 80029dc:	080029bd 	.word	0x080029bd
 80029e0:	080029bd 	.word	0x080029bd
 80029e4:	080029bd 	.word	0x080029bd
 80029e8:	080029bd 	.word	0x080029bd
 80029ec:	08002a41 	.word	0x08002a41
 80029f0:	080029bd 	.word	0x080029bd
 80029f4:	080029bd 	.word	0x080029bd
 80029f8:	080029bd 	.word	0x080029bd
 80029fc:	080029bd 	.word	0x080029bd
 8002a00:	08002b43 	.word	0x08002b43
 8002a04:	08002a6b 	.word	0x08002a6b
 8002a08:	08002afd 	.word	0x08002afd
 8002a0c:	080029bd 	.word	0x080029bd
 8002a10:	080029bd 	.word	0x080029bd
 8002a14:	08002b65 	.word	0x08002b65
 8002a18:	080029bd 	.word	0x080029bd
 8002a1c:	08002a6b 	.word	0x08002a6b
 8002a20:	080029bd 	.word	0x080029bd
 8002a24:	080029bd 	.word	0x080029bd
 8002a28:	08002b05 	.word	0x08002b05
 8002a2c:	6833      	ldr	r3, [r6, #0]
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6032      	str	r2, [r6, #0]
 8002a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e09e      	b.n	8002b7e <_printf_i+0x1ea>
 8002a40:	6833      	ldr	r3, [r6, #0]
 8002a42:	6820      	ldr	r0, [r4, #0]
 8002a44:	1d19      	adds	r1, r3, #4
 8002a46:	6031      	str	r1, [r6, #0]
 8002a48:	0606      	lsls	r6, r0, #24
 8002a4a:	d501      	bpl.n	8002a50 <_printf_i+0xbc>
 8002a4c:	681d      	ldr	r5, [r3, #0]
 8002a4e:	e003      	b.n	8002a58 <_printf_i+0xc4>
 8002a50:	0645      	lsls	r5, r0, #25
 8002a52:	d5fb      	bpl.n	8002a4c <_printf_i+0xb8>
 8002a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002a58:	2d00      	cmp	r5, #0
 8002a5a:	da03      	bge.n	8002a64 <_printf_i+0xd0>
 8002a5c:	232d      	movs	r3, #45	@ 0x2d
 8002a5e:	426d      	negs	r5, r5
 8002a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a64:	230a      	movs	r3, #10
 8002a66:	4859      	ldr	r0, [pc, #356]	@ (8002bcc <_printf_i+0x238>)
 8002a68:	e011      	b.n	8002a8e <_printf_i+0xfa>
 8002a6a:	6821      	ldr	r1, [r4, #0]
 8002a6c:	6833      	ldr	r3, [r6, #0]
 8002a6e:	0608      	lsls	r0, r1, #24
 8002a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8002a74:	d402      	bmi.n	8002a7c <_printf_i+0xe8>
 8002a76:	0649      	lsls	r1, r1, #25
 8002a78:	bf48      	it	mi
 8002a7a:	b2ad      	uxthmi	r5, r5
 8002a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8002a7e:	6033      	str	r3, [r6, #0]
 8002a80:	bf14      	ite	ne
 8002a82:	230a      	movne	r3, #10
 8002a84:	2308      	moveq	r3, #8
 8002a86:	4851      	ldr	r0, [pc, #324]	@ (8002bcc <_printf_i+0x238>)
 8002a88:	2100      	movs	r1, #0
 8002a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002a8e:	6866      	ldr	r6, [r4, #4]
 8002a90:	2e00      	cmp	r6, #0
 8002a92:	bfa8      	it	ge
 8002a94:	6821      	ldrge	r1, [r4, #0]
 8002a96:	60a6      	str	r6, [r4, #8]
 8002a98:	bfa4      	itt	ge
 8002a9a:	f021 0104 	bicge.w	r1, r1, #4
 8002a9e:	6021      	strge	r1, [r4, #0]
 8002aa0:	b90d      	cbnz	r5, 8002aa6 <_printf_i+0x112>
 8002aa2:	2e00      	cmp	r6, #0
 8002aa4:	d04b      	beq.n	8002b3e <_printf_i+0x1aa>
 8002aa6:	4616      	mov	r6, r2
 8002aa8:	fbb5 f1f3 	udiv	r1, r5, r3
 8002aac:	fb03 5711 	mls	r7, r3, r1, r5
 8002ab0:	5dc7      	ldrb	r7, [r0, r7]
 8002ab2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ab6:	462f      	mov	r7, r5
 8002ab8:	42bb      	cmp	r3, r7
 8002aba:	460d      	mov	r5, r1
 8002abc:	d9f4      	bls.n	8002aa8 <_printf_i+0x114>
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d10b      	bne.n	8002ada <_printf_i+0x146>
 8002ac2:	6823      	ldr	r3, [r4, #0]
 8002ac4:	07df      	lsls	r7, r3, #31
 8002ac6:	d508      	bpl.n	8002ada <_printf_i+0x146>
 8002ac8:	6923      	ldr	r3, [r4, #16]
 8002aca:	6861      	ldr	r1, [r4, #4]
 8002acc:	4299      	cmp	r1, r3
 8002ace:	bfde      	ittt	le
 8002ad0:	2330      	movle	r3, #48	@ 0x30
 8002ad2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ad6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ada:	1b92      	subs	r2, r2, r6
 8002adc:	6122      	str	r2, [r4, #16]
 8002ade:	464b      	mov	r3, r9
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	4640      	mov	r0, r8
 8002ae4:	f8cd a000 	str.w	sl, [sp]
 8002ae8:	aa03      	add	r2, sp, #12
 8002aea:	f7ff fee1 	bl	80028b0 <_printf_common>
 8002aee:	3001      	adds	r0, #1
 8002af0:	d14a      	bne.n	8002b88 <_printf_i+0x1f4>
 8002af2:	f04f 30ff 	mov.w	r0, #4294967295
 8002af6:	b004      	add	sp, #16
 8002af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	6023      	str	r3, [r4, #0]
 8002b04:	2778      	movs	r7, #120	@ 0x78
 8002b06:	4832      	ldr	r0, [pc, #200]	@ (8002bd0 <_printf_i+0x23c>)
 8002b08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	6831      	ldr	r1, [r6, #0]
 8002b10:	061f      	lsls	r7, r3, #24
 8002b12:	f851 5b04 	ldr.w	r5, [r1], #4
 8002b16:	d402      	bmi.n	8002b1e <_printf_i+0x18a>
 8002b18:	065f      	lsls	r7, r3, #25
 8002b1a:	bf48      	it	mi
 8002b1c:	b2ad      	uxthmi	r5, r5
 8002b1e:	6031      	str	r1, [r6, #0]
 8002b20:	07d9      	lsls	r1, r3, #31
 8002b22:	bf44      	itt	mi
 8002b24:	f043 0320 	orrmi.w	r3, r3, #32
 8002b28:	6023      	strmi	r3, [r4, #0]
 8002b2a:	b11d      	cbz	r5, 8002b34 <_printf_i+0x1a0>
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	e7ab      	b.n	8002a88 <_printf_i+0xf4>
 8002b30:	4826      	ldr	r0, [pc, #152]	@ (8002bcc <_printf_i+0x238>)
 8002b32:	e7e9      	b.n	8002b08 <_printf_i+0x174>
 8002b34:	6823      	ldr	r3, [r4, #0]
 8002b36:	f023 0320 	bic.w	r3, r3, #32
 8002b3a:	6023      	str	r3, [r4, #0]
 8002b3c:	e7f6      	b.n	8002b2c <_printf_i+0x198>
 8002b3e:	4616      	mov	r6, r2
 8002b40:	e7bd      	b.n	8002abe <_printf_i+0x12a>
 8002b42:	6833      	ldr	r3, [r6, #0]
 8002b44:	6825      	ldr	r5, [r4, #0]
 8002b46:	1d18      	adds	r0, r3, #4
 8002b48:	6961      	ldr	r1, [r4, #20]
 8002b4a:	6030      	str	r0, [r6, #0]
 8002b4c:	062e      	lsls	r6, r5, #24
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	d501      	bpl.n	8002b56 <_printf_i+0x1c2>
 8002b52:	6019      	str	r1, [r3, #0]
 8002b54:	e002      	b.n	8002b5c <_printf_i+0x1c8>
 8002b56:	0668      	lsls	r0, r5, #25
 8002b58:	d5fb      	bpl.n	8002b52 <_printf_i+0x1be>
 8002b5a:	8019      	strh	r1, [r3, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	4616      	mov	r6, r2
 8002b60:	6123      	str	r3, [r4, #16]
 8002b62:	e7bc      	b.n	8002ade <_printf_i+0x14a>
 8002b64:	6833      	ldr	r3, [r6, #0]
 8002b66:	2100      	movs	r1, #0
 8002b68:	1d1a      	adds	r2, r3, #4
 8002b6a:	6032      	str	r2, [r6, #0]
 8002b6c:	681e      	ldr	r6, [r3, #0]
 8002b6e:	6862      	ldr	r2, [r4, #4]
 8002b70:	4630      	mov	r0, r6
 8002b72:	f000 f849 	bl	8002c08 <memchr>
 8002b76:	b108      	cbz	r0, 8002b7c <_printf_i+0x1e8>
 8002b78:	1b80      	subs	r0, r0, r6
 8002b7a:	6060      	str	r0, [r4, #4]
 8002b7c:	6863      	ldr	r3, [r4, #4]
 8002b7e:	6123      	str	r3, [r4, #16]
 8002b80:	2300      	movs	r3, #0
 8002b82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b86:	e7aa      	b.n	8002ade <_printf_i+0x14a>
 8002b88:	4632      	mov	r2, r6
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	4640      	mov	r0, r8
 8002b8e:	6923      	ldr	r3, [r4, #16]
 8002b90:	47d0      	blx	sl
 8002b92:	3001      	adds	r0, #1
 8002b94:	d0ad      	beq.n	8002af2 <_printf_i+0x15e>
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	079b      	lsls	r3, r3, #30
 8002b9a:	d413      	bmi.n	8002bc4 <_printf_i+0x230>
 8002b9c:	68e0      	ldr	r0, [r4, #12]
 8002b9e:	9b03      	ldr	r3, [sp, #12]
 8002ba0:	4298      	cmp	r0, r3
 8002ba2:	bfb8      	it	lt
 8002ba4:	4618      	movlt	r0, r3
 8002ba6:	e7a6      	b.n	8002af6 <_printf_i+0x162>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	4632      	mov	r2, r6
 8002bac:	4649      	mov	r1, r9
 8002bae:	4640      	mov	r0, r8
 8002bb0:	47d0      	blx	sl
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	d09d      	beq.n	8002af2 <_printf_i+0x15e>
 8002bb6:	3501      	adds	r5, #1
 8002bb8:	68e3      	ldr	r3, [r4, #12]
 8002bba:	9903      	ldr	r1, [sp, #12]
 8002bbc:	1a5b      	subs	r3, r3, r1
 8002bbe:	42ab      	cmp	r3, r5
 8002bc0:	dcf2      	bgt.n	8002ba8 <_printf_i+0x214>
 8002bc2:	e7eb      	b.n	8002b9c <_printf_i+0x208>
 8002bc4:	2500      	movs	r5, #0
 8002bc6:	f104 0619 	add.w	r6, r4, #25
 8002bca:	e7f5      	b.n	8002bb8 <_printf_i+0x224>
 8002bcc:	0800336c 	.word	0x0800336c
 8002bd0:	0800337d 	.word	0x0800337d

08002bd4 <memmove>:
 8002bd4:	4288      	cmp	r0, r1
 8002bd6:	b510      	push	{r4, lr}
 8002bd8:	eb01 0402 	add.w	r4, r1, r2
 8002bdc:	d902      	bls.n	8002be4 <memmove+0x10>
 8002bde:	4284      	cmp	r4, r0
 8002be0:	4623      	mov	r3, r4
 8002be2:	d807      	bhi.n	8002bf4 <memmove+0x20>
 8002be4:	1e43      	subs	r3, r0, #1
 8002be6:	42a1      	cmp	r1, r4
 8002be8:	d008      	beq.n	8002bfc <memmove+0x28>
 8002bea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002bee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002bf2:	e7f8      	b.n	8002be6 <memmove+0x12>
 8002bf4:	4601      	mov	r1, r0
 8002bf6:	4402      	add	r2, r0
 8002bf8:	428a      	cmp	r2, r1
 8002bfa:	d100      	bne.n	8002bfe <memmove+0x2a>
 8002bfc:	bd10      	pop	{r4, pc}
 8002bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c06:	e7f7      	b.n	8002bf8 <memmove+0x24>

08002c08 <memchr>:
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b510      	push	{r4, lr}
 8002c0c:	b2c9      	uxtb	r1, r1
 8002c0e:	4402      	add	r2, r0
 8002c10:	4293      	cmp	r3, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	d101      	bne.n	8002c1a <memchr+0x12>
 8002c16:	2000      	movs	r0, #0
 8002c18:	e003      	b.n	8002c22 <memchr+0x1a>
 8002c1a:	7804      	ldrb	r4, [r0, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	428c      	cmp	r4, r1
 8002c20:	d1f6      	bne.n	8002c10 <memchr+0x8>
 8002c22:	bd10      	pop	{r4, pc}

08002c24 <memcpy>:
 8002c24:	440a      	add	r2, r1
 8002c26:	4291      	cmp	r1, r2
 8002c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8002c2c:	d100      	bne.n	8002c30 <memcpy+0xc>
 8002c2e:	4770      	bx	lr
 8002c30:	b510      	push	{r4, lr}
 8002c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c36:	4291      	cmp	r1, r2
 8002c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c3c:	d1f9      	bne.n	8002c32 <memcpy+0xe>
 8002c3e:	bd10      	pop	{r4, pc}

08002c40 <_realloc_r>:
 8002c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c44:	4680      	mov	r8, r0
 8002c46:	4615      	mov	r5, r2
 8002c48:	460c      	mov	r4, r1
 8002c4a:	b921      	cbnz	r1, 8002c56 <_realloc_r+0x16>
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c52:	f7ff bb19 	b.w	8002288 <_malloc_r>
 8002c56:	b92a      	cbnz	r2, 8002c64 <_realloc_r+0x24>
 8002c58:	f7ff fc8a 	bl	8002570 <_free_r>
 8002c5c:	2400      	movs	r4, #0
 8002c5e:	4620      	mov	r0, r4
 8002c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c64:	f000 f81a 	bl	8002c9c <_malloc_usable_size_r>
 8002c68:	4285      	cmp	r5, r0
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	d802      	bhi.n	8002c74 <_realloc_r+0x34>
 8002c6e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002c72:	d8f4      	bhi.n	8002c5e <_realloc_r+0x1e>
 8002c74:	4629      	mov	r1, r5
 8002c76:	4640      	mov	r0, r8
 8002c78:	f7ff fb06 	bl	8002288 <_malloc_r>
 8002c7c:	4607      	mov	r7, r0
 8002c7e:	2800      	cmp	r0, #0
 8002c80:	d0ec      	beq.n	8002c5c <_realloc_r+0x1c>
 8002c82:	42b5      	cmp	r5, r6
 8002c84:	462a      	mov	r2, r5
 8002c86:	4621      	mov	r1, r4
 8002c88:	bf28      	it	cs
 8002c8a:	4632      	movcs	r2, r6
 8002c8c:	f7ff ffca 	bl	8002c24 <memcpy>
 8002c90:	4621      	mov	r1, r4
 8002c92:	4640      	mov	r0, r8
 8002c94:	f7ff fc6c 	bl	8002570 <_free_r>
 8002c98:	463c      	mov	r4, r7
 8002c9a:	e7e0      	b.n	8002c5e <_realloc_r+0x1e>

08002c9c <_malloc_usable_size_r>:
 8002c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ca0:	1f18      	subs	r0, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	bfbc      	itt	lt
 8002ca6:	580b      	ldrlt	r3, [r1, r0]
 8002ca8:	18c0      	addlt	r0, r0, r3
 8002caa:	4770      	bx	lr

08002cac <_init>:
 8002cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cae:	bf00      	nop
 8002cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cb2:	bc08      	pop	{r3}
 8002cb4:	469e      	mov	lr, r3
 8002cb6:	4770      	bx	lr

08002cb8 <_fini>:
 8002cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cba:	bf00      	nop
 8002cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002cbe:	bc08      	pop	{r3}
 8002cc0:	469e      	mov	lr, r3
 8002cc2:	4770      	bx	lr
