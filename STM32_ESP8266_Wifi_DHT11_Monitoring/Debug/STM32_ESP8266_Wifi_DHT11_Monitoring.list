
STM32_ESP8266_Wifi_DHT11_Monitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c8c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006cc  08002d98  08002d98  00003d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003464  08003464  00005064  2**0
                  CONTENTS
  4 .ARM          00000008  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800346c  0800346c  00005064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800346c  0800346c  0000446c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003470  08003470  00004470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08003474  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000064  080034d8  00005064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  080034d8  00005420  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c00  00000000  00000000  0000508d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa4  00000000  00000000  0000cc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000e738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005bd  00000000  00000000  0000eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174eb  00000000  00000000  0000f495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bb5  00000000  00000000  00026980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082957  00000000  00000000  00030535  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2e8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022cc  00000000  00000000  000b2ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000b519c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d80 	.word	0x08002d80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002d80 	.word	0x08002d80

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <DHT11_Data>:
 *
 */
#include "DHT11.h"

void DHT11_Data(uint8_t* data)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	uint8_t resp_status = 0;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
	uint8_t byte_num = 0, bit = 0, byte = 0;
 800017c:	2300      	movs	r3, #0
 800017e:	73bb      	strb	r3, [r7, #14]
 8000180:	2300      	movs	r3, #0
 8000182:	737b      	strb	r3, [r7, #13]
 8000184:	2300      	movs	r3, #0
 8000186:	733b      	strb	r3, [r7, #12]

	while (resp_status == 0)
 8000188:	e078      	b.n	800027c <DHT11_Data+0x10c>
	{
		//START SIGNAL
		setPinToOutput(GPIOA, GPIO_PIN_1);
 800018a:	2102      	movs	r1, #2
 800018c:	483f      	ldr	r0, [pc, #252]	@ (800028c <DHT11_Data+0x11c>)
 800018e:	f000 f8c7 	bl	8000320 <setPinToOutput>

		delayUS_ASM(20000);
 8000192:	4b3f      	ldr	r3, [pc, #252]	@ (8000290 <DHT11_Data+0x120>)
 8000194:	4618      	mov	r0, r3
 8000196:	f1a0 0001 	sub.w	r0, r0, #1
 800019a:	2800      	cmp	r0, #0
 800019c:	d1fb      	bne.n	8000196 <DHT11_Data+0x26>
		setPinToInput(GPIOA, GPIO_PIN_1);
 800019e:	2102      	movs	r1, #2
 80001a0:	483a      	ldr	r0, [pc, #232]	@ (800028c <DHT11_Data+0x11c>)
 80001a2:	f000 f877 	bl	8000294 <setPinToInput>

		//CHECKING RESPONSE
		// DHT11 - 30us high average + 40us low average
		delayUS_ASM(40);
 80001a6:	23f0      	movs	r3, #240	@ 0xf0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f1a0 0001 	sub.w	r0, r0, #1
 80001ae:	2800      	cmp	r0, #0
 80001b0:	d1fb      	bne.n	80001aa <DHT11_Data+0x3a>

	    if ((GPIOA->IDR & GPIO_PIN_1) == GPIO_PIN_RESET)
 80001b2:	4b36      	ldr	r3, [pc, #216]	@ (800028c <DHT11_Data+0x11c>)
 80001b4:	689b      	ldr	r3, [r3, #8]
 80001b6:	f003 0302 	and.w	r3, r3, #2
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d119      	bne.n	80001f2 <DHT11_Data+0x82>
	    {
	    	delayUS_ASM(80);
 80001be:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f1a0 0001 	sub.w	r0, r0, #1
 80001c8:	2800      	cmp	r0, #0
 80001ca:	d1fb      	bne.n	80001c4 <DHT11_Data+0x54>

			if ((GPIOA->IDR & GPIO_PIN_1) != GPIO_PIN_RESET)
 80001cc:	4b2f      	ldr	r3, [pc, #188]	@ (800028c <DHT11_Data+0x11c>)
 80001ce:	689b      	ldr	r3, [r3, #8]
 80001d0:	f003 0302 	and.w	r3, r3, #2
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d009      	beq.n	80001ec <DHT11_Data+0x7c>
			{
				resp_status = 1;
 80001d8:	2301      	movs	r3, #1
 80001da:	73fb      	strb	r3, [r7, #15]

				while((GPIOA->IDR & GPIO_PIN_1) != GPIO_PIN_RESET);
 80001dc:	bf00      	nop
 80001de:	4b2b      	ldr	r3, [pc, #172]	@ (800028c <DHT11_Data+0x11c>)
 80001e0:	689b      	ldr	r3, [r3, #8]
 80001e2:	f003 0302 	and.w	r3, r3, #2
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d1f9      	bne.n	80001de <DHT11_Data+0x6e>
 80001ea:	e004      	b.n	80001f6 <DHT11_Data+0x86>
			}
			else
			{
				resp_status = 0;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]
 80001f0:	e001      	b.n	80001f6 <DHT11_Data+0x86>
			}
	    }
	    else
	    {
	    	resp_status = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	73fb      	strb	r3, [r7, #15]
	    }

	    if (resp_status)
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d03b      	beq.n	8000274 <DHT11_Data+0x104>
	    {
	    	for (; byte_num < 5; byte_num++, byte = 0)
 80001fc:	e036      	b.n	800026c <DHT11_Data+0xfc>
	    	{
	    		for (bit = 0; bit < 8; bit++)
 80001fe:	2300      	movs	r3, #0
 8000200:	737b      	strb	r3, [r7, #13]
 8000202:	e026      	b.n	8000252 <DHT11_Data+0xe2>
	    		{
	    			while((GPIOA->IDR & GPIO_PIN_1) == GPIO_PIN_RESET);
 8000204:	bf00      	nop
 8000206:	4b21      	ldr	r3, [pc, #132]	@ (800028c <DHT11_Data+0x11c>)
 8000208:	689b      	ldr	r3, [r3, #8]
 800020a:	f003 0302 	and.w	r3, r3, #2
 800020e:	2b00      	cmp	r3, #0
 8000210:	d0f9      	beq.n	8000206 <DHT11_Data+0x96>

					delayUS_ASM(35);
 8000212:	23d2      	movs	r3, #210	@ 0xd2
 8000214:	4618      	mov	r0, r3
 8000216:	f1a0 0001 	sub.w	r0, r0, #1
 800021a:	2800      	cmp	r0, #0
 800021c:	d1fb      	bne.n	8000216 <DHT11_Data+0xa6>

					if((GPIOA->IDR & GPIO_PIN_1) != GPIO_PIN_RESET)
 800021e:	4b1b      	ldr	r3, [pc, #108]	@ (800028c <DHT11_Data+0x11c>)
 8000220:	689b      	ldr	r3, [r3, #8]
 8000222:	f003 0302 	and.w	r3, r3, #2
 8000226:	2b00      	cmp	r3, #0
 8000228:	d009      	beq.n	800023e <DHT11_Data+0xce>
					{
						byte |= 0x80 >> bit;
 800022a:	7b7b      	ldrb	r3, [r7, #13]
 800022c:	2280      	movs	r2, #128	@ 0x80
 800022e:	fa42 f303 	asr.w	r3, r2, r3
 8000232:	b25a      	sxtb	r2, r3
 8000234:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000238:	4313      	orrs	r3, r2
 800023a:	b25b      	sxtb	r3, r3
 800023c:	733b      	strb	r3, [r7, #12]
					}

					while((GPIOA->IDR & GPIO_PIN_1) != GPIO_PIN_RESET);
 800023e:	bf00      	nop
 8000240:	4b12      	ldr	r3, [pc, #72]	@ (800028c <DHT11_Data+0x11c>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	f003 0302 	and.w	r3, r3, #2
 8000248:	2b00      	cmp	r3, #0
 800024a:	d1f9      	bne.n	8000240 <DHT11_Data+0xd0>
	    		for (bit = 0; bit < 8; bit++)
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	3301      	adds	r3, #1
 8000250:	737b      	strb	r3, [r7, #13]
 8000252:	7b7b      	ldrb	r3, [r7, #13]
 8000254:	2b07      	cmp	r3, #7
 8000256:	d9d5      	bls.n	8000204 <DHT11_Data+0x94>
	    		}

	    		data[byte_num] = byte;
 8000258:	7bbb      	ldrb	r3, [r7, #14]
 800025a:	687a      	ldr	r2, [r7, #4]
 800025c:	4413      	add	r3, r2
 800025e:	7b3a      	ldrb	r2, [r7, #12]
 8000260:	701a      	strb	r2, [r3, #0]
	    	for (; byte_num < 5; byte_num++, byte = 0)
 8000262:	7bbb      	ldrb	r3, [r7, #14]
 8000264:	3301      	adds	r3, #1
 8000266:	73bb      	strb	r3, [r7, #14]
 8000268:	2300      	movs	r3, #0
 800026a:	733b      	strb	r3, [r7, #12]
 800026c:	7bbb      	ldrb	r3, [r7, #14]
 800026e:	2b04      	cmp	r3, #4
 8000270:	d9c5      	bls.n	80001fe <DHT11_Data+0x8e>
 8000272:	e003      	b.n	800027c <DHT11_Data+0x10c>
	    	}
	    }
	    else
	    {
	    	data[4] = 0;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3304      	adds	r3, #4
 8000278:	2200      	movs	r2, #0
 800027a:	701a      	strb	r2, [r3, #0]
	while (resp_status == 0)
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d083      	beq.n	800018a <DHT11_Data+0x1a>
	    }
	}
}
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	3710      	adds	r7, #16
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}
 800028c:	40010800 	.word	0x40010800
 8000290:	0001d4c0 	.word	0x0001d4c0

08000294 <setPinToInput>:

void setPinToInput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000294:	b480      	push	{r7}
 8000296:	b087      	sub	sp, #28
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	460b      	mov	r3, r1
 800029e:	807b      	strh	r3, [r7, #2]
    uint32_t 		  position = 0;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]
    uint32_t 		  register_offset;
    volatile uint32_t *config_register;
    uint32_t 		  temp;

    while (GPIO_Pin)
 80002a4:	e033      	b.n	800030e <setPinToInput+0x7a>
    {
        if (GPIO_Pin & 0x01)
 80002a6:	887b      	ldrh	r3, [r7, #2]
 80002a8:	f003 0301 	and.w	r3, r3, #1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d028      	beq.n	8000302 <setPinToInput+0x6e>
        {
            register_offset = (position < 8) ? 0 : 1;
 80002b0:	697b      	ldr	r3, [r7, #20]
 80002b2:	2b07      	cmp	r3, #7
 80002b4:	bf8c      	ite	hi
 80002b6:	2301      	movhi	r3, #1
 80002b8:	2300      	movls	r3, #0
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	613b      	str	r3, [r7, #16]
            config_register = &GPIOx->CRL + register_offset;
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	693b      	ldr	r3, [r7, #16]
 80002c2:	009b      	lsls	r3, r3, #2
 80002c4:	4413      	add	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]

            temp =  *config_register;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	60bb      	str	r3, [r7, #8]
            temp &= ~(0x0F << ((position & 0x07) * 4));
 80002ce:	697b      	ldr	r3, [r7, #20]
 80002d0:	f003 0307 	and.w	r3, r3, #7
 80002d4:	009b      	lsls	r3, r3, #2
 80002d6:	220f      	movs	r2, #15
 80002d8:	fa02 f303 	lsl.w	r3, r2, r3
 80002dc:	43db      	mvns	r3, r3
 80002de:	461a      	mov	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	4013      	ands	r3, r2
 80002e4:	60bb      	str	r3, [r7, #8]
            temp |= (0x04 << ((position & 0x07) * 4));  // Input floating
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	f003 0307 	and.w	r3, r3, #7
 80002ec:	009b      	lsls	r3, r3, #2
 80002ee:	2204      	movs	r2, #4
 80002f0:	fa02 f303 	lsl.w	r3, r2, r3
 80002f4:	461a      	mov	r2, r3
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	60bb      	str	r3, [r7, #8]

            *config_register = temp;
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	601a      	str	r2, [r3, #0]
        }

        position++;
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
        GPIO_Pin >>= 1;
 8000308:	887b      	ldrh	r3, [r7, #2]
 800030a:	085b      	lsrs	r3, r3, #1
 800030c:	807b      	strh	r3, [r7, #2]
    while (GPIO_Pin)
 800030e:	887b      	ldrh	r3, [r7, #2]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1c8      	bne.n	80002a6 <setPinToInput+0x12>
    }
}
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	371c      	adds	r7, #28
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr

08000320 <setPinToOutput>:

void setPinToOutput(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	460b      	mov	r3, r1
 800032a:	807b      	strh	r3, [r7, #2]
    uint32_t 		  position = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	617b      	str	r3, [r7, #20]
    uint32_t 		  register_offset;
    volatile uint32_t *config_register;
    uint32_t 		  temp;

    while (GPIO_Pin)
 8000330:	e033      	b.n	800039a <setPinToOutput+0x7a>
    {
        if (GPIO_Pin & 0x01)
 8000332:	887b      	ldrh	r3, [r7, #2]
 8000334:	f003 0301 	and.w	r3, r3, #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	d028      	beq.n	800038e <setPinToOutput+0x6e>
        {
            register_offset = (position < 8) ? 0 : 1;
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	2b07      	cmp	r3, #7
 8000340:	bf8c      	ite	hi
 8000342:	2301      	movhi	r3, #1
 8000344:	2300      	movls	r3, #0
 8000346:	b2db      	uxtb	r3, r3
 8000348:	613b      	str	r3, [r7, #16]
            config_register = &GPIOx->CRL + register_offset;
 800034a:	687a      	ldr	r2, [r7, #4]
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	009b      	lsls	r3, r3, #2
 8000350:	4413      	add	r3, r2
 8000352:	60fb      	str	r3, [r7, #12]

            temp =  *config_register;
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	60bb      	str	r3, [r7, #8]
            temp &= ~(0x0F << ((position & 0x07) * 4));
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	f003 0307 	and.w	r3, r3, #7
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	220f      	movs	r2, #15
 8000364:	fa02 f303 	lsl.w	r3, r2, r3
 8000368:	43db      	mvns	r3, r3
 800036a:	461a      	mov	r2, r3
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	4013      	ands	r3, r2
 8000370:	60bb      	str	r3, [r7, #8]
            temp |= (0x01 << ((position & 0x07) * 4));  // Output push-pull
 8000372:	697b      	ldr	r3, [r7, #20]
 8000374:	f003 0307 	and.w	r3, r3, #7
 8000378:	009b      	lsls	r3, r3, #2
 800037a:	2201      	movs	r2, #1
 800037c:	fa02 f303 	lsl.w	r3, r2, r3
 8000380:	461a      	mov	r2, r3
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	4313      	orrs	r3, r2
 8000386:	60bb      	str	r3, [r7, #8]

            *config_register = temp;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	68ba      	ldr	r2, [r7, #8]
 800038c:	601a      	str	r2, [r3, #0]
        }

        position++;
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	3301      	adds	r3, #1
 8000392:	617b      	str	r3, [r7, #20]
        GPIO_Pin >>= 1;
 8000394:	887b      	ldrh	r3, [r7, #2]
 8000396:	085b      	lsrs	r3, r3, #1
 8000398:	807b      	strh	r3, [r7, #2]
    while (GPIO_Pin)
 800039a:	887b      	ldrh	r3, [r7, #2]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d1c8      	bne.n	8000332 <setPinToOutput+0x12>
    }
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	371c      	adds	r7, #28
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr

080003ac <ESP_Init>:
uint8_t serverSend(char *html, uint32_t size, uint8_t link_id);

/*****************************************************************************************************************************************/

uint8_t ESP_Init(UART_HandleTypeDef* esp_uart, char* ssid, char* pass)
{
 80003ac:	b590      	push	{r4, r7, lr}
 80003ae:	b087      	sub	sp, #28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
	uint8_t init_stat;

	huart = esp_uart;
 80003b8:	4a49      	ldr	r2, [pc, #292]	@ (80004e0 <ESP_Init+0x134>)
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	6013      	str	r3, [r2, #0]

	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80003be:	4b48      	ldr	r3, [pc, #288]	@ (80004e0 <ESP_Init+0x134>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	68da      	ldr	r2, [r3, #12]
 80003c6:	4b46      	ldr	r3, [pc, #280]	@ (80004e0 <ESP_Init+0x134>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f042 0220 	orr.w	r2, r2, #32
 80003d0:	60da      	str	r2, [r3, #12]

	sendCommand("AT+RST\r\n");
 80003d2:	4844      	ldr	r0, [pc, #272]	@ (80004e4 <ESP_Init+0x138>)
 80003d4:	f000 f894 	bl	8000500 <sendCommand>
//
	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 80003d8:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80003dc:	4842      	ldr	r0, [pc, #264]	@ (80004e8 <ESP_Init+0x13c>)
 80003de:	f000 f8a7 	bl	8000530 <waitForInput>
 80003e2:	4603      	mov	r3, r0
 80003e4:	f083 0301 	eor.w	r3, r3, #1
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d002      	beq.n	80003f4 <ESP_Init+0x48>
	{
		init_stat = ESP_STAT_NOINIT;
 80003ee:	2301      	movs	r3, #1
 80003f0:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 80003f2:	e06f      	b.n	80004d4 <ESP_Init+0x128>
	}

	HAL_Delay(2000);
 80003f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80003f8:	f000 fd7e 	bl	8000ef8 <HAL_Delay>

	sendCommand("AT\r\n");
 80003fc:	483b      	ldr	r0, [pc, #236]	@ (80004ec <ESP_Init+0x140>)
 80003fe:	f000 f87f 	bl	8000500 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000402:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000406:	4838      	ldr	r0, [pc, #224]	@ (80004e8 <ESP_Init+0x13c>)
 8000408:	f000 f892 	bl	8000530 <waitForInput>
 800040c:	4603      	mov	r3, r0
 800040e:	f083 0301 	eor.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <ESP_Init+0x72>
	{
		init_stat = ESP_STAT_NOINIT;
 8000418:	2301      	movs	r3, #1
 800041a:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 800041c:	e05a      	b.n	80004d4 <ESP_Init+0x128>
	}

	sendCommand("AT+CWMODE_CUR=1\r\n");
 800041e:	4834      	ldr	r0, [pc, #208]	@ (80004f0 <ESP_Init+0x144>)
 8000420:	f000 f86e 	bl	8000500 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000424:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000428:	482f      	ldr	r0, [pc, #188]	@ (80004e8 <ESP_Init+0x13c>)
 800042a:	f000 f881 	bl	8000530 <waitForInput>
 800042e:	4603      	mov	r3, r0
 8000430:	f083 0301 	eor.w	r3, r3, #1
 8000434:	b2db      	uxtb	r3, r3
 8000436:	2b00      	cmp	r3, #0
 8000438:	d002      	beq.n	8000440 <ESP_Init+0x94>
	{
		init_stat = ESP_STAT_NOINIT;
 800043a:	2301      	movs	r3, #1
 800043c:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 800043e:	e049      	b.n	80004d4 <ESP_Init+0x128>
	}

	char* cmd = (char*)malloc(strlen("AT+CWJAP_CUR=\"\",\"\"\r\n") + strlen(ssid) + strlen(pass) + 1);
 8000440:	68b8      	ldr	r0, [r7, #8]
 8000442:	f7ff fe8d 	bl	8000160 <strlen>
 8000446:	4604      	mov	r4, r0
 8000448:	6878      	ldr	r0, [r7, #4]
 800044a:	f7ff fe89 	bl	8000160 <strlen>
 800044e:	4603      	mov	r3, r0
 8000450:	4423      	add	r3, r4
 8000452:	3315      	adds	r3, #21
 8000454:	4618      	mov	r0, r3
 8000456:	f001 ff57 	bl	8002308 <malloc>
 800045a:	4603      	mov	r3, r0
 800045c:	613b      	str	r3, [r7, #16]

	sprintf(cmd, "AT+CWJAP_CUR=\"%s\",\"%s\"\r\n", ssid, pass);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	68ba      	ldr	r2, [r7, #8]
 8000462:	4924      	ldr	r1, [pc, #144]	@ (80004f4 <ESP_Init+0x148>)
 8000464:	6938      	ldr	r0, [r7, #16]
 8000466:	f002 f889 	bl	800257c <siprintf>

	sendCommand(cmd);
 800046a:	6938      	ldr	r0, [r7, #16]
 800046c:	f000 f848 	bl	8000500 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000470:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000474:	481c      	ldr	r0, [pc, #112]	@ (80004e8 <ESP_Init+0x13c>)
 8000476:	f000 f85b 	bl	8000530 <waitForInput>
 800047a:	4603      	mov	r3, r0
 800047c:	f083 0301 	eor.w	r3, r3, #1
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <ESP_Init+0xe0>
	{
		init_stat = ESP_STAT_NOINIT;
 8000486:	2301      	movs	r3, #1
 8000488:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 800048a:	e023      	b.n	80004d4 <ESP_Init+0x128>
	}

	sendCommand("AT+CIPMUX=1\r\n");
 800048c:	481a      	ldr	r0, [pc, #104]	@ (80004f8 <ESP_Init+0x14c>)
 800048e:	f000 f837 	bl	8000500 <sendCommand>
	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000492:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000496:	4814      	ldr	r0, [pc, #80]	@ (80004e8 <ESP_Init+0x13c>)
 8000498:	f000 f84a 	bl	8000530 <waitForInput>
 800049c:	4603      	mov	r3, r0
 800049e:	f083 0301 	eor.w	r3, r3, #1
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d002      	beq.n	80004ae <ESP_Init+0x102>
	{
		init_stat = ESP_STAT_NOINIT;
 80004a8:	2301      	movs	r3, #1
 80004aa:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 80004ac:	e012      	b.n	80004d4 <ESP_Init+0x128>
	}

	sendCommand("AT+CIPSERVER=1,80\r\n");
 80004ae:	4813      	ldr	r0, [pc, #76]	@ (80004fc <ESP_Init+0x150>)
 80004b0:	f000 f826 	bl	8000500 <sendCommand>
	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 80004b4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80004b8:	480b      	ldr	r0, [pc, #44]	@ (80004e8 <ESP_Init+0x13c>)
 80004ba:	f000 f839 	bl	8000530 <waitForInput>
 80004be:	4603      	mov	r3, r0
 80004c0:	f083 0301 	eor.w	r3, r3, #1
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d002      	beq.n	80004d0 <ESP_Init+0x124>
	{
		init_stat = ESP_STAT_NOINIT;
 80004ca:	2301      	movs	r3, #1
 80004cc:	75fb      	strb	r3, [r7, #23]
		goto END_INIT;
 80004ce:	e001      	b.n	80004d4 <ESP_Init+0x128>
	}

	init_stat = ESP_STAT_OK;
 80004d0:	2300      	movs	r3, #0
 80004d2:	75fb      	strb	r3, [r7, #23]

END_INIT:
	return init_stat;
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80004d6:	4618      	mov	r0, r3
 80004d8:	371c      	adds	r7, #28
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd90      	pop	{r4, r7, pc}
 80004de:	bf00      	nop
 80004e0:	20000080 	.word	0x20000080
 80004e4:	08003230 	.word	0x08003230
 80004e8:	0800323c 	.word	0x0800323c
 80004ec:	08003244 	.word	0x08003244
 80004f0:	0800324c 	.word	0x0800324c
 80004f4:	08003260 	.word	0x08003260
 80004f8:	0800327c 	.word	0x0800327c
 80004fc:	0800328c 	.word	0x0800328c

08000500 <sendCommand>:

void sendCommand(const char* msg)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(huart, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000508:	4b08      	ldr	r3, [pc, #32]	@ (800052c <sendCommand+0x2c>)
 800050a:	681c      	ldr	r4, [r3, #0]
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f7ff fe27 	bl	8000160 <strlen>
 8000512:	4603      	mov	r3, r0
 8000514:	b29a      	uxth	r2, r3
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	4620      	mov	r0, r4
 800051e:	f001 fd1b 	bl	8001f58 <HAL_UART_Transmit>
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	bf00      	nop
 800052c:	20000080 	.word	0x20000080

08000530 <waitForInput>:

bool waitForInput(const char* input, uint32_t timeout)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
	char 	input_ch = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	73fb      	strb	r3, [r7, #15]
	uint8_t i 		 = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	75fb      	strb	r3, [r7, #23]
	bool 	ret 	 = false;
 8000542:	2300      	movs	r3, #0
 8000544:	75bb      	strb	r3, [r7, #22]

	uint32_t start_tick = HAL_GetTick();
 8000546:	f000 fccd 	bl	8000ee4 <HAL_GetTick>
 800054a:	6138      	str	r0, [r7, #16]

	while ((HAL_GetTick() - start_tick) < timeout)
 800054c:	e022      	b.n	8000594 <waitForInput+0x64>
	{
		if (RingBuffer_Read(&ring_buf, (uint8_t*)&input_ch, 1))
 800054e:	f107 030f 	add.w	r3, r7, #15
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	4816      	ldr	r0, [pc, #88]	@ (80005b0 <waitForInput+0x80>)
 8000558:	f000 fad2 	bl	8000b00 <RingBuffer_Read>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d018      	beq.n	8000594 <waitForInput+0x64>
		{
			if (input[i++] != input_ch)
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	75fa      	strb	r2, [r7, #23]
 8000568:	461a      	mov	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	429a      	cmp	r2, r3
 8000574:	d001      	beq.n	800057a <waitForInput+0x4a>
			{
				i = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	75fb      	strb	r3, [r7, #23]
			}

			if (i == strlen(input))
 800057a:	7dfc      	ldrb	r4, [r7, #23]
 800057c:	6878      	ldr	r0, [r7, #4]
 800057e:	f7ff fdef 	bl	8000160 <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	429c      	cmp	r4, r3
 8000586:	d102      	bne.n	800058e <waitForInput+0x5e>
			{
				ret = true;
 8000588:	2301      	movs	r3, #1
 800058a:	75bb      	strb	r3, [r7, #22]
				break;
 800058c:	e00a      	b.n	80005a4 <waitForInput+0x74>
			}

			start_tick = HAL_GetTick();
 800058e:	f000 fca9 	bl	8000ee4 <HAL_GetTick>
 8000592:	6138      	str	r0, [r7, #16]
	while ((HAL_GetTick() - start_tick) < timeout)
 8000594:	f000 fca6 	bl	8000ee4 <HAL_GetTick>
 8000598:	4602      	mov	r2, r0
 800059a:	693b      	ldr	r3, [r7, #16]
 800059c:	1ad3      	subs	r3, r2, r3
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d8d4      	bhi.n	800054e <waitForInput+0x1e>
		}
	}

	return ret;
 80005a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	371c      	adds	r7, #28
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000084 	.word	0x20000084

080005b4 <serverSend>:

uint8_t serverSend(char *html, uint32_t size, uint8_t link_id)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	@ 0x30
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	60b9      	str	r1, [r7, #8]
 80005be:	4613      	mov	r3, r2
 80005c0:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	char 	cmd[25];

	sprintf(cmd, "AT+CIPSEND=%d,%d\r\n", link_id, size);
 80005c2:	79fa      	ldrb	r2, [r7, #7]
 80005c4:	f107 0014 	add.w	r0, r7, #20
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	4922      	ldr	r1, [pc, #136]	@ (8000654 <serverSend+0xa0>)
 80005cc:	f001 ffd6 	bl	800257c <siprintf>
	sendCommand(cmd);
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff ff93 	bl	8000500 <sendCommand>

	if (!waitForInput(">", ESP_RESPONSE_TIMEOUT))
 80005da:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80005de:	481e      	ldr	r0, [pc, #120]	@ (8000658 <serverSend+0xa4>)
 80005e0:	f7ff ffa6 	bl	8000530 <waitForInput>
 80005e4:	4603      	mov	r3, r0
 80005e6:	f083 0301 	eor.w	r3, r3, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <serverSend+0x44>
	{
		ret = COMMAND_ERR;
 80005f0:	2301      	movs	r3, #1
 80005f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		goto END;
 80005f6:	e026      	b.n	8000646 <serverSend+0x92>
	}

	sendCommand(html);
 80005f8:	68f8      	ldr	r0, [r7, #12]
 80005fa:	f7ff ff81 	bl	8000500 <sendCommand>

	if (!waitForInput("SEND OK", ESP_RESPONSE_TIMEOUT))
 80005fe:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000602:	4816      	ldr	r0, [pc, #88]	@ (800065c <serverSend+0xa8>)
 8000604:	f7ff ff94 	bl	8000530 <waitForInput>
 8000608:	4603      	mov	r3, r0
 800060a:	f083 0301 	eor.w	r3, r3, #1
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b00      	cmp	r3, #0
 8000612:	d003      	beq.n	800061c <serverSend+0x68>
	{
		ret = COMMAND_ERR;
 8000614:	2301      	movs	r3, #1
 8000616:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		goto END;
 800061a:	e014      	b.n	8000646 <serverSend+0x92>
	}

	sendCommand("AT+CIPCLOSE=5\r\n");
 800061c:	4810      	ldr	r0, [pc, #64]	@ (8000660 <serverSend+0xac>)
 800061e:	f7ff ff6f 	bl	8000500 <sendCommand>

	if (!waitForInput("OK\r\n", ESP_RESPONSE_TIMEOUT))
 8000622:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000626:	480f      	ldr	r0, [pc, #60]	@ (8000664 <serverSend+0xb0>)
 8000628:	f7ff ff82 	bl	8000530 <waitForInput>
 800062c:	4603      	mov	r3, r0
 800062e:	f083 0301 	eor.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <serverSend+0x8c>
	{
		ret = COMMAND_ERR;
 8000638:	2301      	movs	r3, #1
 800063a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		goto END;
 800063e:	e002      	b.n	8000646 <serverSend+0x92>
	}

	ret = COMMAND_OK;
 8000640:	2300      	movs	r3, #0
 8000642:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
END:
	return ret;
 8000646:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800064a:	4618      	mov	r0, r3
 800064c:	3730      	adds	r7, #48	@ 0x30
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	080032a0 	.word	0x080032a0
 8000658:	080032b4 	.word	0x080032b4
 800065c:	080032b8 	.word	0x080032b8
 8000660:	080032c0 	.word	0x080032c0
 8000664:	0800323c 	.word	0x0800323c

08000668 <ESP_ProcessInput>:
{
	return RingBuffer_GetDataLength(&ring_buf) > 0;
}

void ESP_ProcessInput(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	if (waitForInput("+IPD,", ESP_IPD_TIMEOUT))
 800066c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000670:	4804      	ldr	r0, [pc, #16]	@ (8000684 <ESP_ProcessInput+0x1c>)
 8000672:	f7ff ff5d 	bl	8000530 <waitForInput>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <ESP_ProcessInput+0x18>
	{
		processIPD();
 800067c:	f000 f804 	bl	8000688 <processIPD>
	}
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	080032d0 	.word	0x080032d0

08000688 <processIPD>:

void processIPD(void)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
	char input_buf[11];

	receiveDataUntil(input_buf, sizeof(input_buf), ',', ESP_IPD_TIMEOUT); //Fetching link ID
 800068e:	1d38      	adds	r0, r7, #4
 8000690:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000694:	222c      	movs	r2, #44	@ 0x2c
 8000696:	210b      	movs	r1, #11
 8000698:	f000 f8aa 	bl	80007f0 <receiveDataUntil>

	uint8_t link_id = atoi(input_buf);
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fe2e 	bl	8002300 <atoi>
 80006a4:	4603      	mov	r3, r0
 80006a6:	75fb      	strb	r3, [r7, #23]

	receiveDataUntil(input_buf, sizeof(input_buf), ':', ESP_IPD_TIMEOUT); //Fetching data length
 80006a8:	1d38      	adds	r0, r7, #4
 80006aa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006ae:	223a      	movs	r2, #58	@ 0x3a
 80006b0:	210b      	movs	r1, #11
 80006b2:	f000 f89d 	bl	80007f0 <receiveDataUntil>

	uint32_t data_len = atoi(input_buf);
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fe21 	bl	8002300 <atoi>
 80006be:	4603      	mov	r3, r0
 80006c0:	613b      	str	r3, [r7, #16]

	//Skipping Request method
	receiveDataUntil(input_buf, sizeof(input_buf), ' ', ESP_IPD_TIMEOUT);
 80006c2:	1d38      	adds	r0, r7, #4
 80006c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006c8:	2220      	movs	r2, #32
 80006ca:	210b      	movs	r1, #11
 80006cc:	f000 f890 	bl	80007f0 <receiveDataUntil>

	//Getting prefix URL
	receiveDataUntil(input_buf, sizeof(input_buf), ' ', ESP_IPD_TIMEOUT);
 80006d0:	1d38      	adds	r0, r7, #4
 80006d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80006d6:	2220      	movs	r2, #32
 80006d8:	210b      	movs	r1, #11
 80006da:	f000 f889 	bl	80007f0 <receiveDataUntil>

	//Free the ring buffer
	RingBuffer_Init(&ring_buf);
 80006de:	4811      	ldr	r0, [pc, #68]	@ (8000724 <processIPD+0x9c>)
 80006e0:	f000 f9de 	bl	8000aa0 <RingBuffer_Init>

	if (!strcmp(input_buf, "/check_dht"))
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4910      	ldr	r1, [pc, #64]	@ (8000728 <processIPD+0xa0>)
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fd2f 	bl	800014c <strcmp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d106      	bne.n	8000702 <processIPD+0x7a>
	{
		serviceDHT(input_buf, link_id);
 80006f4:	7dfa      	ldrb	r2, [r7, #23]
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	4611      	mov	r1, r2
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 f818 	bl	8000730 <serviceDHT>
	}
	else
	{
		serverSend(unknown_html, strlen(unknown_html), link_id);
	}
}
 8000700:	e00c      	b.n	800071c <processIPD+0x94>
		serverSend(unknown_html, strlen(unknown_html), link_id);
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <processIPD+0xa4>)
 8000704:	681c      	ldr	r4, [r3, #0]
 8000706:	4b09      	ldr	r3, [pc, #36]	@ (800072c <processIPD+0xa4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4618      	mov	r0, r3
 800070c:	f7ff fd28 	bl	8000160 <strlen>
 8000710:	4601      	mov	r1, r0
 8000712:	7dfb      	ldrb	r3, [r7, #23]
 8000714:	461a      	mov	r2, r3
 8000716:	4620      	mov	r0, r4
 8000718:	f7ff ff4c 	bl	80005b4 <serverSend>
}
 800071c:	bf00      	nop
 800071e:	371c      	adds	r7, #28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	20000084 	.word	0x20000084
 8000728:	080032d8 	.word	0x080032d8
 800072c:	20000004 	.word	0x20000004

08000730 <serviceDHT>:

void serviceDHT(char* prefix_url, uint8_t link_id)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b08d      	sub	sp, #52	@ 0x34
 8000734:	af02      	add	r7, sp, #8
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	460b      	mov	r3, r1
 800073a:	70fb      	strb	r3, [r7, #3]
	char*    html;
	uint32_t html_size;
	uint8_t  dht_data[5];
	char     temp_int[4], temp_dec[4], rh_int[4], rh_dec[4];

	DHT11_Data(dht_data);
 800073c:	f107 0318 	add.w	r3, r7, #24
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fd15 	bl	8000170 <DHT11_Data>

	html_size = (strlen(check_dht_template) - 8) + sprintf(temp_int, "%d" ,dht_data[2]) + sprintf(temp_dec, "%d", dht_data[3])
 8000746:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <serviceDHT+0xb8>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fd08 	bl	8000160 <strlen>
 8000750:	4604      	mov	r4, r0
 8000752:	7ebb      	ldrb	r3, [r7, #26]
 8000754:	461a      	mov	r2, r3
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4924      	ldr	r1, [pc, #144]	@ (80007ec <serviceDHT+0xbc>)
 800075c:	4618      	mov	r0, r3
 800075e:	f001 ff0d 	bl	800257c <siprintf>
 8000762:	4603      	mov	r3, r0
 8000764:	441c      	add	r4, r3
 8000766:	7efb      	ldrb	r3, [r7, #27]
 8000768:	461a      	mov	r2, r3
 800076a:	f107 0310 	add.w	r3, r7, #16
 800076e:	491f      	ldr	r1, [pc, #124]	@ (80007ec <serviceDHT+0xbc>)
 8000770:	4618      	mov	r0, r3
 8000772:	f001 ff03 	bl	800257c <siprintf>
 8000776:	4603      	mov	r3, r0
 8000778:	441c      	add	r4, r3
				+ sprintf(rh_int, "%d" ,dht_data[0]) + sprintf(rh_dec, "%d", dht_data[1]) + 1;
 800077a:	7e3b      	ldrb	r3, [r7, #24]
 800077c:	461a      	mov	r2, r3
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	491a      	ldr	r1, [pc, #104]	@ (80007ec <serviceDHT+0xbc>)
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fef9 	bl	800257c <siprintf>
 800078a:	4603      	mov	r3, r0
 800078c:	441c      	add	r4, r3
 800078e:	7e7b      	ldrb	r3, [r7, #25]
 8000790:	461a      	mov	r2, r3
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	4915      	ldr	r1, [pc, #84]	@ (80007ec <serviceDHT+0xbc>)
 8000798:	4618      	mov	r0, r3
 800079a:	f001 feef 	bl	800257c <siprintf>
 800079e:	4603      	mov	r3, r0
 80007a0:	4423      	add	r3, r4
	html_size = (strlen(check_dht_template) - 8) + sprintf(temp_int, "%d" ,dht_data[2]) + sprintf(temp_dec, "%d", dht_data[3])
 80007a2:	3b07      	subs	r3, #7
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24

	html	  = (char*)malloc(html_size);
 80007a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80007a8:	f001 fdae 	bl	8002308 <malloc>
 80007ac:	4603      	mov	r3, r0
 80007ae:	623b      	str	r3, [r7, #32]

	sprintf(html, check_dht_template, temp_int, temp_dec, rh_int, rh_dec);
 80007b0:	4b0d      	ldr	r3, [pc, #52]	@ (80007e8 <serviceDHT+0xb8>)
 80007b2:	6819      	ldr	r1, [r3, #0]
 80007b4:	f107 0010 	add.w	r0, r7, #16
 80007b8:	f107 0214 	add.w	r2, r7, #20
 80007bc:	f107 0308 	add.w	r3, r7, #8
 80007c0:	9301      	str	r3, [sp, #4]
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	4603      	mov	r3, r0
 80007ca:	6a38      	ldr	r0, [r7, #32]
 80007cc:	f001 fed6 	bl	800257c <siprintf>

	serverSend(html, html_size - 1, link_id);
 80007d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007d2:	3b01      	subs	r3, #1
 80007d4:	78fa      	ldrb	r2, [r7, #3]
 80007d6:	4619      	mov	r1, r3
 80007d8:	6a38      	ldr	r0, [r7, #32]
 80007da:	f7ff feeb 	bl	80005b4 <serverSend>
}
 80007de:	bf00      	nop
 80007e0:	372c      	adds	r7, #44	@ 0x2c
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd90      	pop	{r4, r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000000 	.word	0x20000000
 80007ec:	080032e4 	.word	0x080032e4

080007f0 <receiveDataUntil>:

uint32_t receiveDataUntil(char* input_buf, uint32_t buf_size, char end_ch, uint32_t timeout)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71fb      	strb	r3, [r7, #7]
	char      input_ch;
	uint32_t  i = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	61fb      	str	r3, [r7, #28]

	uint32_t start_tick = HAL_GetTick();
 8000804:	f000 fb6e 	bl	8000ee4 <HAL_GetTick>
 8000808:	61b8      	str	r0, [r7, #24]

	while ((HAL_GetTick() - start_tick) < timeout
 800080a:	e01e      	b.n	800084a <receiveDataUntil+0x5a>
		 && i < buf_size)
	{
		if (RingBuffer_Read(&ring_buf, (uint8_t*)&input_ch, 1))
 800080c:	f107 0317 	add.w	r3, r7, #23
 8000810:	2201      	movs	r2, #1
 8000812:	4619      	mov	r1, r3
 8000814:	4815      	ldr	r0, [pc, #84]	@ (800086c <receiveDataUntil+0x7c>)
 8000816:	f000 f973 	bl	8000b00 <RingBuffer_Read>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d014      	beq.n	800084a <receiveDataUntil+0x5a>
		{
			if (input_ch != end_ch)
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	79fa      	ldrb	r2, [r7, #7]
 8000824:	429a      	cmp	r2, r3
 8000826:	d007      	beq.n	8000838 <receiveDataUntil+0x48>
			{
				input_buf[i++] = input_ch;
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	61fa      	str	r2, [r7, #28]
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	7dfa      	ldrb	r2, [r7, #23]
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	e005      	b.n	8000844 <receiveDataUntil+0x54>
			}
			else
			{
				input_buf[i] = '\0';
 8000838:	68fa      	ldr	r2, [r7, #12]
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	4413      	add	r3, r2
 800083e:	2200      	movs	r2, #0
 8000840:	701a      	strb	r2, [r3, #0]
				break;
 8000842:	e00e      	b.n	8000862 <receiveDataUntil+0x72>
			}

			start_tick = HAL_GetTick();
 8000844:	f000 fb4e 	bl	8000ee4 <HAL_GetTick>
 8000848:	61b8      	str	r0, [r7, #24]
	while ((HAL_GetTick() - start_tick) < timeout
 800084a:	f000 fb4b 	bl	8000ee4 <HAL_GetTick>
 800084e:	4602      	mov	r2, r0
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	1ad3      	subs	r3, r2, r3
		 && i < buf_size)
 8000854:	683a      	ldr	r2, [r7, #0]
 8000856:	429a      	cmp	r2, r3
 8000858:	d903      	bls.n	8000862 <receiveDataUntil+0x72>
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	429a      	cmp	r2, r3
 8000860:	d3d4      	bcc.n	800080c <receiveDataUntil+0x1c>
		}
	}

	return i;
 8000862:	69fb      	ldr	r3, [r7, #28]
}
 8000864:	4618      	mov	r0, r3
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000084 	.word	0x20000084

08000870 <ESP_UART_IRQHandler>:


void ESP_UART_IRQHandler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
	uint32_t usart_sr_reg = huart->Instance->SR;
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <ESP_UART_IRQHandler+0x3c>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	607b      	str	r3, [r7, #4]
	uint8_t  data;

	if ((usart_sr_reg & USART_SR_RXNE) != RESET)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0320 	and.w	r3, r3, #32
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00b      	beq.n	80008a2 <ESP_UART_IRQHandler+0x32>
	{
		data = (uint8_t)(huart->Instance->DR);
 800088a:	4b08      	ldr	r3, [pc, #32]	@ (80008ac <ESP_UART_IRQHandler+0x3c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	70fb      	strb	r3, [r7, #3]
		RingBuffer_Write(&ring_buf, &data, 1);
 8000896:	1cfb      	adds	r3, r7, #3
 8000898:	2201      	movs	r2, #1
 800089a:	4619      	mov	r1, r3
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <ESP_UART_IRQHandler+0x40>)
 800089e:	f000 f963 	bl	8000b68 <RingBuffer_Write>
	}
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000080 	.word	0x20000080
 80008b0:	20000084 	.word	0x20000084

080008b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f000 fabb 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f821 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f889 	bl	80009d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008c6:	f000 f85d 	bl	8000984 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t esp_stat = ESP_Init(&huart1, "POCO M4 Pro 5G","12332180");
 80008ca:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <main+0x44>)
 80008cc:	490b      	ldr	r1, [pc, #44]	@ (80008fc <main+0x48>)
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <main+0x4c>)
 80008d0:	f7ff fd6c 	bl	80003ac <ESP_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  HAL_DBGMCU_EnableDBGSleepMode();
 80008d8:	f000 fb4e 	bl	8000f78 <HAL_DBGMCU_EnableDBGSleepMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  if (esp_stat == ESP_STAT_OK)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d105      	bne.n	80008ee <main+0x3a>
  {
	  while (1)
	  {
		  enterSleepMode();
 80008e2:	f000 f8b5 	bl	8000a50 <enterSleepMode>

		  ESP_ProcessInput();
 80008e6:	f7ff febf 	bl	8000668 <ESP_ProcessInput>
		  enterSleepMode();
 80008ea:	bf00      	nop
 80008ec:	e7f9      	b.n	80008e2 <main+0x2e>
 80008ee:	2300      	movs	r3, #0
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	080032e8 	.word	0x080032e8
 80008fc:	080032f4 	.word	0x080032f4
 8000900:	20000288 	.word	0x20000288

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b090      	sub	sp, #64	@ 0x40
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2228      	movs	r2, #40	@ 0x28
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f001 fe52 	bl	80025bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000926:	2302      	movs	r3, #2
 8000928:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092a:	2301      	movs	r3, #1
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800092e:	2310      	movs	r3, #16
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000932:	2302      	movs	r3, #2
 8000934:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000936:	2300      	movs	r3, #0
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800093a:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0318 	add.w	r3, r7, #24
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fea7 	bl	8001698 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000950:	f000 f8a0 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2101      	movs	r1, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f915 	bl	8001b9c <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000978:	f000 f88c 	bl	8000a94 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3740      	adds	r7, #64	@ 0x40
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <MX_USART1_UART_Init+0x50>)
 800098c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 8000990:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000994:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a2:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009aa:	220c      	movs	r2, #12
 80009ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ae:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ba:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <MX_USART1_UART_Init+0x4c>)
 80009bc:	f001 fa7c 	bl	8001eb8 <HAL_UART_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009c6:	f000 f865 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000288 	.word	0x20000288
 80009d4:	40013800 	.word	0x40013800

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_GPIO_Init+0x5c>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a10      	ldr	r2, [pc, #64]	@ (8000a34 <MX_GPIO_Init+0x5c>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_GPIO_Init+0x5c>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2102      	movs	r1, #2
 8000a08:	480b      	ldr	r0, [pc, #44]	@ (8000a38 <MX_GPIO_Init+0x60>)
 8000a0a:	f000 fe11 	bl	8001630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0308 	add.w	r3, r7, #8
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <MX_GPIO_Init+0x60>)
 8000a26:	f000 fbc3 	bl	80011b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a2a:	bf00      	nop
 8000a2c:	3718      	adds	r7, #24
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40010800 	.word	0x40010800

08000a3c <MX_GPIO_DeInit>:

/* USER CODE BEGIN 4 */

static void MX_GPIO_DeInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1);
 8000a40:	2102      	movs	r1, #2
 8000a42:	4802      	ldr	r0, [pc, #8]	@ (8000a4c <MX_GPIO_DeInit+0x10>)
 8000a44:	f000 fd38 	bl	80014b8 <HAL_GPIO_DeInit>
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	40010800 	.word	0x40010800

08000a50 <enterSleepMode>:

static void enterSleepMode(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
	MX_GPIO_DeInit();
 8000a56:	f7ff fff1 	bl	8000a3c <MX_GPIO_DeInit>

	HAL_SuspendTick();
 8000a5a:	f000 fa71 	bl	8000f40 <HAL_SuspendTick>

	__HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <enterSleepMode+0x40>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	@ (8000a90 <enterSleepMode+0x40>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	@ (8000a90 <enterSleepMode+0x40>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

	HAL_PWR_EnterSLEEPMode(0, PWR_SLEEPENTRY_WFI);
 8000a76:	2101      	movs	r1, #1
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 fdf1 	bl	8001660 <HAL_PWR_EnterSLEEPMode>

	HAL_ResumeTick();
 8000a7e:	f000 fa6d 	bl	8000f5c <HAL_ResumeTick>

	MX_GPIO_Init();
 8000a82:	f7ff ffa9 	bl	80009d8 <MX_GPIO_Init>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <RingBuffer_Init>:
 */

#include "ringbuffer.h"

void RingBuffer_Init(RingBuffer* buf)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	buf->head = buf->tail = 0;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	805a      	strh	r2, [r3, #2]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	885a      	ldrh	r2, [r3, #2]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	801a      	strh	r2, [r3, #0]
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr

08000ac0 <RingBuffer_GetDataLength>:

uint16_t RingBuffer_GetDataLength(const RingBuffer* buf)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	uint16_t length;

	if (buf->head >= buf->tail)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	881a      	ldrh	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	d306      	bcc.n	8000ae2 <RingBuffer_GetDataLength+0x22>
	{
		length = buf->head - buf->tail;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	881a      	ldrh	r2, [r3, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	885b      	ldrh	r3, [r3, #2]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	81fb      	strh	r3, [r7, #14]
 8000ae0:	e008      	b.n	8000af4 <RingBuffer_GetDataLength+0x34>
	}
	else
	{
		length = RING_BUF_SIZE - 1 - (buf->tail - buf->head); // -1 by reason there's an additional element to check whether an array is empty
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	881a      	ldrh	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	885b      	ldrh	r3, [r3, #2]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8000af2:	81fb      	strh	r3, [r7, #14]
	}

	return length;
 8000af4:	89fb      	ldrh	r3, [r7, #14]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <RingBuffer_Read>:

uint16_t RingBuffer_Read(RingBuffer* buf, uint8_t* data, uint16_t size)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b087      	sub	sp, #28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	80fb      	strh	r3, [r7, #6]
	uint16_t read_count = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	82fb      	strh	r3, [r7, #22]

	while ((read_count < size) && (buf->head != buf->tail)) //buf->head == buf->tail in case of the ring buffer is empty
 8000b12:	e019      	b.n	8000b48 <RingBuffer_Read+0x48>
	{
		data[read_count++] = buf->buffer[buf->tail];
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	885b      	ldrh	r3, [r3, #2]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	8afb      	ldrh	r3, [r7, #22]
 8000b1c:	1c5a      	adds	r2, r3, #1
 8000b1e:	82fa      	strh	r2, [r7, #22]
 8000b20:	461a      	mov	r2, r3
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	4413      	add	r3, r2
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	440a      	add	r2, r1
 8000b2a:	7912      	ldrb	r2, [r2, #4]
 8000b2c:	701a      	strb	r2, [r3, #0]
		buf->tail 		   = (buf->tail + 1) % RING_BUF_SIZE;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	885b      	ldrh	r3, [r3, #2]
 8000b32:	3301      	adds	r3, #1
 8000b34:	425a      	negs	r2, r3
 8000b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b3e:	bf58      	it	pl
 8000b40:	4253      	negpl	r3, r2
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	805a      	strh	r2, [r3, #2]
	while ((read_count < size) && (buf->head != buf->tail)) //buf->head == buf->tail in case of the ring buffer is empty
 8000b48:	8afa      	ldrh	r2, [r7, #22]
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d205      	bcs.n	8000b5c <RingBuffer_Read+0x5c>
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	881a      	ldrh	r2, [r3, #0]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	885b      	ldrh	r3, [r3, #2]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d1db      	bne.n	8000b14 <RingBuffer_Read+0x14>
	}

	return read_count;
 8000b5c:	8afb      	ldrh	r3, [r7, #22]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	371c      	adds	r7, #28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <RingBuffer_Write>:

uint8_t RingBuffer_Write(RingBuffer* buf, const uint8_t* data, uint16_t size)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b086      	sub	sp, #24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	4613      	mov	r3, r2
 8000b74:	80fb      	strh	r3, [r7, #6]
	uint16_t write_count = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	82fb      	strh	r3, [r7, #22]
	uint8_t  ret;

	if (((buf->head + 1) % RING_BUF_SIZE) == buf->tail)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	425a      	negs	r2, r3
 8000b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000b8a:	bf58      	it	pl
 8000b8c:	4253      	negpl	r3, r2
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	8852      	ldrh	r2, [r2, #2]
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d102      	bne.n	8000b9c <RingBuffer_Write+0x34>
	{
		ret = RING_BUF_FULL;
 8000b96:	2301      	movs	r3, #1
 8000b98:	757b      	strb	r3, [r7, #21]
 8000b9a:	e02c      	b.n	8000bf6 <RingBuffer_Write+0x8e>
	}
	else if ((RING_BUF_SIZE - 1 - RingBuffer_GetDataLength(buf)) < size) // -1 by reason there's an additional element to check whether an array is empty
 8000b9c:	68f8      	ldr	r0, [r7, #12]
 8000b9e:	f7ff ff8f 	bl	8000ac0 <RingBuffer_GetDataLength>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f5c3 73ff 	rsb	r3, r3, #510	@ 0x1fe
 8000ba8:	3301      	adds	r3, #1
 8000baa:	88fa      	ldrh	r2, [r7, #6]
 8000bac:	4293      	cmp	r3, r2
 8000bae:	da1c      	bge.n	8000bea <RingBuffer_Write+0x82>
	{
		ret = RING_BUF_NO_SPACE;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	757b      	strb	r3, [r7, #21]
 8000bb4:	e01f      	b.n	8000bf6 <RingBuffer_Write+0x8e>
	}
	else
	{
		while (write_count < size)
		{
			buf->buffer[buf->head] = data[write_count++];
 8000bb6:	8afb      	ldrh	r3, [r7, #22]
 8000bb8:	1c5a      	adds	r2, r3, #1
 8000bba:	82fa      	strh	r2, [r7, #22]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	8812      	ldrh	r2, [r2, #0]
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	781a      	ldrb	r2, [r3, #0]
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	440b      	add	r3, r1
 8000bce:	711a      	strb	r2, [r3, #4]
			buf->head 	   		   = (buf->head + 1) % RING_BUF_SIZE;
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	425a      	negs	r2, r3
 8000bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000be0:	bf58      	it	pl
 8000be2:	4253      	negpl	r3, r2
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	801a      	strh	r2, [r3, #0]
		while (write_count < size)
 8000bea:	8afa      	ldrh	r2, [r7, #22]
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d3e1      	bcc.n	8000bb6 <RingBuffer_Write+0x4e>
		}

		ret = RING_BUF_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	757b      	strb	r3, [r7, #21]
	}

	return ret;
 8000bf6:	7d7b      	ldrb	r3, [r7, #21]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3718      	adds	r7, #24
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c06:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	4a14      	ldr	r2, [pc, #80]	@ (8000c5c <HAL_MspInit+0x5c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6193      	str	r3, [r2, #24]
 8000c12:	4b12      	ldr	r3, [pc, #72]	@ (8000c5c <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
 8000c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	4a0e      	ldr	r2, [pc, #56]	@ (8000c5c <HAL_MspInit+0x5c>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c28:	61d3      	str	r3, [r2, #28]
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <HAL_MspInit+0x60>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	60fb      	str	r3, [r7, #12]
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	4a04      	ldr	r2, [pc, #16]	@ (8000c60 <HAL_MspInit+0x60>)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010000 	.word	0x40010000

08000c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a20      	ldr	r2, [pc, #128]	@ (8000d00 <HAL_UART_MspInit+0x9c>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d139      	bne.n	8000cf8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c84:	4b1f      	ldr	r3, [pc, #124]	@ (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a1e      	ldr	r2, [pc, #120]	@ (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b1c      	ldr	r3, [pc, #112]	@ (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9c:	4b19      	ldr	r3, [pc, #100]	@ (8000d04 <HAL_UART_MspInit+0xa0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a18      	ldr	r2, [pc, #96]	@ (8000d04 <HAL_UART_MspInit+0xa0>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b16      	ldr	r3, [pc, #88]	@ (8000d04 <HAL_UART_MspInit+0xa0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0304 	and.w	r3, r3, #4
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <HAL_UART_MspInit+0xa4>)
 8000cca:	f000 fa71 	bl	80011b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4809      	ldr	r0, [pc, #36]	@ (8000d08 <HAL_UART_MspInit+0xa4>)
 8000ce4:	f000 fa64 	bl	80011b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2100      	movs	r1, #0
 8000cec:	2025      	movs	r0, #37	@ 0x25
 8000cee:	f000 fa28 	bl	8001142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cf2:	2025      	movs	r0, #37	@ 0x25
 8000cf4:	f000 fa41 	bl	800117a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40013800 	.word	0x40013800
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010800 	.word	0x40010800

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d10:	bf00      	nop
 8000d12:	e7fd      	b.n	8000d10 <NMI_Handler+0x4>

08000d14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d18:	bf00      	nop
 8000d1a:	e7fd      	b.n	8000d18 <HardFault_Handler+0x4>

08000d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d20:	bf00      	nop
 8000d22:	e7fd      	b.n	8000d20 <MemManage_Handler+0x4>

08000d24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <BusFault_Handler+0x4>

08000d2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <UsageFault_Handler+0x4>

08000d34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bc80      	pop	{r7}
 8000d3e:	4770      	bx	lr

08000d40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr

08000d4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr

08000d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d5c:	f000 f8b0 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	ESP_UART_IRQHandler();
 8000d68:	f7ff fd82 	bl	8000870 <ESP_UART_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f001 fc24 	bl	80025ec <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20005000 	.word	0x20005000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	200002d0 	.word	0x200002d0
 8000dd8:	20000420 	.word	0x20000420

08000ddc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr

08000de8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de8:	f7ff fff8 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dee:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000df0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e04:	4c09      	ldr	r4, [pc, #36]	@ (8000e2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f001 fbf1 	bl	80025f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e16:	f7ff fd4d 	bl	80008b4 <main>
  bx lr
 8000e1a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000e24:	08003474 	.word	0x08003474
  ldr r2, =_sbss
 8000e28:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000e2c:	20000420 	.word	0x20000420

08000e30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC1_2_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e38:	4b08      	ldr	r3, [pc, #32]	@ (8000e5c <HAL_Init+0x28>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a07      	ldr	r2, [pc, #28]	@ (8000e5c <HAL_Init+0x28>)
 8000e3e:	f043 0310 	orr.w	r3, r3, #16
 8000e42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e44:	2003      	movs	r0, #3
 8000e46:	f000 f971 	bl	800112c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f808 	bl	8000e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e50:	f7ff fed6 	bl	8000c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40022000 	.word	0x40022000

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e68:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_InitTick+0x54>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b12      	ldr	r3, [pc, #72]	@ (8000eb8 <HAL_InitTick+0x58>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f989 	bl	8001196 <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f951 	bl	8001142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <HAL_InitTick+0x5c>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	20000010 	.word	0x20000010
 8000ebc:	2000000c 	.word	0x2000000c

08000ec0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_IncTick+0x1c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a03      	ldr	r2, [pc, #12]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	20000010 	.word	0x20000010
 8000ee0:	200002d4 	.word	0x200002d4

08000ee4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b02      	ldr	r3, [pc, #8]	@ (8000ef4 <HAL_GetTick+0x10>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	200002d4 	.word	0x200002d4

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff fff0 	bl	8000ee4 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffe0 	bl	8000ee4 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000010 	.word	0x20000010

08000f40 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f44:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <HAL_SuspendTick+0x18>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a03      	ldr	r2, [pc, #12]	@ (8000f58 <HAL_SuspendTick+0x18>)
 8000f4a:	f023 0302 	bic.w	r3, r3, #2
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <HAL_ResumeTick+0x18>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a03      	ldr	r2, [pc, #12]	@ (8000f74 <HAL_ResumeTick+0x18>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	e000e010 	.word	0xe000e010

08000f78 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	4a03      	ldr	r2, [pc, #12]	@ (8000f90 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	6053      	str	r3, [r2, #4]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	e0042000 	.word	0xe0042000

08000f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc6:	4a04      	ldr	r2, [pc, #16]	@ (8000fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	60d3      	str	r3, [r2, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe0:	4b04      	ldr	r3, [pc, #16]	@ (8000ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	0a1b      	lsrs	r3, r3, #8
 8000fe6:	f003 0307 	and.w	r3, r3, #7
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	f003 021f 	and.w	r2, r3, #31
 8001010:	4906      	ldr	r1, [pc, #24]	@ (800102c <__NVIC_EnableIRQ+0x34>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	095b      	lsrs	r3, r3, #5
 8001018:	2001      	movs	r0, #1
 800101a:	fa00 f202 	lsl.w	r2, r0, r2
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	@ (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	@ (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	bc80      	pop	{r7}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	@ 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010f8:	d301      	bcc.n	80010fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010fa:	2301      	movs	r3, #1
 80010fc:	e00f      	b.n	800111e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001128 <SysTick_Config+0x40>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3b01      	subs	r3, #1
 8001104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001106:	210f      	movs	r1, #15
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	f7ff ff90 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SysTick_Config+0x40>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <SysTick_Config+0x40>)
 8001118:	2207      	movs	r2, #7
 800111a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010

0800112c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ff2d 	bl	8000f94 <__NVIC_SetPriorityGrouping>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001142:	b580      	push	{r7, lr}
 8001144:	b086      	sub	sp, #24
 8001146:	af00      	add	r7, sp, #0
 8001148:	4603      	mov	r3, r0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001154:	f7ff ff42 	bl	8000fdc <__NVIC_GetPriorityGrouping>
 8001158:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68b9      	ldr	r1, [r7, #8]
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff90 	bl	8001084 <NVIC_EncodePriority>
 8001164:	4602      	mov	r2, r0
 8001166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116a:	4611      	mov	r1, r2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff5f 	bl	8001030 <__NVIC_SetPriority>
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff35 	bl	8000ff8 <__NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff ffa2 	bl	80010e8 <SysTick_Config>
 80011a4:	4603      	mov	r3, r0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b08b      	sub	sp, #44	@ 0x2c
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ba:	2300      	movs	r3, #0
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011be:	2300      	movs	r3, #0
 80011c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c2:	e169      	b.n	8001498 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011c4:	2201      	movs	r2, #1
 80011c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	69fa      	ldr	r2, [r7, #28]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	429a      	cmp	r2, r3
 80011de:	f040 8158 	bne.w	8001492 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001450 <HAL_GPIO_Init+0x2a0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d05e      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011ec:	4a98      	ldr	r2, [pc, #608]	@ (8001450 <HAL_GPIO_Init+0x2a0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d875      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011f2:	4a98      	ldr	r2, [pc, #608]	@ (8001454 <HAL_GPIO_Init+0x2a4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d058      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 80011f8:	4a96      	ldr	r2, [pc, #600]	@ (8001454 <HAL_GPIO_Init+0x2a4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d86f      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 80011fe:	4a96      	ldr	r2, [pc, #600]	@ (8001458 <HAL_GPIO_Init+0x2a8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d052      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001204:	4a94      	ldr	r2, [pc, #592]	@ (8001458 <HAL_GPIO_Init+0x2a8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d869      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800120a:	4a94      	ldr	r2, [pc, #592]	@ (800145c <HAL_GPIO_Init+0x2ac>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d04c      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 8001210:	4a92      	ldr	r2, [pc, #584]	@ (800145c <HAL_GPIO_Init+0x2ac>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d863      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001216:	4a92      	ldr	r2, [pc, #584]	@ (8001460 <HAL_GPIO_Init+0x2b0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d046      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
 800121c:	4a90      	ldr	r2, [pc, #576]	@ (8001460 <HAL_GPIO_Init+0x2b0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d85d      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 8001222:	2b12      	cmp	r3, #18
 8001224:	d82a      	bhi.n	800127c <HAL_GPIO_Init+0xcc>
 8001226:	2b12      	cmp	r3, #18
 8001228:	d859      	bhi.n	80012de <HAL_GPIO_Init+0x12e>
 800122a:	a201      	add	r2, pc, #4	@ (adr r2, 8001230 <HAL_GPIO_Init+0x80>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	080012ab 	.word	0x080012ab
 8001234:	08001285 	.word	0x08001285
 8001238:	08001297 	.word	0x08001297
 800123c:	080012d9 	.word	0x080012d9
 8001240:	080012df 	.word	0x080012df
 8001244:	080012df 	.word	0x080012df
 8001248:	080012df 	.word	0x080012df
 800124c:	080012df 	.word	0x080012df
 8001250:	080012df 	.word	0x080012df
 8001254:	080012df 	.word	0x080012df
 8001258:	080012df 	.word	0x080012df
 800125c:	080012df 	.word	0x080012df
 8001260:	080012df 	.word	0x080012df
 8001264:	080012df 	.word	0x080012df
 8001268:	080012df 	.word	0x080012df
 800126c:	080012df 	.word	0x080012df
 8001270:	080012df 	.word	0x080012df
 8001274:	0800128d 	.word	0x0800128d
 8001278:	080012a1 	.word	0x080012a1
 800127c:	4a79      	ldr	r2, [pc, #484]	@ (8001464 <HAL_GPIO_Init+0x2b4>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001282:	e02c      	b.n	80012de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e029      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	3304      	adds	r3, #4
 8001292:	623b      	str	r3, [r7, #32]
          break;
 8001294:	e024      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	3308      	adds	r3, #8
 800129c:	623b      	str	r3, [r7, #32]
          break;
 800129e:	e01f      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	330c      	adds	r3, #12
 80012a6:	623b      	str	r3, [r7, #32]
          break;
 80012a8:	e01a      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012b2:	2304      	movs	r3, #4
 80012b4:	623b      	str	r3, [r7, #32]
          break;
 80012b6:	e013      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d105      	bne.n	80012cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012c0:	2308      	movs	r3, #8
 80012c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69fa      	ldr	r2, [r7, #28]
 80012c8:	611a      	str	r2, [r3, #16]
          break;
 80012ca:	e009      	b.n	80012e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	615a      	str	r2, [r3, #20]
          break;
 80012d6:	e003      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
          break;
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x130>
          break;
 80012de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2bff      	cmp	r3, #255	@ 0xff
 80012e4:	d801      	bhi.n	80012ea <HAL_GPIO_Init+0x13a>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	e001      	b.n	80012ee <HAL_GPIO_Init+0x13e>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3304      	adds	r3, #4
 80012ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2bff      	cmp	r3, #255	@ 0xff
 80012f4:	d802      	bhi.n	80012fc <HAL_GPIO_Init+0x14c>
 80012f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	e002      	b.n	8001302 <HAL_GPIO_Init+0x152>
 80012fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012fe:	3b08      	subs	r3, #8
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	210f      	movs	r1, #15
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	fa01 f303 	lsl.w	r3, r1, r3
 8001310:	43db      	mvns	r3, r3
 8001312:	401a      	ands	r2, r3
 8001314:	6a39      	ldr	r1, [r7, #32]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	431a      	orrs	r2, r3
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 80b1 	beq.w	8001492 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001330:	4b4d      	ldr	r3, [pc, #308]	@ (8001468 <HAL_GPIO_Init+0x2b8>)
 8001332:	699b      	ldr	r3, [r3, #24]
 8001334:	4a4c      	ldr	r2, [pc, #304]	@ (8001468 <HAL_GPIO_Init+0x2b8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6193      	str	r3, [r2, #24]
 800133c:	4b4a      	ldr	r3, [pc, #296]	@ (8001468 <HAL_GPIO_Init+0x2b8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001348:	4a48      	ldr	r2, [pc, #288]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 800134a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a40      	ldr	r2, [pc, #256]	@ (8001470 <HAL_GPIO_Init+0x2c0>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d013      	beq.n	800139c <HAL_GPIO_Init+0x1ec>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a3f      	ldr	r2, [pc, #252]	@ (8001474 <HAL_GPIO_Init+0x2c4>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d00d      	beq.n	8001398 <HAL_GPIO_Init+0x1e8>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a3e      	ldr	r2, [pc, #248]	@ (8001478 <HAL_GPIO_Init+0x2c8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d007      	beq.n	8001394 <HAL_GPIO_Init+0x1e4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	4a3d      	ldr	r2, [pc, #244]	@ (800147c <HAL_GPIO_Init+0x2cc>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d101      	bne.n	8001390 <HAL_GPIO_Init+0x1e0>
 800138c:	2303      	movs	r3, #3
 800138e:	e006      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001390:	2304      	movs	r3, #4
 8001392:	e004      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001394:	2302      	movs	r3, #2
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_GPIO_Init+0x1ee>
 800139c:	2300      	movs	r3, #0
 800139e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	4093      	lsls	r3, r2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ae:	492f      	ldr	r1, [pc, #188]	@ (800146c <HAL_GPIO_Init+0x2bc>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	492c      	ldr	r1, [pc, #176]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4928      	ldr	r1, [pc, #160]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	4922      	ldr	r1, [pc, #136]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fe:	4b20      	ldr	r3, [pc, #128]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	491e      	ldr	r1, [pc, #120]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 8001408:	4013      	ands	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4918      	ldr	r1, [pc, #96]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001426:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	4914      	ldr	r1, [pc, #80]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 8001430:	4013      	ands	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d021      	beq.n	8001484 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001440:	4b0f      	ldr	r3, [pc, #60]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	490e      	ldr	r1, [pc, #56]	@ (8001480 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
 800144c:	e021      	b.n	8001492 <HAL_GPIO_Init+0x2e2>
 800144e:	bf00      	nop
 8001450:	10320000 	.word	0x10320000
 8001454:	10310000 	.word	0x10310000
 8001458:	10220000 	.word	0x10220000
 800145c:	10210000 	.word	0x10210000
 8001460:	10120000 	.word	0x10120000
 8001464:	10110000 	.word	0x10110000
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00
 8001478:	40011000 	.word	0x40011000
 800147c:	40011400 	.word	0x40011400
 8001480:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <HAL_GPIO_Init+0x304>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	43db      	mvns	r3, r3
 800148c:	4909      	ldr	r1, [pc, #36]	@ (80014b4 <HAL_GPIO_Init+0x304>)
 800148e:	4013      	ands	r3, r2
 8001490:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	3301      	adds	r3, #1
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	fa22 f303 	lsr.w	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f47f ae8e 	bne.w	80011c4 <HAL_GPIO_Init+0x14>
  }
}
 80014a8:	bf00      	nop
 80014aa:	bf00      	nop
 80014ac:	372c      	adds	r7, #44	@ 0x2c
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40010400 	.word	0x40010400

080014b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	@ 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80014c6:	e09a      	b.n	80015fe <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80014c8:	2201      	movs	r2, #1
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	4013      	ands	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80014d6:	69bb      	ldr	r3, [r7, #24]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 808d 	beq.w	80015f8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80014de:	4a4e      	ldr	r2, [pc, #312]	@ (8001618 <HAL_GPIO_DeInit+0x160>)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ea:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	220f      	movs	r2, #15
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a46      	ldr	r2, [pc, #280]	@ (800161c <HAL_GPIO_DeInit+0x164>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d013      	beq.n	8001530 <HAL_GPIO_DeInit+0x78>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a45      	ldr	r2, [pc, #276]	@ (8001620 <HAL_GPIO_DeInit+0x168>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d00d      	beq.n	800152c <HAL_GPIO_DeInit+0x74>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a44      	ldr	r2, [pc, #272]	@ (8001624 <HAL_GPIO_DeInit+0x16c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_DeInit+0x70>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a43      	ldr	r2, [pc, #268]	@ (8001628 <HAL_GPIO_DeInit+0x170>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d101      	bne.n	8001524 <HAL_GPIO_DeInit+0x6c>
 8001520:	2303      	movs	r3, #3
 8001522:	e006      	b.n	8001532 <HAL_GPIO_DeInit+0x7a>
 8001524:	2304      	movs	r3, #4
 8001526:	e004      	b.n	8001532 <HAL_GPIO_DeInit+0x7a>
 8001528:	2302      	movs	r3, #2
 800152a:	e002      	b.n	8001532 <HAL_GPIO_DeInit+0x7a>
 800152c:	2301      	movs	r3, #1
 800152e:	e000      	b.n	8001532 <HAL_GPIO_DeInit+0x7a>
 8001530:	2300      	movs	r3, #0
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	429a      	cmp	r2, r3
 8001540:	d132      	bne.n	80015a8 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	43db      	mvns	r3, r3
 800154a:	4938      	ldr	r1, [pc, #224]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 800154c:	4013      	ands	r3, r2
 800154e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001550:	4b36      	ldr	r3, [pc, #216]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	43db      	mvns	r3, r3
 8001558:	4934      	ldr	r1, [pc, #208]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 800155a:	4013      	ands	r3, r2
 800155c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800155e:	4b33      	ldr	r3, [pc, #204]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	43db      	mvns	r3, r3
 8001566:	4931      	ldr	r1, [pc, #196]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 8001568:	4013      	ands	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800156c:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 800156e:	689a      	ldr	r2, [r3, #8]
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	43db      	mvns	r3, r3
 8001574:	492d      	ldr	r1, [pc, #180]	@ (800162c <HAL_GPIO_DeInit+0x174>)
 8001576:	4013      	ands	r3, r2
 8001578:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800158a:	4a23      	ldr	r2, [pc, #140]	@ (8001618 <HAL_GPIO_DeInit+0x160>)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	43da      	mvns	r2, r3
 800159a:	481f      	ldr	r0, [pc, #124]	@ (8001618 <HAL_GPIO_DeInit+0x160>)
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	089b      	lsrs	r3, r3, #2
 80015a0:	400a      	ands	r2, r1
 80015a2:	3302      	adds	r3, #2
 80015a4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2bff      	cmp	r3, #255	@ 0xff
 80015ac:	d801      	bhi.n	80015b2 <HAL_GPIO_DeInit+0xfa>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	e001      	b.n	80015b6 <HAL_GPIO_DeInit+0xfe>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3304      	adds	r3, #4
 80015b6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2bff      	cmp	r3, #255	@ 0xff
 80015bc:	d802      	bhi.n	80015c4 <HAL_GPIO_DeInit+0x10c>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	e002      	b.n	80015ca <HAL_GPIO_DeInit+0x112>
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	3b08      	subs	r3, #8
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	210f      	movs	r1, #15
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	2104      	movs	r1, #4
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	431a      	orrs	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	401a      	ands	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	3301      	adds	r3, #1
 80015fc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f af5e 	bne.w	80014c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	40010000 	.word	0x40010000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000
 8001628:	40011400 	.word	0x40011400
 800162c:	40010400 	.word	0x40010400

08001630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	460b      	mov	r3, r1
 800163a:	807b      	strh	r3, [r7, #2]
 800163c:	4613      	mov	r3, r2
 800163e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001640:	787b      	ldrb	r3, [r7, #1]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d003      	beq.n	800164e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800164c:	e003      	b.n	8001656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800164e:	887b      	ldrh	r3, [r7, #2]
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	611a      	str	r2, [r3, #16]
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr

08001660 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800166c:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_PWR_EnterSLEEPMode+0x34>)
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_PWR_EnterSLEEPMode+0x34>)
 8001672:	f023 0304 	bic.w	r3, r3, #4
 8001676:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001678:	78fb      	ldrb	r3, [r7, #3]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800167e:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8001680:	e002      	b.n	8001688 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8001682:	bf40      	sev
    __WFE();
 8001684:	bf20      	wfe
    __WFE();
 8001686:	bf20      	wfe
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d101      	bne.n	80016aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e272      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016b8:	4b92      	ldr	r3, [pc, #584]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b04      	cmp	r3, #4
 80016c2:	d00c      	beq.n	80016de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 030c 	and.w	r3, r3, #12
 80016cc:	2b08      	cmp	r3, #8
 80016ce:	d112      	bne.n	80016f6 <HAL_RCC_OscConfig+0x5e>
 80016d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016dc:	d10b      	bne.n	80016f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016de:	4b89      	ldr	r3, [pc, #548]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d06c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x12c>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d168      	bne.n	80017c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e24c      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x76>
 8001700:	4b80      	ldr	r3, [pc, #512]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a7f      	ldr	r2, [pc, #508]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	e02e      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10c      	bne.n	8001730 <HAL_RCC_OscConfig+0x98>
 8001716:	4b7b      	ldr	r3, [pc, #492]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a7a      	ldr	r2, [pc, #488]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800171c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	4b78      	ldr	r3, [pc, #480]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a77      	ldr	r2, [pc, #476]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001728:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	e01d      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001738:	d10c      	bne.n	8001754 <HAL_RCC_OscConfig+0xbc>
 800173a:	4b72      	ldr	r3, [pc, #456]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a71      	ldr	r2, [pc, #452]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001744:	6013      	str	r3, [r2, #0]
 8001746:	4b6f      	ldr	r3, [pc, #444]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a6e      	ldr	r2, [pc, #440]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	e00b      	b.n	800176c <HAL_RCC_OscConfig+0xd4>
 8001754:	4b6b      	ldr	r3, [pc, #428]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a6a      	ldr	r2, [pc, #424]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b68      	ldr	r3, [pc, #416]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a67      	ldr	r2, [pc, #412]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001774:	f7ff fbb6 	bl	8000ee4 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fbb2 	bl	8000ee4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e200      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800178e:	4b5d      	ldr	r3, [pc, #372]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0xe4>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179c:	f7ff fba2 	bl	8000ee4 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff fb9e 	bl	8000ee4 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	@ 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e1ec      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017b6:	4b53      	ldr	r3, [pc, #332]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x10c>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d063      	beq.n	800189a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d00b      	beq.n	80017f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017de:	4b49      	ldr	r3, [pc, #292]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	2b08      	cmp	r3, #8
 80017e8:	d11c      	bne.n	8001824 <HAL_RCC_OscConfig+0x18c>
 80017ea:	4b46      	ldr	r3, [pc, #280]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d116      	bne.n	8001824 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	4b43      	ldr	r3, [pc, #268]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d005      	beq.n	800180e <HAL_RCC_OscConfig+0x176>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d001      	beq.n	800180e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e1c0      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180e:	4b3d      	ldr	r3, [pc, #244]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	4939      	ldr	r1, [pc, #228]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001822:	e03a      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d020      	beq.n	800186e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800182c:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <HAL_RCC_OscConfig+0x270>)
 800182e:	2201      	movs	r2, #1
 8001830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001832:	f7ff fb57 	bl	8000ee4 <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183a:	f7ff fb53 	bl	8000ee4 <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e1a1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184c:	4b2d      	ldr	r3, [pc, #180]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001858:	4b2a      	ldr	r3, [pc, #168]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	695b      	ldr	r3, [r3, #20]
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4927      	ldr	r1, [pc, #156]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
 800186c:	e015      	b.n	800189a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	4b26      	ldr	r3, [pc, #152]	@ (8001908 <HAL_RCC_OscConfig+0x270>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff fb36 	bl	8000ee4 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187c:	f7ff fb32 	bl	8000ee4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e180      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d03a      	beq.n	800191c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d019      	beq.n	80018e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ae:	4b17      	ldr	r3, [pc, #92]	@ (800190c <HAL_RCC_OscConfig+0x274>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b4:	f7ff fb16 	bl	8000ee4 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff fb12 	bl	8000ee4 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e160      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001904 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f000 face 	bl	8001e7c <RCC_Delay>
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e2:	4b0a      	ldr	r3, [pc, #40]	@ (800190c <HAL_RCC_OscConfig+0x274>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fafc 	bl	8000ee4 <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ee:	e00f      	b.n	8001910 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f0:	f7ff faf8 	bl	8000ee4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d908      	bls.n	8001910 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e146      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000
 8001908:	42420000 	.word	0x42420000
 800190c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001910:	4b92      	ldr	r3, [pc, #584]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1e9      	bne.n	80018f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	f000 80a6 	beq.w	8001a76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800192a:	2300      	movs	r3, #0
 800192c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800192e:	4b8b      	ldr	r3, [pc, #556]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10d      	bne.n	8001956 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	4b88      	ldr	r3, [pc, #544]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	4a87      	ldr	r2, [pc, #540]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	4b85      	ldr	r3, [pc, #532]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001952:	2301      	movs	r3, #1
 8001954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001956:	4b82      	ldr	r3, [pc, #520]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d118      	bne.n	8001994 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001962:	4b7f      	ldr	r3, [pc, #508]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a7e      	ldr	r2, [pc, #504]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196e:	f7ff fab9 	bl	8000ee4 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001976:	f7ff fab5 	bl	8000ee4 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b64      	cmp	r3, #100	@ 0x64
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e103      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001988:	4b75      	ldr	r3, [pc, #468]	@ (8001b60 <HAL_RCC_OscConfig+0x4c8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d106      	bne.n	80019aa <HAL_RCC_OscConfig+0x312>
 800199c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	4a6e      	ldr	r2, [pc, #440]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	6213      	str	r3, [r2, #32]
 80019a8:	e02d      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0x334>
 80019b2:	4b6a      	ldr	r3, [pc, #424]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	6a1b      	ldr	r3, [r3, #32]
 80019b6:	4a69      	ldr	r2, [pc, #420]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f023 0301 	bic.w	r3, r3, #1
 80019bc:	6213      	str	r3, [r2, #32]
 80019be:	4b67      	ldr	r3, [pc, #412]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	6a1b      	ldr	r3, [r3, #32]
 80019c2:	4a66      	ldr	r2, [pc, #408]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019c4:	f023 0304 	bic.w	r3, r3, #4
 80019c8:	6213      	str	r3, [r2, #32]
 80019ca:	e01c      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x356>
 80019d4:	4b61      	ldr	r3, [pc, #388]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	4a60      	ldr	r2, [pc, #384]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019da:	f043 0304 	orr.w	r3, r3, #4
 80019de:	6213      	str	r3, [r2, #32]
 80019e0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	6213      	str	r3, [r2, #32]
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x36e>
 80019ee:	4b5b      	ldr	r3, [pc, #364]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	f023 0301 	bic.w	r3, r3, #1
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	4b58      	ldr	r3, [pc, #352]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	4a57      	ldr	r2, [pc, #348]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 0304 	bic.w	r3, r3, #4
 8001a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d015      	beq.n	8001a3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fa69 	bl	8000ee4 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a14:	e00a      	b.n	8001a2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff fa65 	bl	8000ee4 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0b1      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0ee      	beq.n	8001a16 <HAL_RCC_OscConfig+0x37e>
 8001a38:	e014      	b.n	8001a64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fa53 	bl	8000ee4 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a40:	e00a      	b.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a42:	f7ff fa4f 	bl	8000ee4 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e09b      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a58:	4b40      	ldr	r3, [pc, #256]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ee      	bne.n	8001a42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a64:	7dfb      	ldrb	r3, [r7, #23]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a80:	4b36      	ldr	r3, [pc, #216]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d061      	beq.n	8001b50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d146      	bne.n	8001b22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	4b33      	ldr	r3, [pc, #204]	@ (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9a:	f7ff fa23 	bl	8000ee4 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa2:	f7ff fa1f 	bl	8000ee4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e06d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f0      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a1b      	ldr	r3, [r3, #32]
 8001ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ac8:	d108      	bne.n	8001adc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aca:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	4921      	ldr	r1, [pc, #132]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001adc:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a19      	ldr	r1, [r3, #32]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aec:	430b      	orrs	r3, r1
 8001aee:	491b      	ldr	r1, [pc, #108]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff f9f3 	bl	8000ee4 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7ff f9ef 	bl	8000ee4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e03d      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b14:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x46a>
 8001b20:	e035      	b.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b22:	4b10      	ldr	r3, [pc, #64]	@ (8001b64 <HAL_RCC_OscConfig+0x4cc>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b28:	f7ff f9dc 	bl	8000ee4 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff f9d8 	bl	8000ee4 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e026      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b42:	4b06      	ldr	r3, [pc, #24]	@ (8001b5c <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x498>
 8001b4e:	e01e      	b.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e019      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40007000 	.word	0x40007000
 8001b64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	@ (8001b98 <HAL_RCC_OscConfig+0x500>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e000      	b.n	8001b90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40021000 	.word	0x40021000

08001b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d0      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d910      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b67      	ldr	r3, [pc, #412]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4965      	ldr	r1, [pc, #404]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b63      	ldr	r3, [pc, #396]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0b8      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bf8:	4b59      	ldr	r3, [pc, #356]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a58      	ldr	r2, [pc, #352]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001c02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c10:	4b53      	ldr	r3, [pc, #332]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	4a52      	ldr	r2, [pc, #328]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001c1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b50      	ldr	r3, [pc, #320]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	494d      	ldr	r1, [pc, #308]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d040      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b47      	ldr	r3, [pc, #284]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e07f      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c5a:	4b41      	ldr	r3, [pc, #260]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d109      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e073      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e06b      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c7a:	4b39      	ldr	r3, [pc, #228]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f023 0203 	bic.w	r2, r3, #3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	4936      	ldr	r1, [pc, #216]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c8c:	f7ff f92a 	bl	8000ee4 <HAL_GetTick>
 8001c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c94:	f7ff f926 	bl	8000ee4 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e053      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	4b2d      	ldr	r3, [pc, #180]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 020c 	and.w	r2, r3, #12
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d1eb      	bne.n	8001c94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d210      	bcs.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cca:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 0207 	bic.w	r2, r3, #7
 8001cd2:	4922      	ldr	r1, [pc, #136]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <HAL_RCC_ClockConfig+0x1c0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e032      	b.n	8001d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d008      	beq.n	8001d0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	4916      	ldr	r1, [pc, #88]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d16:	4b12      	ldr	r3, [pc, #72]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	490e      	ldr	r1, [pc, #56]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d2a:	f000 f821 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b0b      	ldr	r3, [pc, #44]	@ (8001d60 <HAL_RCC_ClockConfig+0x1c4>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f003 030f 	and.w	r3, r3, #15
 8001d3a:	490a      	ldr	r1, [pc, #40]	@ (8001d64 <HAL_RCC_ClockConfig+0x1c8>)
 8001d3c:	5ccb      	ldrb	r3, [r1, r3]
 8001d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d42:	4a09      	ldr	r2, [pc, #36]	@ (8001d68 <HAL_RCC_ClockConfig+0x1cc>)
 8001d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d46:	4b09      	ldr	r3, [pc, #36]	@ (8001d6c <HAL_RCC_ClockConfig+0x1d0>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff f888 	bl	8000e60 <HAL_InitTick>

  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08003304 	.word	0x08003304
 8001d68:	20000008 	.word	0x20000008
 8001d6c:	2000000c 	.word	0x2000000c

08001d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b087      	sub	sp, #28
 8001d74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d002      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x30>
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d003      	beq.n	8001da6 <HAL_RCC_GetSysClockFreq+0x36>
 8001d9e:	e027      	b.n	8001df0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001da2:	613b      	str	r3, [r7, #16]
      break;
 8001da4:	e027      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	0c9b      	lsrs	r3, r3, #18
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	4a17      	ldr	r2, [pc, #92]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001db0:	5cd3      	ldrb	r3, [r2, r3]
 8001db2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	0c5b      	lsrs	r3, r3, #17
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001dca:	5cd3      	ldrb	r3, [r2, r3]
 8001dcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dd2:	fb03 f202 	mul.w	r2, r3, r2
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e004      	b.n	8001dea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0c      	ldr	r2, [pc, #48]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	613b      	str	r3, [r7, #16]
      break;
 8001dee:	e002      	b.n	8001df6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_RCC_GetSysClockFreq+0x98>)
 8001df2:	613b      	str	r3, [r7, #16]
      break;
 8001df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001df6:	693b      	ldr	r3, [r7, #16]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000
 8001e08:	007a1200 	.word	0x007a1200
 8001e0c:	0800331c 	.word	0x0800331c
 8001e10:	0800332c 	.word	0x0800332c
 8001e14:	003d0900 	.word	0x003d0900

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b02      	ldr	r3, [pc, #8]	@ (8001e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e30:	f7ff fff2 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	@ (8001e4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 0307 	and.w	r3, r3, #7
 8001e40:	4903      	ldr	r1, [pc, #12]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08003314 	.word	0x08003314

08001e54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e58:	f7ff ffde 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	4b05      	ldr	r3, [pc, #20]	@ (8001e74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0adb      	lsrs	r3, r3, #11
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	4903      	ldr	r1, [pc, #12]	@ (8001e78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6a:	5ccb      	ldrb	r3, [r1, r3]
 8001e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08003314 	.word	0x08003314

08001e7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e84:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <RCC_Delay+0x34>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb4 <RCC_Delay+0x38>)
 8001e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8e:	0a5b      	lsrs	r3, r3, #9
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	fb02 f303 	mul.w	r3, r2, r3
 8001e96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e98:	bf00      	nop
  }
  while (Delay --);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	60fa      	str	r2, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1f9      	bne.n	8001e98 <RCC_Delay+0x1c>
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3714      	adds	r7, #20
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	10624dd3 	.word	0x10624dd3

08001eb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e042      	b.n	8001f50 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7fe fec0 	bl	8000c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	@ 0x24
 8001ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001efa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f971 	bl	80021e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2220      	movs	r2, #32
 8001f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b08a      	sub	sp, #40	@ 0x28
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	4613      	mov	r3, r2
 8001f66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d175      	bne.n	8002064 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_UART_Transmit+0x2c>
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e06e      	b.n	8002066 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2221      	movs	r2, #33	@ 0x21
 8001f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f96:	f7fe ffa5 	bl	8000ee4 <HAL_GetTick>
 8001f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	88fa      	ldrh	r2, [r7, #6]
 8001fa6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fb0:	d108      	bne.n	8001fc4 <HAL_UART_Transmit+0x6c>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	691b      	ldr	r3, [r3, #16]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	e003      	b.n	8001fcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fcc:	e02e      	b.n	800202c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2180      	movs	r1, #128	@ 0x80
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f848 	bl	800206e <UART_WaitOnFlagUntilTimeout>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2220      	movs	r2, #32
 8001fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e03a      	b.n	8002066 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10b      	bne.n	800200e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002004:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	3302      	adds	r3, #2
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e007      	b.n	800201e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	3301      	adds	r3, #1
 800201c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002022:	b29b      	uxth	r3, r3
 8002024:	3b01      	subs	r3, #1
 8002026:	b29a      	uxth	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002030:	b29b      	uxth	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d1cb      	bne.n	8001fce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	2140      	movs	r1, #64	@ 0x40
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f000 f814 	bl	800206e <UART_WaitOnFlagUntilTimeout>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e006      	b.n	8002066 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2220      	movs	r2, #32
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002060:	2300      	movs	r3, #0
 8002062:	e000      	b.n	8002066 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002064:	2302      	movs	r3, #2
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	3720      	adds	r7, #32
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b086      	sub	sp, #24
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800207e:	e03b      	b.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002086:	d037      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002088:	f7fe ff2c 	bl	8000ee4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	6a3a      	ldr	r2, [r7, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d302      	bcc.n	800209e <UART_WaitOnFlagUntilTimeout+0x30>
 8002098:	6a3b      	ldr	r3, [r7, #32]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e03a      	b.n	8002118 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d023      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	2b80      	cmp	r3, #128	@ 0x80
 80020b4:	d020      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	2b40      	cmp	r3, #64	@ 0x40
 80020ba:	d01d      	beq.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d116      	bne.n	80020f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	617b      	str	r3, [r7, #20]
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f81d 	bl	8002120 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2208      	movs	r2, #8
 80020ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e00f      	b.n	8002118 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	4013      	ands	r3, r2
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	429a      	cmp	r2, r3
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	79fb      	ldrb	r3, [r7, #7]
 8002112:	429a      	cmp	r2, r3
 8002114:	d0b4      	beq.n	8002080 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002120:	b480      	push	{r7}
 8002122:	b095      	sub	sp, #84	@ 0x54
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	330c      	adds	r3, #12
 800212e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002132:	e853 3f00 	ldrex	r3, [r3]
 8002136:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800213a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800213e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	330c      	adds	r3, #12
 8002146:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002148:	643a      	str	r2, [r7, #64]	@ 0x40
 800214a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800214c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800214e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002150:	e841 2300 	strex	r3, r2, [r1]
 8002154:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1e5      	bne.n	8002128 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	3314      	adds	r3, #20
 8002162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002164:	6a3b      	ldr	r3, [r7, #32]
 8002166:	e853 3f00 	ldrex	r3, [r3]
 800216a:	61fb      	str	r3, [r7, #28]
   return(result);
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3314      	adds	r3, #20
 800217a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800217c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800217e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002180:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002182:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002184:	e841 2300 	strex	r3, r2, [r1]
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e5      	bne.n	800215c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002194:	2b01      	cmp	r3, #1
 8002196:	d119      	bne.n	80021cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	330c      	adds	r3, #12
 800219e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	e853 3f00 	ldrex	r3, [r3]
 80021a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f023 0310 	bic.w	r3, r3, #16
 80021ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	330c      	adds	r3, #12
 80021b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021b8:	61ba      	str	r2, [r7, #24]
 80021ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	6979      	ldr	r1, [r7, #20]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	613b      	str	r3, [r7, #16]
   return(result);
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e5      	bne.n	8002198 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80021da:	bf00      	nop
 80021dc:	3754      	adds	r7, #84	@ 0x54
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	691b      	ldr	r3, [r3, #16]
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	4313      	orrs	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800221e:	f023 030c 	bic.w	r3, r3, #12
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	68b9      	ldr	r1, [r7, #8]
 8002228:	430b      	orrs	r3, r1
 800222a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2c      	ldr	r2, [pc, #176]	@ (80022f8 <UART_SetConfig+0x114>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800224c:	f7ff fe02 	bl	8001e54 <HAL_RCC_GetPCLK2Freq>
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	e002      	b.n	800225a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002254:	f7ff fdea 	bl	8001e2c <HAL_RCC_GetPCLK1Freq>
 8002258:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4613      	mov	r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	009a      	lsls	r2, r3, #2
 8002264:	441a      	add	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002270:	4a22      	ldr	r2, [pc, #136]	@ (80022fc <UART_SetConfig+0x118>)
 8002272:	fba2 2303 	umull	r2, r3, r2, r3
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	0119      	lsls	r1, r3, #4
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	4613      	mov	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	4413      	add	r3, r2
 8002282:	009a      	lsls	r2, r3, #2
 8002284:	441a      	add	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <UART_SetConfig+0x118>)
 8002292:	fba3 0302 	umull	r0, r3, r3, r2
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2064      	movs	r0, #100	@ 0x64
 800229a:	fb00 f303 	mul.w	r3, r0, r3
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	3332      	adds	r3, #50	@ 0x32
 80022a4:	4a15      	ldr	r2, [pc, #84]	@ (80022fc <UART_SetConfig+0x118>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022b0:	4419      	add	r1, r3
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4613      	mov	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	009a      	lsls	r2, r3, #2
 80022bc:	441a      	add	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <UART_SetConfig+0x118>)
 80022ca:	fba3 0302 	umull	r0, r3, r3, r2
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2064      	movs	r0, #100	@ 0x64
 80022d2:	fb00 f303 	mul.w	r3, r0, r3
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	011b      	lsls	r3, r3, #4
 80022da:	3332      	adds	r3, #50	@ 0x32
 80022dc:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <UART_SetConfig+0x118>)
 80022de:	fba2 2303 	umull	r2, r3, r2, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	440a      	add	r2, r1
 80022ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80022f0:	bf00      	nop
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40013800 	.word	0x40013800
 80022fc:	51eb851f 	.word	0x51eb851f

08002300 <atoi>:
 8002300:	220a      	movs	r2, #10
 8002302:	2100      	movs	r1, #0
 8002304:	f000 b930 	b.w	8002568 <strtol>

08002308 <malloc>:
 8002308:	4b02      	ldr	r3, [pc, #8]	@ (8002314 <malloc+0xc>)
 800230a:	4601      	mov	r1, r0
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	f000 b825 	b.w	800235c <_malloc_r>
 8002312:	bf00      	nop
 8002314:	20000014 	.word	0x20000014

08002318 <sbrk_aligned>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4e0f      	ldr	r6, [pc, #60]	@ (8002358 <sbrk_aligned+0x40>)
 800231c:	460c      	mov	r4, r1
 800231e:	6831      	ldr	r1, [r6, #0]
 8002320:	4605      	mov	r5, r0
 8002322:	b911      	cbnz	r1, 800232a <sbrk_aligned+0x12>
 8002324:	f000 f952 	bl	80025cc <_sbrk_r>
 8002328:	6030      	str	r0, [r6, #0]
 800232a:	4621      	mov	r1, r4
 800232c:	4628      	mov	r0, r5
 800232e:	f000 f94d 	bl	80025cc <_sbrk_r>
 8002332:	1c43      	adds	r3, r0, #1
 8002334:	d103      	bne.n	800233e <sbrk_aligned+0x26>
 8002336:	f04f 34ff 	mov.w	r4, #4294967295
 800233a:	4620      	mov	r0, r4
 800233c:	bd70      	pop	{r4, r5, r6, pc}
 800233e:	1cc4      	adds	r4, r0, #3
 8002340:	f024 0403 	bic.w	r4, r4, #3
 8002344:	42a0      	cmp	r0, r4
 8002346:	d0f8      	beq.n	800233a <sbrk_aligned+0x22>
 8002348:	1a21      	subs	r1, r4, r0
 800234a:	4628      	mov	r0, r5
 800234c:	f000 f93e 	bl	80025cc <_sbrk_r>
 8002350:	3001      	adds	r0, #1
 8002352:	d1f2      	bne.n	800233a <sbrk_aligned+0x22>
 8002354:	e7ef      	b.n	8002336 <sbrk_aligned+0x1e>
 8002356:	bf00      	nop
 8002358:	200002d8 	.word	0x200002d8

0800235c <_malloc_r>:
 800235c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002360:	1ccd      	adds	r5, r1, #3
 8002362:	f025 0503 	bic.w	r5, r5, #3
 8002366:	3508      	adds	r5, #8
 8002368:	2d0c      	cmp	r5, #12
 800236a:	bf38      	it	cc
 800236c:	250c      	movcc	r5, #12
 800236e:	2d00      	cmp	r5, #0
 8002370:	4606      	mov	r6, r0
 8002372:	db01      	blt.n	8002378 <_malloc_r+0x1c>
 8002374:	42a9      	cmp	r1, r5
 8002376:	d904      	bls.n	8002382 <_malloc_r+0x26>
 8002378:	230c      	movs	r3, #12
 800237a:	6033      	str	r3, [r6, #0]
 800237c:	2000      	movs	r0, #0
 800237e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002458 <_malloc_r+0xfc>
 8002386:	f000 f869 	bl	800245c <__malloc_lock>
 800238a:	f8d8 3000 	ldr.w	r3, [r8]
 800238e:	461c      	mov	r4, r3
 8002390:	bb44      	cbnz	r4, 80023e4 <_malloc_r+0x88>
 8002392:	4629      	mov	r1, r5
 8002394:	4630      	mov	r0, r6
 8002396:	f7ff ffbf 	bl	8002318 <sbrk_aligned>
 800239a:	1c43      	adds	r3, r0, #1
 800239c:	4604      	mov	r4, r0
 800239e:	d158      	bne.n	8002452 <_malloc_r+0xf6>
 80023a0:	f8d8 4000 	ldr.w	r4, [r8]
 80023a4:	4627      	mov	r7, r4
 80023a6:	2f00      	cmp	r7, #0
 80023a8:	d143      	bne.n	8002432 <_malloc_r+0xd6>
 80023aa:	2c00      	cmp	r4, #0
 80023ac:	d04b      	beq.n	8002446 <_malloc_r+0xea>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	4639      	mov	r1, r7
 80023b2:	4630      	mov	r0, r6
 80023b4:	eb04 0903 	add.w	r9, r4, r3
 80023b8:	f000 f908 	bl	80025cc <_sbrk_r>
 80023bc:	4581      	cmp	r9, r0
 80023be:	d142      	bne.n	8002446 <_malloc_r+0xea>
 80023c0:	6821      	ldr	r1, [r4, #0]
 80023c2:	4630      	mov	r0, r6
 80023c4:	1a6d      	subs	r5, r5, r1
 80023c6:	4629      	mov	r1, r5
 80023c8:	f7ff ffa6 	bl	8002318 <sbrk_aligned>
 80023cc:	3001      	adds	r0, #1
 80023ce:	d03a      	beq.n	8002446 <_malloc_r+0xea>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	442b      	add	r3, r5
 80023d4:	6023      	str	r3, [r4, #0]
 80023d6:	f8d8 3000 	ldr.w	r3, [r8]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	bb62      	cbnz	r2, 8002438 <_malloc_r+0xdc>
 80023de:	f8c8 7000 	str.w	r7, [r8]
 80023e2:	e00f      	b.n	8002404 <_malloc_r+0xa8>
 80023e4:	6822      	ldr	r2, [r4, #0]
 80023e6:	1b52      	subs	r2, r2, r5
 80023e8:	d420      	bmi.n	800242c <_malloc_r+0xd0>
 80023ea:	2a0b      	cmp	r2, #11
 80023ec:	d917      	bls.n	800241e <_malloc_r+0xc2>
 80023ee:	1961      	adds	r1, r4, r5
 80023f0:	42a3      	cmp	r3, r4
 80023f2:	6025      	str	r5, [r4, #0]
 80023f4:	bf18      	it	ne
 80023f6:	6059      	strne	r1, [r3, #4]
 80023f8:	6863      	ldr	r3, [r4, #4]
 80023fa:	bf08      	it	eq
 80023fc:	f8c8 1000 	streq.w	r1, [r8]
 8002400:	5162      	str	r2, [r4, r5]
 8002402:	604b      	str	r3, [r1, #4]
 8002404:	4630      	mov	r0, r6
 8002406:	f000 f82f 	bl	8002468 <__malloc_unlock>
 800240a:	f104 000b 	add.w	r0, r4, #11
 800240e:	1d23      	adds	r3, r4, #4
 8002410:	f020 0007 	bic.w	r0, r0, #7
 8002414:	1ac2      	subs	r2, r0, r3
 8002416:	bf1c      	itt	ne
 8002418:	1a1b      	subne	r3, r3, r0
 800241a:	50a3      	strne	r3, [r4, r2]
 800241c:	e7af      	b.n	800237e <_malloc_r+0x22>
 800241e:	6862      	ldr	r2, [r4, #4]
 8002420:	42a3      	cmp	r3, r4
 8002422:	bf0c      	ite	eq
 8002424:	f8c8 2000 	streq.w	r2, [r8]
 8002428:	605a      	strne	r2, [r3, #4]
 800242a:	e7eb      	b.n	8002404 <_malloc_r+0xa8>
 800242c:	4623      	mov	r3, r4
 800242e:	6864      	ldr	r4, [r4, #4]
 8002430:	e7ae      	b.n	8002390 <_malloc_r+0x34>
 8002432:	463c      	mov	r4, r7
 8002434:	687f      	ldr	r7, [r7, #4]
 8002436:	e7b6      	b.n	80023a6 <_malloc_r+0x4a>
 8002438:	461a      	mov	r2, r3
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	42a3      	cmp	r3, r4
 800243e:	d1fb      	bne.n	8002438 <_malloc_r+0xdc>
 8002440:	2300      	movs	r3, #0
 8002442:	6053      	str	r3, [r2, #4]
 8002444:	e7de      	b.n	8002404 <_malloc_r+0xa8>
 8002446:	230c      	movs	r3, #12
 8002448:	4630      	mov	r0, r6
 800244a:	6033      	str	r3, [r6, #0]
 800244c:	f000 f80c 	bl	8002468 <__malloc_unlock>
 8002450:	e794      	b.n	800237c <_malloc_r+0x20>
 8002452:	6005      	str	r5, [r0, #0]
 8002454:	e7d6      	b.n	8002404 <_malloc_r+0xa8>
 8002456:	bf00      	nop
 8002458:	200002dc 	.word	0x200002dc

0800245c <__malloc_lock>:
 800245c:	4801      	ldr	r0, [pc, #4]	@ (8002464 <__malloc_lock+0x8>)
 800245e:	f000 b8ef 	b.w	8002640 <__retarget_lock_acquire_recursive>
 8002462:	bf00      	nop
 8002464:	2000041c 	.word	0x2000041c

08002468 <__malloc_unlock>:
 8002468:	4801      	ldr	r0, [pc, #4]	@ (8002470 <__malloc_unlock+0x8>)
 800246a:	f000 b8ea 	b.w	8002642 <__retarget_lock_release_recursive>
 800246e:	bf00      	nop
 8002470:	2000041c 	.word	0x2000041c

08002474 <_strtol_l.constprop.0>:
 8002474:	2b24      	cmp	r3, #36	@ 0x24
 8002476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800247a:	4686      	mov	lr, r0
 800247c:	4690      	mov	r8, r2
 800247e:	d801      	bhi.n	8002484 <_strtol_l.constprop.0+0x10>
 8002480:	2b01      	cmp	r3, #1
 8002482:	d106      	bne.n	8002492 <_strtol_l.constprop.0+0x1e>
 8002484:	f000 f8b2 	bl	80025ec <__errno>
 8002488:	2316      	movs	r3, #22
 800248a:	6003      	str	r3, [r0, #0]
 800248c:	2000      	movs	r0, #0
 800248e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002492:	460d      	mov	r5, r1
 8002494:	4833      	ldr	r0, [pc, #204]	@ (8002564 <_strtol_l.constprop.0+0xf0>)
 8002496:	462a      	mov	r2, r5
 8002498:	f815 4b01 	ldrb.w	r4, [r5], #1
 800249c:	5d06      	ldrb	r6, [r0, r4]
 800249e:	f016 0608 	ands.w	r6, r6, #8
 80024a2:	d1f8      	bne.n	8002496 <_strtol_l.constprop.0+0x22>
 80024a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80024a6:	d12d      	bne.n	8002504 <_strtol_l.constprop.0+0x90>
 80024a8:	2601      	movs	r6, #1
 80024aa:	782c      	ldrb	r4, [r5, #0]
 80024ac:	1c95      	adds	r5, r2, #2
 80024ae:	f033 0210 	bics.w	r2, r3, #16
 80024b2:	d109      	bne.n	80024c8 <_strtol_l.constprop.0+0x54>
 80024b4:	2c30      	cmp	r4, #48	@ 0x30
 80024b6:	d12a      	bne.n	800250e <_strtol_l.constprop.0+0x9a>
 80024b8:	782a      	ldrb	r2, [r5, #0]
 80024ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80024be:	2a58      	cmp	r2, #88	@ 0x58
 80024c0:	d125      	bne.n	800250e <_strtol_l.constprop.0+0x9a>
 80024c2:	2310      	movs	r3, #16
 80024c4:	786c      	ldrb	r4, [r5, #1]
 80024c6:	3502      	adds	r5, #2
 80024c8:	2200      	movs	r2, #0
 80024ca:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80024ce:	f10c 3cff 	add.w	ip, ip, #4294967295
 80024d2:	fbbc f9f3 	udiv	r9, ip, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80024dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80024e0:	2f09      	cmp	r7, #9
 80024e2:	d81b      	bhi.n	800251c <_strtol_l.constprop.0+0xa8>
 80024e4:	463c      	mov	r4, r7
 80024e6:	42a3      	cmp	r3, r4
 80024e8:	dd27      	ble.n	800253a <_strtol_l.constprop.0+0xc6>
 80024ea:	1c57      	adds	r7, r2, #1
 80024ec:	d007      	beq.n	80024fe <_strtol_l.constprop.0+0x8a>
 80024ee:	4581      	cmp	r9, r0
 80024f0:	d320      	bcc.n	8002534 <_strtol_l.constprop.0+0xc0>
 80024f2:	d101      	bne.n	80024f8 <_strtol_l.constprop.0+0x84>
 80024f4:	45a2      	cmp	sl, r4
 80024f6:	db1d      	blt.n	8002534 <_strtol_l.constprop.0+0xc0>
 80024f8:	2201      	movs	r2, #1
 80024fa:	fb00 4003 	mla	r0, r0, r3, r4
 80024fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002502:	e7eb      	b.n	80024dc <_strtol_l.constprop.0+0x68>
 8002504:	2c2b      	cmp	r4, #43	@ 0x2b
 8002506:	bf04      	itt	eq
 8002508:	782c      	ldrbeq	r4, [r5, #0]
 800250a:	1c95      	addeq	r5, r2, #2
 800250c:	e7cf      	b.n	80024ae <_strtol_l.constprop.0+0x3a>
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1da      	bne.n	80024c8 <_strtol_l.constprop.0+0x54>
 8002512:	2c30      	cmp	r4, #48	@ 0x30
 8002514:	bf0c      	ite	eq
 8002516:	2308      	moveq	r3, #8
 8002518:	230a      	movne	r3, #10
 800251a:	e7d5      	b.n	80024c8 <_strtol_l.constprop.0+0x54>
 800251c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8002520:	2f19      	cmp	r7, #25
 8002522:	d801      	bhi.n	8002528 <_strtol_l.constprop.0+0xb4>
 8002524:	3c37      	subs	r4, #55	@ 0x37
 8002526:	e7de      	b.n	80024e6 <_strtol_l.constprop.0+0x72>
 8002528:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800252c:	2f19      	cmp	r7, #25
 800252e:	d804      	bhi.n	800253a <_strtol_l.constprop.0+0xc6>
 8002530:	3c57      	subs	r4, #87	@ 0x57
 8002532:	e7d8      	b.n	80024e6 <_strtol_l.constprop.0+0x72>
 8002534:	f04f 32ff 	mov.w	r2, #4294967295
 8002538:	e7e1      	b.n	80024fe <_strtol_l.constprop.0+0x8a>
 800253a:	1c53      	adds	r3, r2, #1
 800253c:	d108      	bne.n	8002550 <_strtol_l.constprop.0+0xdc>
 800253e:	2322      	movs	r3, #34	@ 0x22
 8002540:	4660      	mov	r0, ip
 8002542:	f8ce 3000 	str.w	r3, [lr]
 8002546:	f1b8 0f00 	cmp.w	r8, #0
 800254a:	d0a0      	beq.n	800248e <_strtol_l.constprop.0+0x1a>
 800254c:	1e69      	subs	r1, r5, #1
 800254e:	e006      	b.n	800255e <_strtol_l.constprop.0+0xea>
 8002550:	b106      	cbz	r6, 8002554 <_strtol_l.constprop.0+0xe0>
 8002552:	4240      	negs	r0, r0
 8002554:	f1b8 0f00 	cmp.w	r8, #0
 8002558:	d099      	beq.n	800248e <_strtol_l.constprop.0+0x1a>
 800255a:	2a00      	cmp	r2, #0
 800255c:	d1f6      	bne.n	800254c <_strtol_l.constprop.0+0xd8>
 800255e:	f8c8 1000 	str.w	r1, [r8]
 8002562:	e794      	b.n	800248e <_strtol_l.constprop.0+0x1a>
 8002564:	0800332f 	.word	0x0800332f

08002568 <strtol>:
 8002568:	4613      	mov	r3, r2
 800256a:	460a      	mov	r2, r1
 800256c:	4601      	mov	r1, r0
 800256e:	4802      	ldr	r0, [pc, #8]	@ (8002578 <strtol+0x10>)
 8002570:	6800      	ldr	r0, [r0, #0]
 8002572:	f7ff bf7f 	b.w	8002474 <_strtol_l.constprop.0>
 8002576:	bf00      	nop
 8002578:	20000014 	.word	0x20000014

0800257c <siprintf>:
 800257c:	b40e      	push	{r1, r2, r3}
 800257e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002582:	b500      	push	{lr}
 8002584:	b09c      	sub	sp, #112	@ 0x70
 8002586:	ab1d      	add	r3, sp, #116	@ 0x74
 8002588:	9002      	str	r0, [sp, #8]
 800258a:	9006      	str	r0, [sp, #24]
 800258c:	9107      	str	r1, [sp, #28]
 800258e:	9104      	str	r1, [sp, #16]
 8002590:	4808      	ldr	r0, [pc, #32]	@ (80025b4 <siprintf+0x38>)
 8002592:	4909      	ldr	r1, [pc, #36]	@ (80025b8 <siprintf+0x3c>)
 8002594:	f853 2b04 	ldr.w	r2, [r3], #4
 8002598:	9105      	str	r1, [sp, #20]
 800259a:	6800      	ldr	r0, [r0, #0]
 800259c:	a902      	add	r1, sp, #8
 800259e:	9301      	str	r3, [sp, #4]
 80025a0:	f000 f8f4 	bl	800278c <_svfiprintf_r>
 80025a4:	2200      	movs	r2, #0
 80025a6:	9b02      	ldr	r3, [sp, #8]
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	b01c      	add	sp, #112	@ 0x70
 80025ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80025b0:	b003      	add	sp, #12
 80025b2:	4770      	bx	lr
 80025b4:	20000014 	.word	0x20000014
 80025b8:	ffff0208 	.word	0xffff0208

080025bc <memset>:
 80025bc:	4603      	mov	r3, r0
 80025be:	4402      	add	r2, r0
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d100      	bne.n	80025c6 <memset+0xa>
 80025c4:	4770      	bx	lr
 80025c6:	f803 1b01 	strb.w	r1, [r3], #1
 80025ca:	e7f9      	b.n	80025c0 <memset+0x4>

080025cc <_sbrk_r>:
 80025cc:	b538      	push	{r3, r4, r5, lr}
 80025ce:	2300      	movs	r3, #0
 80025d0:	4d05      	ldr	r5, [pc, #20]	@ (80025e8 <_sbrk_r+0x1c>)
 80025d2:	4604      	mov	r4, r0
 80025d4:	4608      	mov	r0, r1
 80025d6:	602b      	str	r3, [r5, #0]
 80025d8:	f7fe fbca 	bl	8000d70 <_sbrk>
 80025dc:	1c43      	adds	r3, r0, #1
 80025de:	d102      	bne.n	80025e6 <_sbrk_r+0x1a>
 80025e0:	682b      	ldr	r3, [r5, #0]
 80025e2:	b103      	cbz	r3, 80025e6 <_sbrk_r+0x1a>
 80025e4:	6023      	str	r3, [r4, #0]
 80025e6:	bd38      	pop	{r3, r4, r5, pc}
 80025e8:	20000418 	.word	0x20000418

080025ec <__errno>:
 80025ec:	4b01      	ldr	r3, [pc, #4]	@ (80025f4 <__errno+0x8>)
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000014 	.word	0x20000014

080025f8 <__libc_init_array>:
 80025f8:	b570      	push	{r4, r5, r6, lr}
 80025fa:	2600      	movs	r6, #0
 80025fc:	4d0c      	ldr	r5, [pc, #48]	@ (8002630 <__libc_init_array+0x38>)
 80025fe:	4c0d      	ldr	r4, [pc, #52]	@ (8002634 <__libc_init_array+0x3c>)
 8002600:	1b64      	subs	r4, r4, r5
 8002602:	10a4      	asrs	r4, r4, #2
 8002604:	42a6      	cmp	r6, r4
 8002606:	d109      	bne.n	800261c <__libc_init_array+0x24>
 8002608:	f000 fbba 	bl	8002d80 <_init>
 800260c:	2600      	movs	r6, #0
 800260e:	4d0a      	ldr	r5, [pc, #40]	@ (8002638 <__libc_init_array+0x40>)
 8002610:	4c0a      	ldr	r4, [pc, #40]	@ (800263c <__libc_init_array+0x44>)
 8002612:	1b64      	subs	r4, r4, r5
 8002614:	10a4      	asrs	r4, r4, #2
 8002616:	42a6      	cmp	r6, r4
 8002618:	d105      	bne.n	8002626 <__libc_init_array+0x2e>
 800261a:	bd70      	pop	{r4, r5, r6, pc}
 800261c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002620:	4798      	blx	r3
 8002622:	3601      	adds	r6, #1
 8002624:	e7ee      	b.n	8002604 <__libc_init_array+0xc>
 8002626:	f855 3b04 	ldr.w	r3, [r5], #4
 800262a:	4798      	blx	r3
 800262c:	3601      	adds	r6, #1
 800262e:	e7f2      	b.n	8002616 <__libc_init_array+0x1e>
 8002630:	0800346c 	.word	0x0800346c
 8002634:	0800346c 	.word	0x0800346c
 8002638:	0800346c 	.word	0x0800346c
 800263c:	08003470 	.word	0x08003470

08002640 <__retarget_lock_acquire_recursive>:
 8002640:	4770      	bx	lr

08002642 <__retarget_lock_release_recursive>:
 8002642:	4770      	bx	lr

08002644 <_free_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4605      	mov	r5, r0
 8002648:	2900      	cmp	r1, #0
 800264a:	d040      	beq.n	80026ce <_free_r+0x8a>
 800264c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002650:	1f0c      	subs	r4, r1, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	bfb8      	it	lt
 8002656:	18e4      	addlt	r4, r4, r3
 8002658:	f7ff ff00 	bl	800245c <__malloc_lock>
 800265c:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <_free_r+0x8c>)
 800265e:	6813      	ldr	r3, [r2, #0]
 8002660:	b933      	cbnz	r3, 8002670 <_free_r+0x2c>
 8002662:	6063      	str	r3, [r4, #4]
 8002664:	6014      	str	r4, [r2, #0]
 8002666:	4628      	mov	r0, r5
 8002668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800266c:	f7ff befc 	b.w	8002468 <__malloc_unlock>
 8002670:	42a3      	cmp	r3, r4
 8002672:	d908      	bls.n	8002686 <_free_r+0x42>
 8002674:	6820      	ldr	r0, [r4, #0]
 8002676:	1821      	adds	r1, r4, r0
 8002678:	428b      	cmp	r3, r1
 800267a:	bf01      	itttt	eq
 800267c:	6819      	ldreq	r1, [r3, #0]
 800267e:	685b      	ldreq	r3, [r3, #4]
 8002680:	1809      	addeq	r1, r1, r0
 8002682:	6021      	streq	r1, [r4, #0]
 8002684:	e7ed      	b.n	8002662 <_free_r+0x1e>
 8002686:	461a      	mov	r2, r3
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	b10b      	cbz	r3, 8002690 <_free_r+0x4c>
 800268c:	42a3      	cmp	r3, r4
 800268e:	d9fa      	bls.n	8002686 <_free_r+0x42>
 8002690:	6811      	ldr	r1, [r2, #0]
 8002692:	1850      	adds	r0, r2, r1
 8002694:	42a0      	cmp	r0, r4
 8002696:	d10b      	bne.n	80026b0 <_free_r+0x6c>
 8002698:	6820      	ldr	r0, [r4, #0]
 800269a:	4401      	add	r1, r0
 800269c:	1850      	adds	r0, r2, r1
 800269e:	4283      	cmp	r3, r0
 80026a0:	6011      	str	r1, [r2, #0]
 80026a2:	d1e0      	bne.n	8002666 <_free_r+0x22>
 80026a4:	6818      	ldr	r0, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4408      	add	r0, r1
 80026aa:	6010      	str	r0, [r2, #0]
 80026ac:	6053      	str	r3, [r2, #4]
 80026ae:	e7da      	b.n	8002666 <_free_r+0x22>
 80026b0:	d902      	bls.n	80026b8 <_free_r+0x74>
 80026b2:	230c      	movs	r3, #12
 80026b4:	602b      	str	r3, [r5, #0]
 80026b6:	e7d6      	b.n	8002666 <_free_r+0x22>
 80026b8:	6820      	ldr	r0, [r4, #0]
 80026ba:	1821      	adds	r1, r4, r0
 80026bc:	428b      	cmp	r3, r1
 80026be:	bf01      	itttt	eq
 80026c0:	6819      	ldreq	r1, [r3, #0]
 80026c2:	685b      	ldreq	r3, [r3, #4]
 80026c4:	1809      	addeq	r1, r1, r0
 80026c6:	6021      	streq	r1, [r4, #0]
 80026c8:	6063      	str	r3, [r4, #4]
 80026ca:	6054      	str	r4, [r2, #4]
 80026cc:	e7cb      	b.n	8002666 <_free_r+0x22>
 80026ce:	bd38      	pop	{r3, r4, r5, pc}
 80026d0:	200002dc 	.word	0x200002dc

080026d4 <__ssputs_r>:
 80026d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d8:	461f      	mov	r7, r3
 80026da:	688e      	ldr	r6, [r1, #8]
 80026dc:	4682      	mov	sl, r0
 80026de:	42be      	cmp	r6, r7
 80026e0:	460c      	mov	r4, r1
 80026e2:	4690      	mov	r8, r2
 80026e4:	680b      	ldr	r3, [r1, #0]
 80026e6:	d82d      	bhi.n	8002744 <__ssputs_r+0x70>
 80026e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80026f0:	d026      	beq.n	8002740 <__ssputs_r+0x6c>
 80026f2:	6965      	ldr	r5, [r4, #20]
 80026f4:	6909      	ldr	r1, [r1, #16]
 80026f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026fa:	eba3 0901 	sub.w	r9, r3, r1
 80026fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002702:	1c7b      	adds	r3, r7, #1
 8002704:	444b      	add	r3, r9
 8002706:	106d      	asrs	r5, r5, #1
 8002708:	429d      	cmp	r5, r3
 800270a:	bf38      	it	cc
 800270c:	461d      	movcc	r5, r3
 800270e:	0553      	lsls	r3, r2, #21
 8002710:	d527      	bpl.n	8002762 <__ssputs_r+0x8e>
 8002712:	4629      	mov	r1, r5
 8002714:	f7ff fe22 	bl	800235c <_malloc_r>
 8002718:	4606      	mov	r6, r0
 800271a:	b360      	cbz	r0, 8002776 <__ssputs_r+0xa2>
 800271c:	464a      	mov	r2, r9
 800271e:	6921      	ldr	r1, [r4, #16]
 8002720:	f000 faea 	bl	8002cf8 <memcpy>
 8002724:	89a3      	ldrh	r3, [r4, #12]
 8002726:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800272a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800272e:	81a3      	strh	r3, [r4, #12]
 8002730:	6126      	str	r6, [r4, #16]
 8002732:	444e      	add	r6, r9
 8002734:	6026      	str	r6, [r4, #0]
 8002736:	463e      	mov	r6, r7
 8002738:	6165      	str	r5, [r4, #20]
 800273a:	eba5 0509 	sub.w	r5, r5, r9
 800273e:	60a5      	str	r5, [r4, #8]
 8002740:	42be      	cmp	r6, r7
 8002742:	d900      	bls.n	8002746 <__ssputs_r+0x72>
 8002744:	463e      	mov	r6, r7
 8002746:	4632      	mov	r2, r6
 8002748:	4641      	mov	r1, r8
 800274a:	6820      	ldr	r0, [r4, #0]
 800274c:	f000 faac 	bl	8002ca8 <memmove>
 8002750:	2000      	movs	r0, #0
 8002752:	68a3      	ldr	r3, [r4, #8]
 8002754:	1b9b      	subs	r3, r3, r6
 8002756:	60a3      	str	r3, [r4, #8]
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	4433      	add	r3, r6
 800275c:	6023      	str	r3, [r4, #0]
 800275e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002762:	462a      	mov	r2, r5
 8002764:	f000 fad6 	bl	8002d14 <_realloc_r>
 8002768:	4606      	mov	r6, r0
 800276a:	2800      	cmp	r0, #0
 800276c:	d1e0      	bne.n	8002730 <__ssputs_r+0x5c>
 800276e:	4650      	mov	r0, sl
 8002770:	6921      	ldr	r1, [r4, #16]
 8002772:	f7ff ff67 	bl	8002644 <_free_r>
 8002776:	230c      	movs	r3, #12
 8002778:	f8ca 3000 	str.w	r3, [sl]
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	f04f 30ff 	mov.w	r0, #4294967295
 8002782:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002786:	81a3      	strh	r3, [r4, #12]
 8002788:	e7e9      	b.n	800275e <__ssputs_r+0x8a>
	...

0800278c <_svfiprintf_r>:
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	4698      	mov	r8, r3
 8002792:	898b      	ldrh	r3, [r1, #12]
 8002794:	4607      	mov	r7, r0
 8002796:	061b      	lsls	r3, r3, #24
 8002798:	460d      	mov	r5, r1
 800279a:	4614      	mov	r4, r2
 800279c:	b09d      	sub	sp, #116	@ 0x74
 800279e:	d510      	bpl.n	80027c2 <_svfiprintf_r+0x36>
 80027a0:	690b      	ldr	r3, [r1, #16]
 80027a2:	b973      	cbnz	r3, 80027c2 <_svfiprintf_r+0x36>
 80027a4:	2140      	movs	r1, #64	@ 0x40
 80027a6:	f7ff fdd9 	bl	800235c <_malloc_r>
 80027aa:	6028      	str	r0, [r5, #0]
 80027ac:	6128      	str	r0, [r5, #16]
 80027ae:	b930      	cbnz	r0, 80027be <_svfiprintf_r+0x32>
 80027b0:	230c      	movs	r3, #12
 80027b2:	603b      	str	r3, [r7, #0]
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	b01d      	add	sp, #116	@ 0x74
 80027ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027be:	2340      	movs	r3, #64	@ 0x40
 80027c0:	616b      	str	r3, [r5, #20]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80027c6:	2320      	movs	r3, #32
 80027c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80027cc:	2330      	movs	r3, #48	@ 0x30
 80027ce:	f04f 0901 	mov.w	r9, #1
 80027d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80027d6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002970 <_svfiprintf_r+0x1e4>
 80027da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80027de:	4623      	mov	r3, r4
 80027e0:	469a      	mov	sl, r3
 80027e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80027e6:	b10a      	cbz	r2, 80027ec <_svfiprintf_r+0x60>
 80027e8:	2a25      	cmp	r2, #37	@ 0x25
 80027ea:	d1f9      	bne.n	80027e0 <_svfiprintf_r+0x54>
 80027ec:	ebba 0b04 	subs.w	fp, sl, r4
 80027f0:	d00b      	beq.n	800280a <_svfiprintf_r+0x7e>
 80027f2:	465b      	mov	r3, fp
 80027f4:	4622      	mov	r2, r4
 80027f6:	4629      	mov	r1, r5
 80027f8:	4638      	mov	r0, r7
 80027fa:	f7ff ff6b 	bl	80026d4 <__ssputs_r>
 80027fe:	3001      	adds	r0, #1
 8002800:	f000 80a7 	beq.w	8002952 <_svfiprintf_r+0x1c6>
 8002804:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002806:	445a      	add	r2, fp
 8002808:	9209      	str	r2, [sp, #36]	@ 0x24
 800280a:	f89a 3000 	ldrb.w	r3, [sl]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 809f 	beq.w	8002952 <_svfiprintf_r+0x1c6>
 8002814:	2300      	movs	r3, #0
 8002816:	f04f 32ff 	mov.w	r2, #4294967295
 800281a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800281e:	f10a 0a01 	add.w	sl, sl, #1
 8002822:	9304      	str	r3, [sp, #16]
 8002824:	9307      	str	r3, [sp, #28]
 8002826:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800282a:	931a      	str	r3, [sp, #104]	@ 0x68
 800282c:	4654      	mov	r4, sl
 800282e:	2205      	movs	r2, #5
 8002830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002834:	484e      	ldr	r0, [pc, #312]	@ (8002970 <_svfiprintf_r+0x1e4>)
 8002836:	f000 fa51 	bl	8002cdc <memchr>
 800283a:	9a04      	ldr	r2, [sp, #16]
 800283c:	b9d8      	cbnz	r0, 8002876 <_svfiprintf_r+0xea>
 800283e:	06d0      	lsls	r0, r2, #27
 8002840:	bf44      	itt	mi
 8002842:	2320      	movmi	r3, #32
 8002844:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002848:	0711      	lsls	r1, r2, #28
 800284a:	bf44      	itt	mi
 800284c:	232b      	movmi	r3, #43	@ 0x2b
 800284e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002852:	f89a 3000 	ldrb.w	r3, [sl]
 8002856:	2b2a      	cmp	r3, #42	@ 0x2a
 8002858:	d015      	beq.n	8002886 <_svfiprintf_r+0xfa>
 800285a:	4654      	mov	r4, sl
 800285c:	2000      	movs	r0, #0
 800285e:	f04f 0c0a 	mov.w	ip, #10
 8002862:	9a07      	ldr	r2, [sp, #28]
 8002864:	4621      	mov	r1, r4
 8002866:	f811 3b01 	ldrb.w	r3, [r1], #1
 800286a:	3b30      	subs	r3, #48	@ 0x30
 800286c:	2b09      	cmp	r3, #9
 800286e:	d94b      	bls.n	8002908 <_svfiprintf_r+0x17c>
 8002870:	b1b0      	cbz	r0, 80028a0 <_svfiprintf_r+0x114>
 8002872:	9207      	str	r2, [sp, #28]
 8002874:	e014      	b.n	80028a0 <_svfiprintf_r+0x114>
 8002876:	eba0 0308 	sub.w	r3, r0, r8
 800287a:	fa09 f303 	lsl.w	r3, r9, r3
 800287e:	4313      	orrs	r3, r2
 8002880:	46a2      	mov	sl, r4
 8002882:	9304      	str	r3, [sp, #16]
 8002884:	e7d2      	b.n	800282c <_svfiprintf_r+0xa0>
 8002886:	9b03      	ldr	r3, [sp, #12]
 8002888:	1d19      	adds	r1, r3, #4
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	9103      	str	r1, [sp, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	bfbb      	ittet	lt
 8002892:	425b      	neglt	r3, r3
 8002894:	f042 0202 	orrlt.w	r2, r2, #2
 8002898:	9307      	strge	r3, [sp, #28]
 800289a:	9307      	strlt	r3, [sp, #28]
 800289c:	bfb8      	it	lt
 800289e:	9204      	strlt	r2, [sp, #16]
 80028a0:	7823      	ldrb	r3, [r4, #0]
 80028a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80028a4:	d10a      	bne.n	80028bc <_svfiprintf_r+0x130>
 80028a6:	7863      	ldrb	r3, [r4, #1]
 80028a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80028aa:	d132      	bne.n	8002912 <_svfiprintf_r+0x186>
 80028ac:	9b03      	ldr	r3, [sp, #12]
 80028ae:	3402      	adds	r4, #2
 80028b0:	1d1a      	adds	r2, r3, #4
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	9203      	str	r2, [sp, #12]
 80028b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80028ba:	9305      	str	r3, [sp, #20]
 80028bc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002974 <_svfiprintf_r+0x1e8>
 80028c0:	2203      	movs	r2, #3
 80028c2:	4650      	mov	r0, sl
 80028c4:	7821      	ldrb	r1, [r4, #0]
 80028c6:	f000 fa09 	bl	8002cdc <memchr>
 80028ca:	b138      	cbz	r0, 80028dc <_svfiprintf_r+0x150>
 80028cc:	2240      	movs	r2, #64	@ 0x40
 80028ce:	9b04      	ldr	r3, [sp, #16]
 80028d0:	eba0 000a 	sub.w	r0, r0, sl
 80028d4:	4082      	lsls	r2, r0
 80028d6:	4313      	orrs	r3, r2
 80028d8:	3401      	adds	r4, #1
 80028da:	9304      	str	r3, [sp, #16]
 80028dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028e0:	2206      	movs	r2, #6
 80028e2:	4825      	ldr	r0, [pc, #148]	@ (8002978 <_svfiprintf_r+0x1ec>)
 80028e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80028e8:	f000 f9f8 	bl	8002cdc <memchr>
 80028ec:	2800      	cmp	r0, #0
 80028ee:	d036      	beq.n	800295e <_svfiprintf_r+0x1d2>
 80028f0:	4b22      	ldr	r3, [pc, #136]	@ (800297c <_svfiprintf_r+0x1f0>)
 80028f2:	bb1b      	cbnz	r3, 800293c <_svfiprintf_r+0x1b0>
 80028f4:	9b03      	ldr	r3, [sp, #12]
 80028f6:	3307      	adds	r3, #7
 80028f8:	f023 0307 	bic.w	r3, r3, #7
 80028fc:	3308      	adds	r3, #8
 80028fe:	9303      	str	r3, [sp, #12]
 8002900:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002902:	4433      	add	r3, r6
 8002904:	9309      	str	r3, [sp, #36]	@ 0x24
 8002906:	e76a      	b.n	80027de <_svfiprintf_r+0x52>
 8002908:	460c      	mov	r4, r1
 800290a:	2001      	movs	r0, #1
 800290c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002910:	e7a8      	b.n	8002864 <_svfiprintf_r+0xd8>
 8002912:	2300      	movs	r3, #0
 8002914:	f04f 0c0a 	mov.w	ip, #10
 8002918:	4619      	mov	r1, r3
 800291a:	3401      	adds	r4, #1
 800291c:	9305      	str	r3, [sp, #20]
 800291e:	4620      	mov	r0, r4
 8002920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002924:	3a30      	subs	r2, #48	@ 0x30
 8002926:	2a09      	cmp	r2, #9
 8002928:	d903      	bls.n	8002932 <_svfiprintf_r+0x1a6>
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0c6      	beq.n	80028bc <_svfiprintf_r+0x130>
 800292e:	9105      	str	r1, [sp, #20]
 8002930:	e7c4      	b.n	80028bc <_svfiprintf_r+0x130>
 8002932:	4604      	mov	r4, r0
 8002934:	2301      	movs	r3, #1
 8002936:	fb0c 2101 	mla	r1, ip, r1, r2
 800293a:	e7f0      	b.n	800291e <_svfiprintf_r+0x192>
 800293c:	ab03      	add	r3, sp, #12
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	462a      	mov	r2, r5
 8002942:	4638      	mov	r0, r7
 8002944:	4b0e      	ldr	r3, [pc, #56]	@ (8002980 <_svfiprintf_r+0x1f4>)
 8002946:	a904      	add	r1, sp, #16
 8002948:	f3af 8000 	nop.w
 800294c:	1c42      	adds	r2, r0, #1
 800294e:	4606      	mov	r6, r0
 8002950:	d1d6      	bne.n	8002900 <_svfiprintf_r+0x174>
 8002952:	89ab      	ldrh	r3, [r5, #12]
 8002954:	065b      	lsls	r3, r3, #25
 8002956:	f53f af2d 	bmi.w	80027b4 <_svfiprintf_r+0x28>
 800295a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800295c:	e72c      	b.n	80027b8 <_svfiprintf_r+0x2c>
 800295e:	ab03      	add	r3, sp, #12
 8002960:	9300      	str	r3, [sp, #0]
 8002962:	462a      	mov	r2, r5
 8002964:	4638      	mov	r0, r7
 8002966:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <_svfiprintf_r+0x1f4>)
 8002968:	a904      	add	r1, sp, #16
 800296a:	f000 f87d 	bl	8002a68 <_printf_i>
 800296e:	e7ed      	b.n	800294c <_svfiprintf_r+0x1c0>
 8002970:	0800342f 	.word	0x0800342f
 8002974:	08003435 	.word	0x08003435
 8002978:	08003439 	.word	0x08003439
 800297c:	00000000 	.word	0x00000000
 8002980:	080026d5 	.word	0x080026d5

08002984 <_printf_common>:
 8002984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002988:	4616      	mov	r6, r2
 800298a:	4698      	mov	r8, r3
 800298c:	688a      	ldr	r2, [r1, #8]
 800298e:	690b      	ldr	r3, [r1, #16]
 8002990:	4607      	mov	r7, r0
 8002992:	4293      	cmp	r3, r2
 8002994:	bfb8      	it	lt
 8002996:	4613      	movlt	r3, r2
 8002998:	6033      	str	r3, [r6, #0]
 800299a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800299e:	460c      	mov	r4, r1
 80029a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80029a4:	b10a      	cbz	r2, 80029aa <_printf_common+0x26>
 80029a6:	3301      	adds	r3, #1
 80029a8:	6033      	str	r3, [r6, #0]
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	0699      	lsls	r1, r3, #26
 80029ae:	bf42      	ittt	mi
 80029b0:	6833      	ldrmi	r3, [r6, #0]
 80029b2:	3302      	addmi	r3, #2
 80029b4:	6033      	strmi	r3, [r6, #0]
 80029b6:	6825      	ldr	r5, [r4, #0]
 80029b8:	f015 0506 	ands.w	r5, r5, #6
 80029bc:	d106      	bne.n	80029cc <_printf_common+0x48>
 80029be:	f104 0a19 	add.w	sl, r4, #25
 80029c2:	68e3      	ldr	r3, [r4, #12]
 80029c4:	6832      	ldr	r2, [r6, #0]
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	42ab      	cmp	r3, r5
 80029ca:	dc2b      	bgt.n	8002a24 <_printf_common+0xa0>
 80029cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80029d0:	6822      	ldr	r2, [r4, #0]
 80029d2:	3b00      	subs	r3, #0
 80029d4:	bf18      	it	ne
 80029d6:	2301      	movne	r3, #1
 80029d8:	0692      	lsls	r2, r2, #26
 80029da:	d430      	bmi.n	8002a3e <_printf_common+0xba>
 80029dc:	4641      	mov	r1, r8
 80029de:	4638      	mov	r0, r7
 80029e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80029e4:	47c8      	blx	r9
 80029e6:	3001      	adds	r0, #1
 80029e8:	d023      	beq.n	8002a32 <_printf_common+0xae>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	6922      	ldr	r2, [r4, #16]
 80029ee:	f003 0306 	and.w	r3, r3, #6
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	bf14      	ite	ne
 80029f6:	2500      	movne	r5, #0
 80029f8:	6833      	ldreq	r3, [r6, #0]
 80029fa:	f04f 0600 	mov.w	r6, #0
 80029fe:	bf08      	it	eq
 8002a00:	68e5      	ldreq	r5, [r4, #12]
 8002a02:	f104 041a 	add.w	r4, r4, #26
 8002a06:	bf08      	it	eq
 8002a08:	1aed      	subeq	r5, r5, r3
 8002a0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002a0e:	bf08      	it	eq
 8002a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a14:	4293      	cmp	r3, r2
 8002a16:	bfc4      	itt	gt
 8002a18:	1a9b      	subgt	r3, r3, r2
 8002a1a:	18ed      	addgt	r5, r5, r3
 8002a1c:	42b5      	cmp	r5, r6
 8002a1e:	d11a      	bne.n	8002a56 <_printf_common+0xd2>
 8002a20:	2000      	movs	r0, #0
 8002a22:	e008      	b.n	8002a36 <_printf_common+0xb2>
 8002a24:	2301      	movs	r3, #1
 8002a26:	4652      	mov	r2, sl
 8002a28:	4641      	mov	r1, r8
 8002a2a:	4638      	mov	r0, r7
 8002a2c:	47c8      	blx	r9
 8002a2e:	3001      	adds	r0, #1
 8002a30:	d103      	bne.n	8002a3a <_printf_common+0xb6>
 8002a32:	f04f 30ff 	mov.w	r0, #4294967295
 8002a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a3a:	3501      	adds	r5, #1
 8002a3c:	e7c1      	b.n	80029c2 <_printf_common+0x3e>
 8002a3e:	2030      	movs	r0, #48	@ 0x30
 8002a40:	18e1      	adds	r1, r4, r3
 8002a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002a4c:	4422      	add	r2, r4
 8002a4e:	3302      	adds	r3, #2
 8002a50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002a54:	e7c2      	b.n	80029dc <_printf_common+0x58>
 8002a56:	2301      	movs	r3, #1
 8002a58:	4622      	mov	r2, r4
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	4638      	mov	r0, r7
 8002a5e:	47c8      	blx	r9
 8002a60:	3001      	adds	r0, #1
 8002a62:	d0e6      	beq.n	8002a32 <_printf_common+0xae>
 8002a64:	3601      	adds	r6, #1
 8002a66:	e7d9      	b.n	8002a1c <_printf_common+0x98>

08002a68 <_printf_i>:
 8002a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002a6c:	7e0f      	ldrb	r7, [r1, #24]
 8002a6e:	4691      	mov	r9, r2
 8002a70:	2f78      	cmp	r7, #120	@ 0x78
 8002a72:	4680      	mov	r8, r0
 8002a74:	460c      	mov	r4, r1
 8002a76:	469a      	mov	sl, r3
 8002a78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002a7e:	d807      	bhi.n	8002a90 <_printf_i+0x28>
 8002a80:	2f62      	cmp	r7, #98	@ 0x62
 8002a82:	d80a      	bhi.n	8002a9a <_printf_i+0x32>
 8002a84:	2f00      	cmp	r7, #0
 8002a86:	f000 80d3 	beq.w	8002c30 <_printf_i+0x1c8>
 8002a8a:	2f58      	cmp	r7, #88	@ 0x58
 8002a8c:	f000 80ba 	beq.w	8002c04 <_printf_i+0x19c>
 8002a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002a98:	e03a      	b.n	8002b10 <_printf_i+0xa8>
 8002a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002a9e:	2b15      	cmp	r3, #21
 8002aa0:	d8f6      	bhi.n	8002a90 <_printf_i+0x28>
 8002aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8002aa8 <_printf_i+0x40>)
 8002aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002aa8:	08002b01 	.word	0x08002b01
 8002aac:	08002b15 	.word	0x08002b15
 8002ab0:	08002a91 	.word	0x08002a91
 8002ab4:	08002a91 	.word	0x08002a91
 8002ab8:	08002a91 	.word	0x08002a91
 8002abc:	08002a91 	.word	0x08002a91
 8002ac0:	08002b15 	.word	0x08002b15
 8002ac4:	08002a91 	.word	0x08002a91
 8002ac8:	08002a91 	.word	0x08002a91
 8002acc:	08002a91 	.word	0x08002a91
 8002ad0:	08002a91 	.word	0x08002a91
 8002ad4:	08002c17 	.word	0x08002c17
 8002ad8:	08002b3f 	.word	0x08002b3f
 8002adc:	08002bd1 	.word	0x08002bd1
 8002ae0:	08002a91 	.word	0x08002a91
 8002ae4:	08002a91 	.word	0x08002a91
 8002ae8:	08002c39 	.word	0x08002c39
 8002aec:	08002a91 	.word	0x08002a91
 8002af0:	08002b3f 	.word	0x08002b3f
 8002af4:	08002a91 	.word	0x08002a91
 8002af8:	08002a91 	.word	0x08002a91
 8002afc:	08002bd9 	.word	0x08002bd9
 8002b00:	6833      	ldr	r3, [r6, #0]
 8002b02:	1d1a      	adds	r2, r3, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6032      	str	r2, [r6, #0]
 8002b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002b10:	2301      	movs	r3, #1
 8002b12:	e09e      	b.n	8002c52 <_printf_i+0x1ea>
 8002b14:	6833      	ldr	r3, [r6, #0]
 8002b16:	6820      	ldr	r0, [r4, #0]
 8002b18:	1d19      	adds	r1, r3, #4
 8002b1a:	6031      	str	r1, [r6, #0]
 8002b1c:	0606      	lsls	r6, r0, #24
 8002b1e:	d501      	bpl.n	8002b24 <_printf_i+0xbc>
 8002b20:	681d      	ldr	r5, [r3, #0]
 8002b22:	e003      	b.n	8002b2c <_printf_i+0xc4>
 8002b24:	0645      	lsls	r5, r0, #25
 8002b26:	d5fb      	bpl.n	8002b20 <_printf_i+0xb8>
 8002b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002b2c:	2d00      	cmp	r5, #0
 8002b2e:	da03      	bge.n	8002b38 <_printf_i+0xd0>
 8002b30:	232d      	movs	r3, #45	@ 0x2d
 8002b32:	426d      	negs	r5, r5
 8002b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002b38:	230a      	movs	r3, #10
 8002b3a:	4859      	ldr	r0, [pc, #356]	@ (8002ca0 <_printf_i+0x238>)
 8002b3c:	e011      	b.n	8002b62 <_printf_i+0xfa>
 8002b3e:	6821      	ldr	r1, [r4, #0]
 8002b40:	6833      	ldr	r3, [r6, #0]
 8002b42:	0608      	lsls	r0, r1, #24
 8002b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8002b48:	d402      	bmi.n	8002b50 <_printf_i+0xe8>
 8002b4a:	0649      	lsls	r1, r1, #25
 8002b4c:	bf48      	it	mi
 8002b4e:	b2ad      	uxthmi	r5, r5
 8002b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8002b52:	6033      	str	r3, [r6, #0]
 8002b54:	bf14      	ite	ne
 8002b56:	230a      	movne	r3, #10
 8002b58:	2308      	moveq	r3, #8
 8002b5a:	4851      	ldr	r0, [pc, #324]	@ (8002ca0 <_printf_i+0x238>)
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002b62:	6866      	ldr	r6, [r4, #4]
 8002b64:	2e00      	cmp	r6, #0
 8002b66:	bfa8      	it	ge
 8002b68:	6821      	ldrge	r1, [r4, #0]
 8002b6a:	60a6      	str	r6, [r4, #8]
 8002b6c:	bfa4      	itt	ge
 8002b6e:	f021 0104 	bicge.w	r1, r1, #4
 8002b72:	6021      	strge	r1, [r4, #0]
 8002b74:	b90d      	cbnz	r5, 8002b7a <_printf_i+0x112>
 8002b76:	2e00      	cmp	r6, #0
 8002b78:	d04b      	beq.n	8002c12 <_printf_i+0x1aa>
 8002b7a:	4616      	mov	r6, r2
 8002b7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002b80:	fb03 5711 	mls	r7, r3, r1, r5
 8002b84:	5dc7      	ldrb	r7, [r0, r7]
 8002b86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002b8a:	462f      	mov	r7, r5
 8002b8c:	42bb      	cmp	r3, r7
 8002b8e:	460d      	mov	r5, r1
 8002b90:	d9f4      	bls.n	8002b7c <_printf_i+0x114>
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d10b      	bne.n	8002bae <_printf_i+0x146>
 8002b96:	6823      	ldr	r3, [r4, #0]
 8002b98:	07df      	lsls	r7, r3, #31
 8002b9a:	d508      	bpl.n	8002bae <_printf_i+0x146>
 8002b9c:	6923      	ldr	r3, [r4, #16]
 8002b9e:	6861      	ldr	r1, [r4, #4]
 8002ba0:	4299      	cmp	r1, r3
 8002ba2:	bfde      	ittt	le
 8002ba4:	2330      	movle	r3, #48	@ 0x30
 8002ba6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002baa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002bae:	1b92      	subs	r2, r2, r6
 8002bb0:	6122      	str	r2, [r4, #16]
 8002bb2:	464b      	mov	r3, r9
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	4640      	mov	r0, r8
 8002bb8:	f8cd a000 	str.w	sl, [sp]
 8002bbc:	aa03      	add	r2, sp, #12
 8002bbe:	f7ff fee1 	bl	8002984 <_printf_common>
 8002bc2:	3001      	adds	r0, #1
 8002bc4:	d14a      	bne.n	8002c5c <_printf_i+0x1f4>
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	b004      	add	sp, #16
 8002bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f043 0320 	orr.w	r3, r3, #32
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	2778      	movs	r7, #120	@ 0x78
 8002bda:	4832      	ldr	r0, [pc, #200]	@ (8002ca4 <_printf_i+0x23c>)
 8002bdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	6831      	ldr	r1, [r6, #0]
 8002be4:	061f      	lsls	r7, r3, #24
 8002be6:	f851 5b04 	ldr.w	r5, [r1], #4
 8002bea:	d402      	bmi.n	8002bf2 <_printf_i+0x18a>
 8002bec:	065f      	lsls	r7, r3, #25
 8002bee:	bf48      	it	mi
 8002bf0:	b2ad      	uxthmi	r5, r5
 8002bf2:	6031      	str	r1, [r6, #0]
 8002bf4:	07d9      	lsls	r1, r3, #31
 8002bf6:	bf44      	itt	mi
 8002bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8002bfc:	6023      	strmi	r3, [r4, #0]
 8002bfe:	b11d      	cbz	r5, 8002c08 <_printf_i+0x1a0>
 8002c00:	2310      	movs	r3, #16
 8002c02:	e7ab      	b.n	8002b5c <_printf_i+0xf4>
 8002c04:	4826      	ldr	r0, [pc, #152]	@ (8002ca0 <_printf_i+0x238>)
 8002c06:	e7e9      	b.n	8002bdc <_printf_i+0x174>
 8002c08:	6823      	ldr	r3, [r4, #0]
 8002c0a:	f023 0320 	bic.w	r3, r3, #32
 8002c0e:	6023      	str	r3, [r4, #0]
 8002c10:	e7f6      	b.n	8002c00 <_printf_i+0x198>
 8002c12:	4616      	mov	r6, r2
 8002c14:	e7bd      	b.n	8002b92 <_printf_i+0x12a>
 8002c16:	6833      	ldr	r3, [r6, #0]
 8002c18:	6825      	ldr	r5, [r4, #0]
 8002c1a:	1d18      	adds	r0, r3, #4
 8002c1c:	6961      	ldr	r1, [r4, #20]
 8002c1e:	6030      	str	r0, [r6, #0]
 8002c20:	062e      	lsls	r6, r5, #24
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	d501      	bpl.n	8002c2a <_printf_i+0x1c2>
 8002c26:	6019      	str	r1, [r3, #0]
 8002c28:	e002      	b.n	8002c30 <_printf_i+0x1c8>
 8002c2a:	0668      	lsls	r0, r5, #25
 8002c2c:	d5fb      	bpl.n	8002c26 <_printf_i+0x1be>
 8002c2e:	8019      	strh	r1, [r3, #0]
 8002c30:	2300      	movs	r3, #0
 8002c32:	4616      	mov	r6, r2
 8002c34:	6123      	str	r3, [r4, #16]
 8002c36:	e7bc      	b.n	8002bb2 <_printf_i+0x14a>
 8002c38:	6833      	ldr	r3, [r6, #0]
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	1d1a      	adds	r2, r3, #4
 8002c3e:	6032      	str	r2, [r6, #0]
 8002c40:	681e      	ldr	r6, [r3, #0]
 8002c42:	6862      	ldr	r2, [r4, #4]
 8002c44:	4630      	mov	r0, r6
 8002c46:	f000 f849 	bl	8002cdc <memchr>
 8002c4a:	b108      	cbz	r0, 8002c50 <_printf_i+0x1e8>
 8002c4c:	1b80      	subs	r0, r0, r6
 8002c4e:	6060      	str	r0, [r4, #4]
 8002c50:	6863      	ldr	r3, [r4, #4]
 8002c52:	6123      	str	r3, [r4, #16]
 8002c54:	2300      	movs	r3, #0
 8002c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c5a:	e7aa      	b.n	8002bb2 <_printf_i+0x14a>
 8002c5c:	4632      	mov	r2, r6
 8002c5e:	4649      	mov	r1, r9
 8002c60:	4640      	mov	r0, r8
 8002c62:	6923      	ldr	r3, [r4, #16]
 8002c64:	47d0      	blx	sl
 8002c66:	3001      	adds	r0, #1
 8002c68:	d0ad      	beq.n	8002bc6 <_printf_i+0x15e>
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	079b      	lsls	r3, r3, #30
 8002c6e:	d413      	bmi.n	8002c98 <_printf_i+0x230>
 8002c70:	68e0      	ldr	r0, [r4, #12]
 8002c72:	9b03      	ldr	r3, [sp, #12]
 8002c74:	4298      	cmp	r0, r3
 8002c76:	bfb8      	it	lt
 8002c78:	4618      	movlt	r0, r3
 8002c7a:	e7a6      	b.n	8002bca <_printf_i+0x162>
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	4632      	mov	r2, r6
 8002c80:	4649      	mov	r1, r9
 8002c82:	4640      	mov	r0, r8
 8002c84:	47d0      	blx	sl
 8002c86:	3001      	adds	r0, #1
 8002c88:	d09d      	beq.n	8002bc6 <_printf_i+0x15e>
 8002c8a:	3501      	adds	r5, #1
 8002c8c:	68e3      	ldr	r3, [r4, #12]
 8002c8e:	9903      	ldr	r1, [sp, #12]
 8002c90:	1a5b      	subs	r3, r3, r1
 8002c92:	42ab      	cmp	r3, r5
 8002c94:	dcf2      	bgt.n	8002c7c <_printf_i+0x214>
 8002c96:	e7eb      	b.n	8002c70 <_printf_i+0x208>
 8002c98:	2500      	movs	r5, #0
 8002c9a:	f104 0619 	add.w	r6, r4, #25
 8002c9e:	e7f5      	b.n	8002c8c <_printf_i+0x224>
 8002ca0:	08003440 	.word	0x08003440
 8002ca4:	08003451 	.word	0x08003451

08002ca8 <memmove>:
 8002ca8:	4288      	cmp	r0, r1
 8002caa:	b510      	push	{r4, lr}
 8002cac:	eb01 0402 	add.w	r4, r1, r2
 8002cb0:	d902      	bls.n	8002cb8 <memmove+0x10>
 8002cb2:	4284      	cmp	r4, r0
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	d807      	bhi.n	8002cc8 <memmove+0x20>
 8002cb8:	1e43      	subs	r3, r0, #1
 8002cba:	42a1      	cmp	r1, r4
 8002cbc:	d008      	beq.n	8002cd0 <memmove+0x28>
 8002cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002cc6:	e7f8      	b.n	8002cba <memmove+0x12>
 8002cc8:	4601      	mov	r1, r0
 8002cca:	4402      	add	r2, r0
 8002ccc:	428a      	cmp	r2, r1
 8002cce:	d100      	bne.n	8002cd2 <memmove+0x2a>
 8002cd0:	bd10      	pop	{r4, pc}
 8002cd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002cda:	e7f7      	b.n	8002ccc <memmove+0x24>

08002cdc <memchr>:
 8002cdc:	4603      	mov	r3, r0
 8002cde:	b510      	push	{r4, lr}
 8002ce0:	b2c9      	uxtb	r1, r1
 8002ce2:	4402      	add	r2, r0
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	d101      	bne.n	8002cee <memchr+0x12>
 8002cea:	2000      	movs	r0, #0
 8002cec:	e003      	b.n	8002cf6 <memchr+0x1a>
 8002cee:	7804      	ldrb	r4, [r0, #0]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	428c      	cmp	r4, r1
 8002cf4:	d1f6      	bne.n	8002ce4 <memchr+0x8>
 8002cf6:	bd10      	pop	{r4, pc}

08002cf8 <memcpy>:
 8002cf8:	440a      	add	r2, r1
 8002cfa:	4291      	cmp	r1, r2
 8002cfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8002d00:	d100      	bne.n	8002d04 <memcpy+0xc>
 8002d02:	4770      	bx	lr
 8002d04:	b510      	push	{r4, lr}
 8002d06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d0a:	4291      	cmp	r1, r2
 8002d0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002d10:	d1f9      	bne.n	8002d06 <memcpy+0xe>
 8002d12:	bd10      	pop	{r4, pc}

08002d14 <_realloc_r>:
 8002d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d18:	4680      	mov	r8, r0
 8002d1a:	4615      	mov	r5, r2
 8002d1c:	460c      	mov	r4, r1
 8002d1e:	b921      	cbnz	r1, 8002d2a <_realloc_r+0x16>
 8002d20:	4611      	mov	r1, r2
 8002d22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d26:	f7ff bb19 	b.w	800235c <_malloc_r>
 8002d2a:	b92a      	cbnz	r2, 8002d38 <_realloc_r+0x24>
 8002d2c:	f7ff fc8a 	bl	8002644 <_free_r>
 8002d30:	2400      	movs	r4, #0
 8002d32:	4620      	mov	r0, r4
 8002d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d38:	f000 f81a 	bl	8002d70 <_malloc_usable_size_r>
 8002d3c:	4285      	cmp	r5, r0
 8002d3e:	4606      	mov	r6, r0
 8002d40:	d802      	bhi.n	8002d48 <_realloc_r+0x34>
 8002d42:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002d46:	d8f4      	bhi.n	8002d32 <_realloc_r+0x1e>
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4640      	mov	r0, r8
 8002d4c:	f7ff fb06 	bl	800235c <_malloc_r>
 8002d50:	4607      	mov	r7, r0
 8002d52:	2800      	cmp	r0, #0
 8002d54:	d0ec      	beq.n	8002d30 <_realloc_r+0x1c>
 8002d56:	42b5      	cmp	r5, r6
 8002d58:	462a      	mov	r2, r5
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	bf28      	it	cs
 8002d5e:	4632      	movcs	r2, r6
 8002d60:	f7ff ffca 	bl	8002cf8 <memcpy>
 8002d64:	4621      	mov	r1, r4
 8002d66:	4640      	mov	r0, r8
 8002d68:	f7ff fc6c 	bl	8002644 <_free_r>
 8002d6c:	463c      	mov	r4, r7
 8002d6e:	e7e0      	b.n	8002d32 <_realloc_r+0x1e>

08002d70 <_malloc_usable_size_r>:
 8002d70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d74:	1f18      	subs	r0, r3, #4
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bfbc      	itt	lt
 8002d7a:	580b      	ldrlt	r3, [r1, r0]
 8002d7c:	18c0      	addlt	r0, r0, r3
 8002d7e:	4770      	bx	lr

08002d80 <_init>:
 8002d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d82:	bf00      	nop
 8002d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d86:	bc08      	pop	{r3}
 8002d88:	469e      	mov	lr, r3
 8002d8a:	4770      	bx	lr

08002d8c <_fini>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	bf00      	nop
 8002d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d92:	bc08      	pop	{r3}
 8002d94:	469e      	mov	lr, r3
 8002d96:	4770      	bx	lr
